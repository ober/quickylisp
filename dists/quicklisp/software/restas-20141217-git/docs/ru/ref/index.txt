.. -*- RST -*-

.. _api-reference:

=============
API Reference
=============

.. defun:: restas:start
  :args: module &key hostname (port 80) (context (make-context)) acceptor-class ssl-certificate-file ssl-privatekey-file ssl-privatekey-password

  Устанавливает (запускает) модуль для обработки HTTP-запросов. `RESTAS`_
  поддерживает концепцию `виртуальных хостов <http://httpd.apache.org/docs/current/vhosts/>`_,
  что позволяет в рамках одного процесса размещать несколько сайтов с различными доменными
  именами. Кроме того, также возможно обслуживание нескольких портов.

  **Параметры**:

  * module - `package designator`_, индентифицирующий модуль, определённый
    с помощью :macro:`restas:define-module`

  * hostname - имя хоста, запросы к которму долж

  * port - порт на котором будут приниматься запросы

  * context - окружение, аналогичное указываемуму в :macro:`restas:mount-module`,
    которое позволяет настроить параметры модуля.

  * acceptor-class - символ, который определяет какой класс должен использоваться для создания
    acceptor. Данный класс должен наследовать от :class:`restas:restas-acceptor`
    или :class:`restas:restas-ssl-acceptor`. 

  * ssl-certificate-file - путь к файлу-сертификату. Указывается для соединения по
    протоколу SSL (на Lispworks можно использовать один файл содержащий и сертификат
    и ключ, в этом случае параметр ssl-privatekey-file задавать не нужно).

  * ssl-privatekey-file - путь к файлу-ключу в PEM формате.

  * ssl-privatekey-password - пароль (как строка) для использования файла-ключа (или
    NIL, что задано по умолчанию, если пароль не требуется).
  

  Данная функция может быть вызвана несколько раз с различными параметрами. Если
  разные модули были запущены для одной и той же комбинации имени хости и номера
  порта, то возможны конфликты маршрутов и в случае их возникновеня способ
  диспетчерезации запросов не определён.

.. defun:: restas:reconnect-all-routes
  :args:

  Реинициализирует диспетчер запросов. Обычно в непосредственном вызове данной
  функции нет необходимости, посольку при выполнении (:execute) макросов
  :macro:`restas:mount-module` и :macro:`restas:define-route` она вызывается
  автоматически.

Специальные переменные
======================

.. defvar:: restas:*default-host-redirect*

  Хост по-умолчанию, на который будут перенаправлять запросы, адресованные к
  незарегистрированному хосту.

.. defvar:: restas:*bindings*

  В этой переменной сохраняется набор распарсенных переменных маршрута.

.. defvar:: restas:*module*

  Активный модуль, которому принадлежит обрабатываемый маршрут

.. defvar:: restas:*route*
   :args: foo bar

  Обрабатываемый маршрут.

Маршруты
========

.. defmacro:: restas:define-route
  :args: name (template &key (method :get) content-type render-method requirement parse-vars decorators) &body body

  Создаёт новый маршрут в текущем модуле

  * name - уникальный :hs:`symbol`, являющийся индефикатором маршрута. Один и
    тот же :hs:`symbol` не может использоваться для различных маршрутов.

  * template - шаблон URL, на основе которого проверяется соответствие маршрута
    запросу. Может содержать переменные, которые непосредственно доступны в
    теле маршрута.
    
  * method - тип обрабатываемого HTTP-запроса, возможные значения: :GET, :POST,
    :PUT, :DELETE.

  * content-type - **Content-Type** результата обработки запроса,
    устанавливается в заголовке HTTP-ответа.

  * body - тело обработчика, может содержать произвольный код, результат выполнения
    которого возвращается клиенту (после обработки с помощью :fun:`restas:render-object`).

  В начале тела маршрута могут находиться декларации, специальные
  формы, начинающиеся с :hs:`keyword`:

  * :headers - *plist* с именами заголовков HTTP-ответа и их значениями.
    Используется объединение с :var:`*default-headers*`, причем в случае
    конфликта используются значения из опции маршрута.

  * :render-method - объект, который будет использоваться в вызове :fun:`restas:render-object`
    для обработки результата маршрута перед отдачей его клиенту.

  * :apply-render-method - аналогично :render-method, но для вызова
    используется не :fun:`funcall`, а :fun:`apply`.

  * :requirement - произвольная функция, которая вызывается для проверки
    соответствия маршрута условиям запроса. Если результат :hs:`NIL`, то маршрут
    считается не удовлетворяющим запросу.

  * :sift-variables - список из списков, состоящих из имени переменной
    и правила парсинга `data-sift`_ (например, функции).

  * :decorators - список декораторов маршрута, см. :ref:`manual-decorators`.

  * :additional-variables - декларация, по непосредственному эффекту
    аналогичная :macro:`let`, при этом добавляющая в объявляемую
    функцию :hs:`keyword` параметры для облегчения ее тестирования в
    REPL.

  Пример объявления тривиального маршрута:

  .. code-block:: common-lisp

    (restas:define-route main ("")
      "<h1>Hello world!</h1>")

  Подробнее об определении маршрутов смотрие :ref:`manual-routes`

.. defun:: restas:route-symbol
  :args: route

  Возвращает :hs:`symbol`, связанный с объектом-маршрутом (например, во время
  обработки запроса такой объект связан  с переменной :var:`restas:*route*`).

.. defun:: restas:genurl
  :args: route-symbol &rest args

  Вычисляет URL маршрута на основе индентифицирующего :hs:`symbol` и набора
  значений переменных его шаблона (см. :macro:`restas:define-route`)

  * route-symbol - индентификатор маршрута

  * args - последовательность (в формате *plist*) имён переменных маршрута и
    их значений.

  Пример:

  .. code-block:: common-lisp

    (restas:genurl 'my-route
                   :arg1 "foo"
                   :arg2 "bar")

.. defun:: restas:genurl*
  :args: route &rest args

  Данная функция аналогична :fun:`restas:genurl` за тем исключением, что в генерируемый
  URL также включается имя хоста.

.. defun:: restas:redirect
  :args: route-symbol &rest args

  Перенаправляет запрос с помощью :fun:`hunchentoot:redirect` для URL, вычисляемого с
  помощью :fun:`restas:genurl`. Параметры аналогичны параметрам функции :fun:`restas:genurl`.

.. defun:: restas:abort-route-handler
   :args: obj &key return-code content-typе

   Немедленно завершает обработку запроса и передаёт *OBJ* в :fun:`restas:render-object`
   для формирование ответа. Если указан keyword параметр *RETURN-CODE*, то он
   используется для установки статуса ответа, что позволяет вернуть специальную
   страницу (500, 404 и т.п.) с произвольным содержанием (по умолчанию такие страницы
   формируется стандартным образом, не зависимо от возвращаемого обработчиком результата).

Модули
======

.. defmacro:: restas:define-module
  :args: name &rest options

  Инициализирует новый модуль: создаёт новый :hs:`package` и проводит его инициализацию
  (добавляет в него некоторые служебные переменные)

.. defun:: restas:initialize-module-instance
  :args: (module context) 

  Generic-функция, вызывается при подключении модуля с помощью :macro:`restas:mount-module`.
  Может использваться, например, для дополнительной настройки контекста
  субмодуля. Должна находиться внутри пакета, определённого с помощью
  :macro:`restas:define-module`.

.. defun:: restas:finalize-module-instance
  :args: (module context)

  Generic-функция, вызывается при повторном вычислении :macro:`restas:mount-module` и может
  использоваться, например, для освобождении ресрсов, выделенных при инциализации субмодуля.

Субмодули
=========

.. defmacro:: restas:mount-module
  :args: name (module &rest decorators) &rest bindings

  Определяет субмодуль, который становится частью модуля, в пакете которого
  он определяется.

  * name - индентификатор (:hs:`symbol`) субмодуля.

  * module - `package designator`_ присоеденяемого модуля.

  * decorators - список декораторов субмодуля, см. :ref:`manual-decorators`.

  * bindings - набор символов переменных и их значений, определяющий контекст
    субмодуля. Обработка маршрутов, принадлежащих данному субмодулю, будет
    производиться в этом контексте с помощью вызова :hs:`progv`.

  Пример:

  .. code-block:: common-lisp

    (restas:mount-module tmp (#:restas.directory-publisher)
      (restas.directory-publisher:*baseurl* '("tmp"))
      (restas.directory-publisher:*directory* #P"/tmp/"))

.. defmacro:: restas:with-module
  :args: submodule &body body

  Позволяет произвольный выполнить код в окружении контекста указанного модуля.

Отображение
===========

.. defun:: restas:render-object
  :args: drawer object

  Generic-метод, используется для обработки данных, возвращаемых обработчиком
  маршрутов (определяемого в теле :macro:`restas:define-route`). Если в :macro:`restas:define-route`
  не указан параметр :render-method, то в качестве объекта *drawer* используется
  значение переменной :var:`*default-render-method*` из модуля, в котором определён
  обрабатываемый маршрут (она создаётся автоматически при определении модуля с
  помощью :macro:`restas:define-module` и её значение равно :hs:`NIL`).

  Более подробную информацию смотрите в разделе :ref:`manual-view`.

Контекст
========

В `RESTAS`_ для обеспечения модульности используется механизм, напоминающий 
`Buffer-Local Variables`_ в `GNU Emacs`_.

.. defmacro:: restas:make-context
  :args: &body bindings

  Создаёт новый динамический контекст, связывающий динамические переменные со
  значениями. Пример:

  .. code-block:: common-lisp

    (restas:make-context (restas.directory-publisher:*baseurl* '("tmp"))
                         (restas.directory-publisher:*directory* #P"/tmp/")
                         (restas.directory-publisher:*autoindex* t))

.. defun:: restas:context-add-variable
  :args: context symbol &optional value

  Добавляет новую переменную в контекст

  * context - контекст
  * symbol - :hs:`symbol`, связанный с динамической переменной
  * value - значение переменной, если не указано, то используется результат
    вызова :hs:`symbol-value`.

.. defun:: restas:context-remove-variable
  :args: context symbol 

  Удаляет переменную из контекста

.. defun:: restas:context-symbol-value
  :args: context symbol => value, present-p

  Возращает значение *value* динамической переменной, если переменная отсутствует
  в контексте, то для вычисления её значения используется :hs:`symbol-value`, а
  present-p равен :hs:`NIL`.

.. defmacro:: restas:with-context
  :args: context &body body

  Выполняет код в окружении заданного контекста с помощью :hs:`progv`.

Отладка
=======

.. defun:: restas:debug-mode-on
  :args:

  Устанавливает отладочный режим.

.. defun:: restas:debug-mode-off
  :args:

  Отменяет отладочный режим.

.. defvar:: restas:*max-debugging-threads*

  Максимально колличество одновременно отлаживаемых поток.

.. _RESTAS: http://restas.lisper.ru/
.. _data-sift: http://github.com/archimag/data-sift
.. _garbage-pools: http://github.com/archimag/garbage-pools
.. _package designator: http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_p.htm#package_designator
.. _Buffer-Local Variables: http://www.gnu.org/software/emacs/elisp/html_node/Intro-to-Buffer_002dLocal.html
.. _GNU Emacs: http://www.gnu.org/software/emacs/
