.. _manual-slime:

SLIME
=====

M-C-x vs C-c C-c
----------------

Одной из самых сильных сторон Common Lisp является мощная поддержка интерактивной
разработки. `RESTAS`_ стремится предоставить соответствующие возможности в области
разработки веб-приложений. Эта возможность обеспечивается за счёт функции
:fun:`restas:reconnect-all-routes`, которая пере-инициализирует диспетчер запросов.
Определения субмодулей (:macro:`restas:mount-submodule`) и маршрутов (:macro:`restas:define-route`)
могут быть в любой момент "перевычисленны" и внесённые изменения немедленно
отражаться на работе активных restas-приложений.  Данные макросы, в том числе,
содержат примерно такой код:

.. code-block:: common-lisp

  (eval-when (:execute)
    (reconnect-all-routes))

Т.е. для того, что бы внесённые изменения вступили в силу данные макросы должны
быть выполнены, а не просто загружены или скомпилированы. При использовании
`SLIME`_ это достигается за счёт использования команды C-M-x (slime-eval-defun),
вместо более обычной С-с С-с (slime-compile-defun). Однако, если изменилось только
тело маршрута (определённого с помощью :macro:`restas:define-route`), то для
активизации изменений достаточно и просто скомпилировать C-c C-c, мало того,
именно так и рекомендуется делать, поскольку компиляция, в отличие от выполнения,
позволяет сохранить информацию о расположении маршрута в исходном коде (технически
это связано с тем, что определение маршрута также создаёт одноимённую функцию) -
это может оказаться очень полезным при работе с картой сайта (см. далее).

SLIME-ARCHIMAG
--------------

При использовании `SLIME-ARCHIMAG`_ в Emacs становятся доступны команды
*M-x restas-inspect-module* и *M-x restas-inspect-vhost-list*, реализованные
на основе стандартного SLIME INSPECTOR (инспектора объектов).

Инспектор модулей
+++++++++++++++++

Активизируется вызовом *M-x restas-inspect-module*, при этом надо указать
имя модуля (имя соответствующего пакета). 

.. image:: module-inspector.png
   :alt: module inspector

В появившемся инспекторе показываются:

* Функции инициализации и финализации модуля. Открыть определение этих функций
  можно установив курсор на показанную функцию и нажав "." (команда
  slime-inspector-show-source) - это стандартная возможность `SLIME`_.

* Список маршрутов, определяемых модулем. Enter или Space откроет более
  подробную информацию о маршруте. А "." покажет определение его в исходном
  коде.

* Список субмодулей модуля. Enter или Space откроет инспектор субмодлуей.


Инспектор хостов
++++++++++++++++

Команда *M-x restas-inspect-vhost-list* показывает список активных virtual
hosts.

.. image:: vhosts-inspector.png
   :alt: vhosts inspector
  
После выбора нужного vhost открывается доступ к "карте сайта" и списку субмодулей,
которые присоединяются к vhost во время запуска сайта функцией :fun:`restas:start`.

.. image:: vhost-inspector.png
   :alt: vhosts inspector

Карта сайта
+++++++++++

.. image:: site-map-inspector.png
   :alt: site map inspector

Инспектор карты сайта позволяет наглядно рассмотреть дерево маршрутов. Переменные
шаблонов подсвечиваются и показываются с префиксами $ и * (для wilcard переменных).
Каждую переменную также можно исследовать, например, что бы увидеть с помощью
какой функции производиться парсинг переменной. В конце каждого листа этого дерева
находиться объект-маршрут, нажав на нём "." можно перейти к месту определения
маршрута, а Enter позволит исследовать его более детально (какой HTTP-метод
обрабатывает, какие для него проводятся дополнительные проверки и т.п.). Таким
образом, данный функционал позволяет исследовать и лучше понять как именно идёт
обработка запроса и также может использоваться для простой, ориентированной на
специфику веб-приложений, навигации по коду.

Инспектор субмодулей
++++++++++++++++++++

.. image:: submodule-inspector.png
   :alt: submodule inspector

Инспектор субмодулей похож на инспектор модулей, но также содержит раздел Context, 
в котором перечисляются переменные, связанные при подключении модуля с помощью
:macro:`restas:mount-submodule`

.. image:: planet-submodule-inspector.png
   :alt: planet submodule inspector

Команда **"Use this context as global"** делает его глобальным (путем непосредственного
присваивания соответствующим переменным значений) - это может оказаться очень
удобным для отладки приложения  в REPL. После чего можно будет вернуть изначальное
состояние командой **"Restore global context"**.

.. _RESTAS: http://restas.lisper.ru/
.. _SLIME-ARCHIMAG: http://github.com/archimag/slime-archimag
.. _SLIME: http://common-lisp.net/project/slime/

