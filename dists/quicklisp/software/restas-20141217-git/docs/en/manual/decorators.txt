.. -*- RST -*-

.. _manual-decorators:

Decorators
==========

One of the attractive features of applications based on `WSGI`_ is the
use of "middleware" components. `RESTAS`_ has similar capabilities
provided by decorators.  This is done by using
:class:`routes:proxy-route` to create a wrapper over the routes and
redefining their behaviors by specializing on the associated generic
functions.

**Decorator** - a function that takes the route and returns a different route.

Decorators can be used for many purposes including:

* Authentication/authorization

* Fine-tuning response headers

* Environment settings used for request processing

For example, to completely prevent caching in browsers you can define
a decorator named :fun:`@no-cache` like so:

.. code-block:: common-lisp

  (defclass no-cache-route (routes:proxy-route) ())

  (defmethod process-route :before ((route no-cache-route) bindings)
    (setf (hunchentoot:header-out :expires)
          (hunchentoot:rfc-1123-date))
    (setf (hunchentoot:header-out :cache-control)
          "max-age=0, no-store, no-cache, must-revalidate"))

  (defun @no-cache (route)
    (make-instance 'no-cache-route :target route))

Now you can use the decorator when defining a route:

.. code-block:: common-lisp

  (restas:define-route main ("" :decorators '(@no-cahe))
    "<h1>Hello world!</h1>")

It can also be applied to the whole module:

.. code-block:: common-lisp

  (restas:define-module #:restas.hello-world
    (:use :cl)
    (:decorators #'restas:@no-caсhe))

Or even when mounting a submodule:

.. code-block:: common-lisp

  (restas:mount-submodule test-hello-world (#:hello-world restas:@no-caсhe))

All routes, which are defined through :macro:`restas:define-route`,
are passed through a series of decorators before being placed in the
dispatch tree.  The decorators listed in :macro:`restas:define-route`
are applied first, then the decorators listed in
:macro:`restas:define-module`, and finally the decorators listed in
:macro:`restas:mount-submodule`.  Thus, a chain of nested proxy
objects is inserted into the dispatch tree instead of the original
:class:`restas:route` object.

To define a new decorator, you need to define a new class that
inherits from :class:`routes:proxy-route`, then define a function to
create an object of this class from the original route, and define the
specialized methods on the following generic functions:

* :fun:`routes:route-check-conditions` (route bindings) -
  called when the route template URL matches the request URL, allowing
  you to define additional restrictions.  If this function returns :hs:`T`, the route is
  considered to satisfy the request; in case of :hs:`NIL` the route is discarded and
  the system moves on to try the next route.

* :fun:`restas:process-route` (route bindings) -
  called for actual request handling.

Below is an example of using a decorator for HTTP authentication when browsing
a directory published via `restas-directory-publisher`_.

.. code-block:: common-lisp

  (defclass http-auth-route (routes:proxy-route) ())

  (defmethod routes:route-check-conditions ((route http-auth-route) bindings)
    (and (call-next-method)
         (multiple-value-bind (user password) (hunchentoot:authorization)
           (or (and (string= user "hello")
                    (string= password "world"))
               (hunchentoot:require-authorization)))))

  (defun @http-auth-require (route)
    (make-instance 'http-auth-route :target route))

  (restas:mount-submodule -tmp- (#:restas.directory-publisher @http-auth-require)
    (restas.directory-publisher:*baseurl* '("tmp"))
    (restas.directory-publisher:*directory* #P"/tmp/")
    (restas.directory-publisher:*autoindex* t))

.. _WSGI: http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
.. _RESTAS: http://restas.lisper.ru/
.. _restas-directory-publisher: http://github.com/archimag/restas-directory-publisher
