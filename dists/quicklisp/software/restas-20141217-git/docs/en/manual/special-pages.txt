.. -*- RST -*-

.. _manual-special-pages:

Special pages
=============

If the route handler returns an integer, the return value is
interpreted as an HTTP status code, and the corresponding response
page (ex - 404 not found) is sent to the user. By default the pages
returned are the `Hunchentoot`_ standard ones. This behavior can be
changed by defining a method on the :fun:`restas:render-object`
generic function. For example:

.. code-block:: common-lisp

  (defmethod restas:render-object ((designer mydrawer) (code (eql hunchentoot:+http-internal-server-error+)))
    (setf (hunchentoot:content-type*)
          "text/plain")
    "Oh, all very bad")

In this case, it may happen that if the handler of route returns
:var:`hunchentoot:+http-not-found+` then the client will receive a
customized "Not Found" message, but if RESTAS does not find a suitable
route, then it sends the standard `Hunchentoot`_ 404 page. To solve
this problem you can define a "universal" route, which will be checked
last after all other routes.

.. code-block:: common-lisp

  (restas:define-route not-found ("*any")
    hunchentoot:+http-not-found+)

The described approach is well suited for handling specific pages on a module level.
But sometimes you need a particular solution. For example, the Web server can
interact with AJAX code, and in case of error should return
:var:`hunchentoot:+http-internal-server-error+`, describing the type of error in the
response body. :fun:`restas:abort-route-handler` can be used to implement this.
For example

.. code-block:: common-lisp

  (restas:abort-route-handler "data invalid"
                              :return-code hunchentoot:+http-internal-server-error+
                              :content-type "text/plain")

sends a response with HTTP status 500 and message "data invalid" to the client.

.. _Hunchentoot: http://www.weitz.de/hunchentoot/
