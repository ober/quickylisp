.. _manual-slime:

SLIME
=====

M-C-x vs C-c C-c
----------------

Powerful support for interactive development is one of the strengths of Common Lisp.
`RESTAS`_ aspires to provide corresponding abilities in the web development
domain. This possibility is provided by :fun:`restas:reconnect-all-routes`
function reinitializing the request dispatcher. The definitions of submodules
(:macro:`restas:mount-submodule`) and routes (:macro:`restas:define-route`) can
be re-evaluated at any moment and any introduced changes will immediately
affect the work of active RESTAS applications. Among other things, these macros
include the following code:

.. code-block:: common-lisp

  (eval-when (:execute)
    (reconnect-all-routes))

That is, for changes to take effect, these macros must be executed,
and not just loaded or compiled. When using `SLIME`_ it is done by using
C-M-x command (slime-eval-defun) instead of usual C-c C-c (slime-compile-defun).
However, if only the body of route (defined with macro
:macro:`restas:define-route`) has changed then for activation of the changes
just C-c C-c compiling is enough, and it is indeed recommended do it in such way,
because compilation, contrary to execution, lets you save information about
the position of the route in the source code (technically it is caused by
route definition creating a function with the same name), and this can
be very useful for working with site map (see later).

SLIME-ARCHIMAG
--------------

When using `SLIME-ARCHIMAG`_ commands *M-x restas-inspect-module* and
*M-x restas-inspect-vhost-list* become available in Emacs. They are implemented
on the basis of standard SLIME INSPECTOR (object inspector).

Module inspector
++++++++++++++++

It is activated by call to *M-x restas-inspect-module* and when you use it, it
is important of specify the module's name (name of the corresponding package).

.. image:: module-inspector.png
   :alt: module inspector

The inspector appears and shows you the following:

* Initialization and finalization functions of module. You can open their 
  definitions by placing cursor to the show function and pressing "."
  (slime-inspector-show-source command), this is `SLIME`_ standard ability.

* The list of routes defined by the module. Enter or Space will open more
  detailed information about a route. And "." will show its definition in the
  source code.

* The list of module submodules. Enter or Space will open submodule inspector.

Host inspector
++++++++++++++

*M-x restas-inspect-vhost-list* command shows the list of active virtual
hosts.

.. image:: vhosts-inspector.png
   :alt: vhosts inspector

After selecting needed vhost you get access to the "site map" and the list of
submodules which were connected to vhost at the site start time by function
:fun:`restas:start`.

.. image:: vhost-inspector.png
   :alt: vhosts inspector

Site map
++++++++

.. image:: site-map-inspector.png
   :alt: site map inspector

Site map inspector lets you visually examine the tree of routes. The variables
of templates are highlighted and shown with prefixes $ and * (for wildcard variables).
Each variable can also be examined, for example, for seeing which function
parses a variable. At the end of each leaf of this tree a route object is
placed and if you press "." you will go to the place of route definition, and if
you hit Enter this will let you examine it in more detail (which HTTP method
it processes, which checks are made for it and so on). Therefore this functionality
lets you study and better understand how the processing of requests proceeds
and also it can be used for a simple web application oriented code navigation.

Submodule inspector
+++++++++++++++++++

.. image:: submodule-inspector.png
   :alt: submodule inspector

Submodule inspector does look like the module inspector, but it also contains the
Context section, where variables bound during submodule activation with
:macro:`restas:mount-submodule` are shown.

.. image:: planet-submodule-inspector.png
   :alt: planet submodule inspector

**"Use this context as global"** command makes it global (by direct assigning values
to corresponding variables), this can become very handy for debugging a web application
in REPL. After doing so you can return to original state with command
**"Restore global context"**.

.. _RESTAS: http://restas.lisper.ru/
.. _SLIME-ARCHIMAG: http://github.com/archimag/slime-archimag
.. _SLIME: http://common-lisp.net/project/slime/

