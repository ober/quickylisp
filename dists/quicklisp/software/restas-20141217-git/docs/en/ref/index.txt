.. -*- RST -*-

.. _api-reference:

=============
API Reference
=============

.. defun:: restas:start
  :args: module &key hostname (port 80) (context (make-context)) acceptor-class ssl-certificate-file ssl-privatekey-file ssl-privatekey-password

  Launches a module for processing HTTP requests. `RESTAS`_ supports
  the concept of `virtual hosts <http://httpd.apache.org/docs/current/vhosts/>`_
  and permits placing several sites with different domain names in the context
  of one process. Serving content on several ports is also possible.

  **Parameters**:

  * module - `package designator`_, identifying module defined with
    aid of :macro:`restas:define-module`

  * hostname - the host name for request processing

  * port - port for accepting requests

  * context - environment analogous to specified with :macro:`restas:mount-module`,
    permits customizing module parameters.

  * acceptor-class - determines which class of acceptor objects is created  and
    should be (a symbol naming) a class which inherits from :class:`restas:restas-acceptor`
    or :class:`restas:restas-ssl-acceptor`.

  * ssl-certificate-file - path to SSL certificate file. Lispworks
    supports using one file containing the key and certificate, in
    which case the ssl-privatekey-file is not need.

  * ssl-privatekey-file - path to key file in PEM format.

  * ssl-privatekey-password - password (as string) for using key file (or NIL, the
    default, for no password).

  This function can be called more than once with different parameters. If different
  modules were launched for one and the same combination of host name and port number
  then route conflicts are possible, and, when they happen, the way request dispatch happens
  is undefined.

.. defun:: restas:reconnect-all-routes
  :args:

  Reinitialises request dispatcher. Usually there is no need to call
  this function directly, because during evaluation of
  :macro:`restas:mount-module` and :macro:`restas:define-route` it
  is called automatically.

Special variables
=================

.. defvar:: restas:*default-host-redirect*

  All requests to unregistered hosts will be redirected to this default host.

.. defvar:: restas:*bindings*

  The set of parsed variables of the route is stored here.

.. defvar:: restas:*module*

  Active module the current route being handled belongs to.

.. defvar:: restas:*route*
   :args: foo bar

  The current route being handled.

Routes
======

.. defmacro:: restas:define-route
  :args: name (template &key (method :get) content-type) &body body

  Creates new route in the current module

  * name - unique :hs:`symbol`, serving as route identifier. The same
    :hs:`symbol` cannot be used for different routes.

  * template - URL template for matching a route and a request on its basis.
    It can contain variables which will be directly available in the body of
    the route.

  * method - HTTP method to be handled, possible values are :GET :POST,
    :PUT, :DELETE.

  * content-type - result **Content-Type** HTTP header.

  * body - handler body can contain arbitrary code; its result is returned
    to the client (after processing it with :fun:`restas:render-object`).

  In the beginning of the route body can be used declarations that are
  special forms, starting with :hs:`keyword`:

  * :headers - *plist* with HTTP headers names and values. A union with :var:`*default-headers*` is used, with route option taking precedence.

  * :render-method - object, used by call to :fun:`restas:render-object` for processing of
    the result of route handler before serving it to client.

  * :apply-render-method - analogous to :render-method, but is called using
    :fun:`apply` and not :fun:`funcall`.

  * :requirement - arbitrary function called for checking whether a route and a request match
    each other. If result is :hs:`NIL` then route is regarded as not satisfying the request.

  * :sift-variables - the list of the lists that consist of the
    variable name and `data-sift`_ parsing rule (e.g. function).

  * :decorators - list of decorators. See :ref:`manual-decorators`.

  * :additional-variables - declaration with an effect of
    :macro:`let`, adding to the function :hs:`keyword` parameters to
    simplify REPL experiments with it.

  Example of definition of a trivial route:

  .. code-block:: common-lisp

    (restas:define-route main ("")
      "<h1>Hello world!</h1>")

  For more details about route definition, see :ref:`manual-routes`

.. defun:: restas:route-symbol
  :args: route

  Returns :hs:`symbol`, bound to route object (for example, during request
  processing such object is bound to :var:`restas:*route*`).

.. defun:: restas:genurl
  :args: route-symbol &rest args

  Computes URL of the route on the basis of identifying :hs:`symbol` and the
  set of values of variables of its URL template (see :macro:`restas:define-route`)

  * route-symbol - route identifier

  * args - sequence (in the *plist* format) of route variable names and their values.

  Example:

  .. code-block:: common-lisp

    (restas:genurl 'my-route
                   :arg1 "foo"
                   :arg2 "bar")

.. defun:: restas:genurl*
  :args: route &rest args

  This function is analogous to :fun:`restas:genurl` except that the generated URL
  also includes the host name.

.. defun:: restas:redirect
  :args: route-symbol &rest args

  Redirects the request with :fun:`hunchentoot:redirect` for URL computed with
  :fun:`restas:genurl`. The parameters are analogous to those of function :fun:`restas:genurl`.

.. defun:: restas:abort-route-handler
   :args: obj &key return-code content-typÐµ

   Immediately abort handling the route and pass *OBJ* to :fun:`restas:render-object`
   to render a response. If the keyword argument *RETURN-CODE* is specified
   then it used to set the HTTP response status to allow you to return a special
   page (500, 404, etc.) with arbitrary content (by default these pages are formed in
   a uniform way, regardless of the result returned by the handler).

Modules
=======

.. defmacro:: restas:define-module
  :args: name &rest options

  Initializes a new module, creates new :hs:`package`, adds certain service variables to it, and conducts its initialization.

.. defun:: restas:initialize-module-instance
  :args: (module context) 

  It is a generic function that calling  when the module is mounted with :macro:`restas:mount-module`
  and can be used, for example, for additional adjustment of submodule context.
  It should be placed in the package, defined with aid of :macro:`restas:define-module`.

.. defun:: restas:finalize-module-instance
  :args: (module context)

  Is is a generic function that called at the repeated evaluation of :macro:`restas:mount-module`
  and can be used e.g. for freeing resources allocated at submodule initialization.

Submodules
==========

.. defmacro:: restas:mount-module
  :args: name (module &rest decorators) &rest bindings

  Defines a submodule.

  * name - identifyer (:hs:`symbol`) of a submodule.

  * module - `package designator`_  of the mounted module.

  * decorators - list of decorators. See :ref:`manual-decorators`.

  * bindings - the set of variables and their values defining the context of
    submodule. The processing of routes from this submodule will be conducted
    in this context by using :hs:`progv`.

  Example:

  .. code-block:: common-lisp

    (restas:mount-module tmp (#:restas.directory-publisher)
      (restas.directory-publisher:*baseurl* '("tmp"))
      (restas.directory-publisher:*directory* #P"/tmp/"))

.. defmacro:: restas:with-module
  :args: module &body body

  Lets you execute an arbitrary code at the context of the specified module.

View
====

.. defun:: restas:render-object
  :args: drawer object

  Generic method used for processing the data returned by the route handler
  (specified in the body of :macro:`restas:define-route`). If you didn't specify
  :render-method parameter for :macro:`restas:define-route` macro then the value of
  :var:`*default-render-method*` from the module where the current route being handled was
  defined (It is automatically created at module definition time by macro 
  :macro:`restas:define-module` and its value is :hs:`NIL`) is used.

  For more detailed description see the section :ref:`manual-view`.


Context
=======

To provide modularity RESTAS uses a mechanism similar to Buffer-Local Variables`_
in `GNU Emacs`_.

.. defmacro:: restas:make-context
  :args: &body bindings

  Creates dynamic context bindings of dynamic variables to their values.
  Example:

  .. code-block:: common-lisp

    (restas:make-context (restas.directory-publisher:*baseurl* '("tmp"))
                         (restas.directory-publisher:*directory* #P"/tmp/")
                         (restas.directory-publisher:*autoindex* t))

.. defun:: restas:context-add-variable
  :args: context symbol &optional value

  Adds a new variable to the context.

  * context - contex
  * symbol - :hs:`symbol`, associated to dynamic variable.
  * value - value of the variable. If unspecified, then the result of a
    call to :hs:`symbol-value` is used.

.. defun:: restas:context-remove-variable
  :args: context symbol

  Removes the variable from the context.

.. defun:: restas:context-symbol-value
  :args: context symbol => value, present-p

  Return the *value* of a dynamic variable. If the variable is undefined in the context,
  then for evaluating its value :hs:`symbol-value` is used and present-p is equal to
  :hs:`NIL`.

.. defmacro:: restas:with-context
  :args: context &body body

  Executes the code in the given context with :hs:`progv`.

Debugging
=========

.. defun:: restas:debug-mode-on
  :args:

  Sets up the debug mode.

.. defun:: restas:debug-mode-off
  :args:

  Cancels debug mode.

.. defvar:: restas:*max-debugging-threads*

  Maximal number of simultaneously debugged threads.

.. _RESTAS: http://restas.lisper.ru/
.. _data-sift: http://github.com/archimag/data-sift
.. _garbage-pools: http://github.com/archimag/garbage-pools
.. _package designator: http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_p.htm#package_designator
.. _Buffer-Local Variables: http://www.gnu.org/software/emacs/elisp/html_node/Intro-to-Buffer_002dLocal.html
.. _GNU Emacs: http://www.gnu.org/software/emacs/
