(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("COMMON-LISP-USER" si::select-package)) #1=#P"/Users/akkad/quicklisp/asdf.lisp" 0) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 11 3 16 4 76 73 39 10 14 3 14 5 15 6 19 3 7 29) #A(t (8) (:asdf-unicode *features* adjoin :asdf find-package :use (:common-lisp) make-package)) #1# 2393) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("ASDF" si::select-package)) #1# 4016) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 19 0 0 76 39 6 14 7 19 1 8 1 9 16 10 1 9 16 11 76 39 4 75 52 9 1 12 16 10 1 12 16 11 76 39 4 75 52 12 1 13 16 10 1 13 16 11 76 39 4 75 52 13 15 14 1 19 12 19 2 6 15 20 1 24 12 19 2 6 15 25 1 32 12 14 4 9 2 19 4 6 1 33 45 34 15 35 77 19 2 36 45 37 11 9 45 38 13 2 10 0 17 39 45 40 10 2 39 3 10 0 76 73 39 84 10 2 39 3 11 13 39 12 14 41 15 42 13 1 13 3 19 4 30 31 12 46 53 61 74 76 80 88 90 103 106 124 128 15 129 14 71 77 14 72 15 130 14 131 15 132 14 133 77 14 134 15 135 14 136 15 137 32 0 18 13 10 15 52 9 10 13 39 8 13 13 11 12 3 38 3 11 12 52 12 73 43 12 43 4 29) #2=#A(t (138) (asdf::use-ecl-byte-compiler-p :ecl-bytecmp *features* member t #Y(asdf::use-ecl-byte-compiler-p nil nil (26 14 1 14 2 19 2 3 73 39 4 11 4 73 29) #2# #1# 4036) si::fset :cmp require asdf::*asdf-version* si::*make-special boundp asdf::*upgraded-p* asdf::*asdf-verbose* asdf::find-symbol* asdf::s asdf::p string find-symbol #Y(asdf::find-symbol* nil nil (24 45 15 24 45 16 26 10 1 16 17 12 13 0 19 2 18 29) #2# #1# 4036) asdf::strcat asdf::strings concatenate apply #Y(asdf::strcat nil nil (27 45 21 15 22 15 17 13 0 19 3 23 29) #2# #1# 4036) asdf::compatfmt #:g220 #:g219 #:g221 si::dm-too-few-arguments format si::dm-too-many-arguments #Y(asdf::compatfmt nil nil (24 45 26 24 45 27 26 10 1 5 45 28 10 0 76 39 6 13 2 19 1 29 10 0 4 12 10 0 5 51 0 22 45 30 10 1 39 6 13 3 19 1 31 10 0 10 0 73 29) #2# #1# 4036) "2.26" asdf::asdf-version asdf::component find-class asdf::existing-asdf asdf::existing-version equal asdf::already-there *trace-output* "~&~@<; ~@;Upgrading ASDF ~@[from version ~A ~]to version ~A~@:>~%" symbol package (:internal :external) #Y(asdf::present-symbol-p nil nil (24 45 43 24 45 44 26 9 1 13 1 13 0 19 2 14 74 12 15 45 19 2 3 29) #2# #1# 4036) asdf::l (:inherited :internal :external) si::packages-iterator #:g225 #:g226 reverse #Y(asdf::present-symbols nil nil (24 45 44 26 75 45 47 58 60 62 13 2 15 48 14 4 19 3 49 45 50 75 45 51 75 45 15 38 37 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 5 32 17 18 2 39 8 13 0 10 4 3 51 4 75 39 -38 43 3 63 10 0 16 52 43 1 29) #2# #1# 4036) find-package asdf::u package-used-by-list #:loop-list229 0 unuse-package delete-package #Y(asdf::unlink-package nil nil (24 45 44 26 10 0 16 54 45 55 10 0 73 39 65 13 0 13 0 32 12 18 1 12 32 7 18 2 77 10 0 16 56 12 46 57 46 16 57 58 61 2 2 29 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 3 13 1 19 2 59 35 0 0 62 43 2 10 0 16 60 43 1 29) #2# #1# 4036) asdf::name asdf::nicknames asdf::use mapcar :from-end remove-duplicates asdf::previous map rename-package :nicknames :use make-package #Y(asdf::ensure-exists nil nil (24 45 62 24 45 63 24 45 64 26 33 54 12 13 2 10 1 3 12 19 2 65 12 14 66 14 4 19 3 67 45 68 77 32 13 12 10 0 5 12 19 3 69 10 0 4 45 16 10 0 39 23 13 0 13 4 13 3 19 3 70 13 0 13 2 32 8 18 2 10 0 73 38 14 13 4 14 71 13 3 14 72 13 2 19 5 73 43 1 43 1 29) #2# #1# 4036) intern #Y(asdf::intern* nil nil (24 45 43 24 45 44 26 10 1 16 17 12 13 0 19 2 75 29) #2# #1# 4036) asdf::sym unexport unintern #Y(asdf::remove-symbol nil nil (24 45 43 24 45 44 26 13 1 13 0 19 2 14 45 77 10 0 73 39 18 13 0 13 1 19 2 78 13 0 13 1 19 2 79 10 0 73 43 1 29) #2# #1# 4036) asdf::symbols list-all-packages asdf::packages #:loop-list233 asdf::removed #:loop-list235 eq #Y(asdf::ensure-unintern nil nil (24 45 44 24 45 81 26 19 0 82 45 83 77 13 1 46 84 46 77 75 45 85 57 58 61 2 2 93 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 6 32 13 18 2 51 1 10 1 39 58 77 13 4 46 86 46 16 57 58 61 2 2 42 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 4 13 5 13 1 19 2 14 17 87 39 8 13 4 13 1 19 2 79 35 0 0 62 43 2 35 0 0 62 73 43 1 43 2 43 1 29) #2# #1# 4036) shadow #Y(asdf::ensure-shadow nil nil (24 45 44 24 45 81 26 13 0 13 1 19 2 89 29) #2# #1# 4036) package-use-list si::%dolist-var asdf::used package-name :test string= (:external) #:g246 #:g247 #:g250 #:g251 use-package #Y(asdf::ensure-use nil nil (24 45 44 24 45 64 26 10 1 16 91 45 92 75 45 93 38 101 10 1 4 51 0 10 0 16 94 12 13 2 14 95 15 96 19 4 3 76 39 74 13 0 19 1 59 58 60 66 13 1 15 97 14 4 19 3 49 45 98 75 45 99 75 45 77 38 41 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 0 13 7 19 2 14 17 87 39 9 13 0 13 7 32 14 18 2 75 39 -42 43 3 63 10 1 5 51 1 10 1 40 -103 43 2 10 0 16 52 45 92 75 45 93 38 87 10 1 4 51 0 58 60 67 13 1 15 97 14 4 19 3 49 45 100 75 45 101 75 45 77 38 42 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 0 13 7 19 2 14 17 87 76 39 9 13 0 13 7 32 14 18 2 75 39 -43 43 3 63 13 0 13 3 19 2 102 10 1 5 51 1 10 1 40 -89 75 73 43 2 29) #2# #1# 4036) #:loop-list253 fmakunbound #Y(asdf::ensure-fmakunbound nil nil (24 45 44 24 45 81 26 77 13 0 46 104 46 62 75 45 77 57 58 61 2 2 39 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 5 19 2 14 51 1 10 1 39 5 10 1 16 105 35 0 0 62 73 43 1 43 2 29) #2# #1# 4036) export asdf::newly-exported-symbols asdf::bothly-exported-symbols asdf::formerly-exported-symbols #:g265 #:g266 string-equal #:loop-list269 #:loop-list272 asdf::user asdf::shadowing package-shadowing-symbols #:loop-list274 asdf::new asdf::old #:loop-list275 asdf::x #Y(asdf::ensure-export nil nil (24 45 44 24 45 107 26 77 77 77 46 108 46 109 46 110 58 60 74 13 5 15 97 14 4 19 3 49 45 111 75 45 112 75 45 77 38 49 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 7 14 95 15 113 19 4 3 39 10 13 0 10 5 3 51 5 38 8 13 0 10 4 3 51 4 75 39 -50 43 3 63 77 13 3 46 114 46 77 57 58 61 2 2 43 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 13 4 14 95 15 39 19 4 3 76 39 8 13 1 10 5 3 51 5 35 0 0 62 43 2 77 10 4 16 56 12 46 115 46 116 75 45 117 57 58 61 2 2 100 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 16 118 51 1 77 13 6 46 119 46 120 75 45 121 57 58 61 2 2 52 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 6 19 2 14 51 1 10 1 39 9 13 1 13 5 19 2 3 76 39 8 13 1 13 6 19 2 79 35 0 0 62 43 1 43 2 35 0 0 62 43 1 43 2 77 13 2 46 122 46 123 57 58 61 2 2 34 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 13 7 32 15 18 2 12 19 1 107 35 0 0 62 73 43 2 43 3 29) #2# #1# 4036) (nil :redefined-functions :export :shadow :unintern :use :nicknames) asdf::redefined-functions append #Y(asdf::ensure-package nil nil (24 45 62 28 125 22 40 2 77 46 63 22 40 2 77 46 64 22 40 2 77 46 79 22 40 2 77 46 89 22 40 2 77 46 107 22 40 2 77 46 126 13 6 13 5 13 4 32 15 18 3 45 16 13 0 13 4 19 1 127 12 32 13 18 2 13 0 13 3 32 12 18 2 13 0 13 2 32 9 18 2 13 0 13 1 32 10 18 2 10 0 73 43 1 29) #2# #1# 4036) :asdf (:common-lisp) :export (#:defsystem #:oos #:operate #:find-system #:locate-system #:run-shell-command #:system-definition-pathname #:with-system-definitions #:search-for-system-definition #:find-component #:component-find-path #:compile-system #:load-system #:load-systems #:require-system #:test-system #:clear-system #:operation #:compile-op #:load-op #:load-source-op #:test-op #:feature #:version #:version-satisfies #:upgrade-asdf #:implementation-identifier #:implementation-type #:hostname #:input-files #:output-files #:output-file #:perform #:operation-done-p #:explain #:component #:source-file #:c-source-file #:cl-source-file #:java-source-file #:cl-source-file.cl #:cl-source-file.lsp #:static-file #:doc-file #:html-file #:text-file #:source-file-type #:module #:system #:unix-dso #:module-components #:module-components-by-name #:component-pathname #:component-relative-pathname #:component-name #:component-version #:component-parent #:component-property #:component-system #:component-depends-on #:component-encoding #:component-external-format #:system-description #:system-long-description #:system-author #:system-maintainer #:system-license #:system-licence #:system-source-file #:system-source-directory #:system-relative-pathname #:map-systems #:operation-description #:operation-on-warnings #:operation-on-failure #:component-visited-p #:*system-definition-search-functions* #:*central-registry* #:*compile-file-warnings-behaviour* #:*compile-file-failure-behaviour* #:*resolve-symlinks* #:*load-system-operation* #:*asdf-verbose* #:*verbose-out* #:asdf-version #:operation-error #:compile-failed #:compile-warned #:compile-error #:error-name #:error-pathname #:load-system-definition-error #:error-component #:error-operation #:system-definition-error #:missing-component #:missing-component-of-version #:missing-dependency #:missing-dependency-of-version #:circular-dependency #:duplicate-names #:try-recompiling #:retry #:accept #:coerce-entry-to-directory #:remove-entry-from-registry #:*encoding-detection-hook* #:*encoding-external-format-hook* #:*default-encoding* #:*utf-8-external-format* #:clear-configuration #:*output-translations-parameter* #:initialize-output-translations #:disable-output-translations #:clear-output-translations #:ensure-output-translations #:apply-output-translations #:compile-file* #:compile-file-pathname* #:enable-asdf-binary-locations-compatibility #:*default-source-registries* #:*source-registry-parameter* #:initialize-source-registry #:compute-source-registry #:clear-source-registry #:ensure-source-registry #:process-source-registry #:system-registered-p #:registered-systems #:loaded-systems #:resolve-location #:asdf-message #:user-output-translations-pathname #:system-output-translations-pathname #:user-output-translations-directory-pathname #:system-output-translations-directory-pathname #:user-source-registry #:system-source-registry #:user-source-registry-directory #:system-source-registry-directory) :shadow :unintern (#:*asdf-revision* #:around #:asdf-method-combination #:split #:make-collector #:do-dep #:do-one-dep #:resolve-relative-location-component #:resolve-absolute-location-component #:output-files-for-system-and-operation) :redefined-functions (#:perform #:explain #:output-files #:operation-done-p #:perform-with-restarts #:component-relative-pathname #:system-source-file #:operate #:find-component #:find-system #:apply-output-translations #:translate-pathname* #:resolve-location #:system-relative-pathname #:inherit-source-registry #:process-source-registry #:process-source-registry-directive #:compile-file* #:source-file-type))) #1# 4036) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*resolve-symlinks* si::*make-special boundp t variable "Determine whether or not ASDF resolves symlinks when defining systems.

Defaults to T." si::set-documentation)) #1# 18256) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*compile-file-warnings-behaviour* si::*make-special boundp :warn variable "How should ASDF react if it encounters a warning when compiling a file?
Valid values are :error, :warn, and :ignore." si::set-documentation)) #1# 18491) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*compile-file-failure-behaviour* si::*make-special boundp :warn variable "How should ASDF react if it encounters a failure (per the ANSI spec of COMPILE-FILE)
when compiling a file?  Valid values are :error, :warn, and :ignore.
Note that ASDF ALWAYS raises an error if it fails to create an output file when compiling." si::set-documentation)) #1# 18685) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*verbose-out* si::*make-special boundp)) #1# 19020) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::+asdf-methods+ si::*make-special (asdf::perform-with-restarts asdf::perform asdf::explain asdf::output-files asdf::operation-done-p))) #1# 19048) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*load-system-operation* si::*make-special boundp asdf::load-op variable "Operation used by ASDF:LOAD-SYSTEM. By default, ASDF:LOAD-OP.
You may override it with e.g. ASDF:LOAD-FASL-OP from asdf-bundle,
or ASDF:LOAD-SOURCE-OP if your fasl loading is somehow broken." si::set-documentation)) #1# 19152) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*compile-op-compile-file-function* si::*make-special boundp asdf::compile-file* variable "Function used to compile lisp files." si::set-documentation)) #1# 19390) #Y(si::bytecodes nil nil (33 0 12 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t) t) asdf::format-arguments asdf::format-control asdf::error-name asdf::error-pathname asdf::error-condition asdf::duplicate-names-name asdf::error-component asdf::error-operation asdf::module-components asdf::module-components-by-name asdf::circular-dependency-components asdf::condition-arguments asdf::condition-form asdf::condition-format asdf::condition-location asdf::coerce-name) (ftype (function (&optional t) (values)) asdf::initialize-source-registry) (ftype (function (t t) t) (setf asdf::module-components-by-name))) mapcar)) #1# 19491) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 20593) #Y(si::bytecodes nil nil (15 0 34 15 12 14 16 9 3 19 4 17 15 18 34 23 12 14 16 9 3 19 4 17 1 18 73 29) #3=#A(t (24) (asdf::defgeneric* #:g291 #:g290 #:g292 si::dm-too-few-arguments asdf::name asdf::formals rest progn fmakunbound quote symbolp declaim notinline defgeneric #Y(asdf::defgeneric* nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 45 7 15 8 15 9 15 10 10 2 6 2 6 2 12 10 2 16 11 73 39 12 15 12 15 13 10 2 6 2 6 2 73 12 15 14 13 2 13 1 10 0 7 4 6 4 73 29) #3# #1# 22121) t si::fset asdf::defun* #:g294 #:g293 #:g295 defun #Y(asdf::defun* nil nil (24 45 19 24 45 20 26 10 1 5 45 21 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 45 7 15 8 15 9 15 10 10 2 6 2 6 2 12 10 2 16 11 73 39 12 15 12 15 13 10 2 6 2 6 2 73 12 15 22 13 2 13 1 10 0 7 4 6 4 73 29) #3# #1# 22121))) #1# 22121) #Y(si::bytecodes nil nil (15 0 1 30 12 14 31 9 2 19 4 32 15 0 15 33 15 34 19 3 35 1 0 73 29) #4=#A(t (36) (asdf::while-collecting #:g297 #:g296 #:g298 si::dm-too-few-arguments #:g299 #:g300 asdf::collectors asdf::body asdf::x symbol-name gensym #Y(nil nil nil (24 45 9 26 10 0 16 10 12 19 1 11 29) #4# #1# 22725) mapcar constantly asdf::initial-values asdf::vars let list flet asdf::c asdf::v (asdf::x) push (values) #Y(nil nil nil (24 45 20 24 45 21 26 13 1 15 22 15 23 15 9 10 0 6 3 12 1 24 6 4 73 29) #4# #1# 22725) values reverse #Y(nil nil nil (24 45 21 26 15 27 10 0 6 2 73 29) #4# #1# 22725) append #Y(asdf::while-collecting nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 45 7 10 3 45 8 34 12 12 13 1 19 2 13 12 75 16 14 12 13 1 19 2 13 12 46 15 46 16 15 17 33 18 12 13 0 13 1 19 3 13 12 15 19 34 25 12 13 3 13 0 19 3 13 12 13 2 15 26 34 28 12 13 0 19 2 13 7 2 6 1 12 19 2 29 7 3 6 3 73 43 2 29) #4# #1# 22725) t si::fset function "COLLECTORS should be a list of names for collections.  A collector
defines a function that, when applied to an argument inside BODY, will
add its argument to the corresponding collection.  Returns multiple values,
a list for each collection, in order.
   E.g.,
(while-collecting (foo bar)
           (dolist (x '((a 1) (b 2) (c 3)))
             (foo (first x))
             (bar (second x))))
Returns two values: (A B C) and (1 2 3)." si::set-documentation)) #1# 22725) #Y(si::bytecodes nil nil (15 0 1 12 12 14 13 9 4 19 4 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #5=#A(t (18) (asdf::aif #:g302 #:g301 #:g303 si::dm-too-few-arguments asdf::test asdf::then asdf::else si::dm-too-many-arguments let asdf::it if #Y(asdf::aif nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 13 10 2 4 12 10 2 5 51 2 22 38 2 75 45 7 10 3 39 6 13 5 19 1 8 15 9 15 10 10 2 6 2 6 1 12 15 11 15 10 13 1 10 0 6 4 6 3 73 29) #5# #1# 23607) t si::fset function "Anaphoric version of IF, On Lisp style" si::set-documentation)) #1# 23607) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #6=#A(t (15) (asdf::pathname-directory-pathname fmakunbound (notinline asdf::pathname-directory-pathname) proclaim pathname :name :type :version :defaults make-pathname #Y(asdf::pathname-directory-pathname nil nil (24 45 4 26 10 0 73 39 17 14 5 77 14 6 77 14 7 77 14 8 13 0 19 8 9 29) #6# #1# 23735) si::fset function "Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,
and NIL NAME, TYPE and VERSION components" si::set-documentation)) #1# 23735) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #7=#A(t (17) (asdf::normalize-pathname-directory-component fmakunbound (notinline asdf::normalize-pathname-directory-component) proclaim directory stringp :absolute consp (:absolute :relative) member "~@<Unrecognized pathname directory component ~S~@:>" error #Y(asdf::normalize-pathname-directory-component nil nil (24 45 4 26 10 0 16 5 39 12 14 6 10 0 6 2 10 0 73 38 35 10 0 76 40 16 10 0 16 7 39 10 10 0 4 12 15 8 19 2 9 39 6 10 0 73 38 8 15 10 13 0 19 2 11 29) #7# #1# 23990) si::fset function "Given a pathname directory component, return an equivalent form that is a list" si::set-documentation)) #1# 23990) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 26 12 19 2 27 1 0 73 29) #8=#A(t (28) (asdf::merge-pathname-directory-components fmakunbound (notinline asdf::merge-pathname-directory-components) proclaim asdf::specified asdf::defaults asdf::normalize-pathname-directory-component directory #:g307 nil :absolute :relative asdf::reldir asdf::defdir :back eq append asdf::defabs reverse asdf::defrev 0 stringp #:g308 #:g309 (nil :absolute :relative) si::ecase-error #Y(asdf::merge-pathname-directory-components nil nil (24 45 4 24 45 5 26 13 1 19 1 6 45 7 10 0 4 45 8 10 0 42 9 6 10 2 73 38 181 42 10 6 10 3 73 38 173 42 11 164 13 2 19 1 6 12 10 1 5 12 46 12 46 13 10 0 76 39 6 10 3 73 38 136 14 14 10 1 4 17 15 76 39 10 13 0 13 1 19 2 16 38 117 58 60 114 10 1 4 45 17 10 2 5 16 18 45 19 57 20 61 2 2 73 14 14 10 5 4 17 15 39 19 14 10 10 2 17 15 39 4 10 1 76 40 6 10 1 4 16 21 76 39 4 35 0 1 10 5 45 22 10 0 4 10 0 5 51 0 10 0 51 6 43 1 10 1 45 23 10 0 4 10 0 5 51 0 10 0 51 2 43 1 35 0 0 13 2 10 1 16 18 12 13 5 19 2 16 3 73 36 3 62 73 43 1 43 1 63 43 2 38 7 13 0 1 24 17 25 43 1 43 1 29) #8# #1# 24613) si::fset)) #1# 24613) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #9=#A(t (13) (asdf::make-pathname-component-logical fmakunbound (notinline asdf::make-pathname-component-logical) proclaim asdf::x #:g311 (eql :unspecific) typep #Y(asdf::make-pathname-component-logical nil nil (24 45 4 26 10 0 45 5 13 0 15 6 19 2 7 39 5 75 73 38 4 10 1 73 43 1 29) #9# #1# 25594) si::fset function "Make a pathname component suitable for use in a logical-pathname" si::set-documentation)) #1# 25594) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 17 12 19 2 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #10=#A(t (22) (asdf::make-pathname-logical fmakunbound (notinline asdf::make-pathname-logical) proclaim pathname asdf::host :host :directory pathname-directory asdf::make-pathname-component-logical :name pathname-name :type pathname-type :version pathname-version make-pathname #Y(asdf::make-pathname-logical nil nil (24 45 4 24 45 5 26 14 6 13 0 14 7 13 1 19 1 8 12 19 1 9 12 14 10 13 1 19 1 11 12 19 1 9 12 14 12 13 1 19 1 13 12 19 1 9 12 14 14 10 1 16 15 12 19 1 9 12 19 10 16 29) #10# #1# 25864) si::fset function "Take a PATHNAME's directory, name, type and version components,
and make a new pathname with corresponding components and specified logical HOST" si::set-documentation)) #1# 25864) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 42 12 19 2 43 15 0 15 44 15 45 19 3 46 1 0 73 29) #11=#A(t (47) (asdf::merge-pathnames* fmakunbound (notinline asdf::merge-pathnames*) proclaim asdf::specified *default-pathname-defaults* asdf::defaults pathname pathname-directory asdf::normalize-pathname-directory-component directory pathname-name asdf::name pathname-type type pathname-version asdf::version asdf::p logical-pathname typep asdf::make-pathname-component-logical identity #Y(asdf::unspecific-handler nil nil (24 45 17 26 13 0 15 18 19 2 19 39 6 33 20 73 38 4 33 21 73 29) #11# #1# 26381) #:g312 :absolute pathname-host pathname-device nil :relative asdf::merge-pathname-directory-components (:absolute :relative nil) si::ecase-error asdf::unspecific-handler asdf::device asdf::host :host :device :directory :name :type :version make-pathname #Y(asdf::merge-pathnames* nil nil (24 45 4 25 40 3 14 5 46 6 26 57 0 60 234 10 2 76 39 6 10 1 73 36 0 10 1 76 39 6 10 2 73 36 0 10 2 16 7 45 4 10 2 16 7 45 6 13 1 19 1 8 12 19 1 9 45 10 13 2 19 1 11 40 6 13 1 19 1 11 45 12 13 3 19 1 13 40 6 13 2 19 1 13 45 14 10 4 16 15 40 5 10 3 16 15 45 16 31 1 22 10 4 4 45 23 10 0 42 24 26 13 7 19 1 25 12 13 7 19 1 26 12 13 5 13 7 32 1 18 1 12 72 4 38 48 41 27 4 42 28 36 13 6 19 1 25 12 13 6 19 1 26 12 13 5 13 6 19 1 8 12 19 2 29 12 13 6 32 1 18 1 12 72 4 38 7 13 0 1 30 17 31 43 1 47 3 32 47 2 10 47 1 33 45 34 14 35 13 0 14 36 13 1 14 37 13 2 14 38 13 3 13 7 20 1 23 12 14 39 13 3 13 6 20 1 23 12 14 40 13 3 13 5 20 1 23 12 19 12 41 43 4 43 1 43 6 63 29) #11# #1# 26381) si::fset function "MERGE-PATHNAMES* is like MERGE-PATHNAMES except that
if the SPECIFIED pathname does not have an absolute directory,
then the HOST and DEVICE both come from the DEFAULTS, whereas
if the SPECIFIED pathname does have an absolute directory,
then the HOST and DEVICE both come from the SPECIFIED.
Also, if either argument is NIL, then the other argument is returned unmodified." si::set-documentation)) #1# 26381) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #12=#A(t (19) (asdf::pathname-parent-directory-pathname fmakunbound (notinline asdf::pathname-parent-directory-pathname) proclaim pathname :name :type :version :directory (:relative :back) pathname-directory asdf::merge-pathname-directory-components :defaults make-pathname #Y(asdf::pathname-parent-directory-pathname nil nil (24 45 4 26 10 0 73 39 31 14 5 77 14 6 77 14 7 77 14 8 15 9 13 0 19 1 10 12 19 2 11 12 14 12 13 0 19 10 13 29) #12# #1# 28427) si::fset function "Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,
and NIL NAME, TYPE and VERSION components" si::set-documentation)) #1# 28427) #Y(si::bytecodes nil nil (15 0 1 33 12 14 34 9 2 19 4 35 15 0 15 36 15 37 19 3 38 1 0 73 29) #13=#A(t (39) (asdf::appendf #:g313 si::env #:g314 si::dm-too-few-arguments si::%reference asdf::args get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v gensym #Y(nil nil nil (24 45 13 26 19 0 14 12 10 0 6 2 73 29) #13# #1# 28856) mapcar si::all-vars symbolp append car let* declare :read-only first subst si::let-list si::d listp the eq cadr nreverse #Y(asdf::appendf nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 13 1 13 3 19 2 7 47 4 8 47 3 9 47 2 10 47 1 11 45 12 34 15 12 10 5 7 1 12 19 2 16 45 17 10 5 16 18 39 51 15 19 13 5 33 20 12 13 0 19 2 16 7 3 12 10 3 4 12 15 21 13 0 15 22 14 23 33 24 12 13 0 19 2 16 7 2 6 2 12 10 4 6 4 12 19 3 25 38 151 13 1 13 2 77 46 26 46 13 46 27 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 10 10 16 28 39 9 10 10 4 12 1 29 17 30 39 20 15 29 10 10 16 31 12 15 19 13 8 10 9 7 3 6 3 38 15 15 19 13 8 33 20 12 13 3 19 2 16 7 3 6 2 12 13 3 13 2 19 2 19 7 2 51 2 15 21 10 2 16 32 12 15 22 14 23 33 24 12 13 3 19 2 16 12 13 4 19 2 19 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #13# #1# 28856) t si::fset function "Append onto list" si::set-documentation)) #1# 28856) #Y(si::bytecodes nil nil (15 0 1 34 12 14 35 9 2 19 4 36 15 0 15 37 15 38 19 3 39 1 0 73 29) #14=#A(t (40) (asdf::orf #:g315 si::env #:g316 si::dm-too-few-arguments si::%reference asdf::args get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v gensym #Y(nil nil nil (24 45 13 26 19 0 14 12 10 0 6 2 73 29) #14# #1# 28928) mapcar si::all-vars symbolp or car let* declare :read-only first subst si::let-list si::d listp the eq cadr append nreverse #Y(asdf::orf nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 13 1 13 3 19 2 7 47 4 8 47 3 9 47 2 10 47 1 11 45 12 34 15 12 10 5 7 1 12 19 2 16 45 17 10 5 16 18 39 51 15 19 13 5 33 20 12 13 0 19 2 16 7 3 12 10 3 4 12 15 21 13 0 15 22 14 23 33 24 12 13 0 19 2 16 7 2 6 2 12 10 4 6 4 12 19 3 25 38 151 13 1 13 2 77 46 26 46 13 46 27 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 10 10 16 28 39 9 10 10 4 12 1 29 17 30 39 20 15 29 10 10 16 31 12 15 19 13 8 10 9 7 3 6 3 38 15 15 19 13 8 33 20 12 13 3 19 2 16 7 3 6 2 12 13 3 13 2 19 2 32 7 2 51 2 15 21 10 2 16 33 12 15 22 14 23 33 24 12 13 3 19 2 16 12 13 4 19 2 32 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #14# #1# 28928) t si::fset function "or a flag" si::set-documentation)) #1# 28928) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #15=#A(t (11) (asdf::first-char fmakunbound (notinline asdf::first-char) proclaim asdf::s stringp length plusp char #Y(asdf::first-char nil nil (24 45 4 26 10 0 16 5 73 39 16 10 0 16 6 16 7 73 39 7 13 0 8 0 17 8 29) #15# #1# 29020) si::fset)) #1# 29020) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #16=#A(t (12) (asdf::last-char fmakunbound (notinline asdf::last-char) proclaim asdf::s stringp length plusp 1- char #Y(asdf::last-char nil nil (24 45 4 26 10 0 16 5 73 39 20 10 0 16 6 16 7 73 39 11 13 0 10 0 16 6 16 8 17 9 29) #16# #1# 29095) si::fset)) #1# 29095) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #17=#A(t (11) (asdf::asdf-message fmakunbound (notinline asdf::asdf-message) proclaim asdf::format-string asdf::format-args format asdf::*verbose-out* apply #Y(asdf::asdf-message nil nil (24 45 4 27 45 5 15 6 14 7 13 1 13 0 19 4 8 29) #17# #1# 29183) si::fset)) #1# 29183) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 29 12 19 2 30 15 0 15 31 15 32 19 3 33 1 0 73 29) #18=#A(t (34) (asdf::split-string fmakunbound (notinline asdf::split-string) proclaim string (nil :separator :max) max (#\  #\Tab) asdf::separator length asdf::end asdf::words list char find #Y(asdf::separatorp nil nil (24 45 13 26 13 0 13 5 19 2 14 29) #18# #1# 29340) subseq #Y(asdf::done nil nil (26 77 13 6 9 0 13 2 19 3 16 12 10 0 3 73 37 29) #18# #1# 29340) asdf::start 0 1- >= :end :from-end t position-if 1+ #:g331 + #Y(asdf::split-string nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 3 15 7 46 8 75 59 60 126 77 9 0 10 3 16 9 12 46 10 46 11 46 12 30 2 15 17 75 45 18 57 19 61 2 2 90 10 9 39 11 13 5 10 9 16 20 12 19 2 21 39 7 32 2 18 0 38 17 32 3 12 13 10 14 22 13 6 14 23 14 24 19 6 25 51 1 10 1 76 39 5 32 2 18 0 13 10 10 1 16 26 12 13 6 19 3 16 12 10 4 3 51 4 8 1 45 27 13 6 13 0 19 2 28 51 6 43 1 10 1 51 6 35 0 0 62 73 43 1 43 2 43 3 63 29) #18# #1# 29340) si::fset function "Split STRING into a list of components separated by
any of the characters in the sequence SEPARATOR.
If MAX is specified, then no more than max(1,MAX) components will be returned,
starting the separation from the end, e.g. when called with arguments
 \"a.b.c.d.e\" :max 3 :separator \".\" it will return (\"a.b.c\" \"d\" \"e\")." si::set-documentation)) #1# 29340) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #19=#A(t (20) (asdf::split-name-type fmakunbound (notinline asdf::split-name-type) proclaim asdf::filename asdf::unspecific :max :separator "." asdf::split-string #:g335 #:g336 si::dm-too-few-arguments asdf::name type si::dm-too-many-arguments "" equal #Y(asdf::split-name-type nil nil (24 45 4 26 75 45 5 13 1 14 6 9 2 14 7 15 8 19 5 9 45 10 10 0 45 11 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 13 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 3 10 3 45 14 10 2 39 6 13 3 19 1 15 13 1 1 16 17 17 39 9 13 5 13 4 72 2 38 7 13 1 13 0 72 2 43 4 43 1 29) #19# #1# 30283) si::fset)) #1# 30283) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 41 12 19 2 42 15 0 15 43 15 44 19 3 45 1 0 73 29) #20=#A(t (46) (asdf::component-name-to-pathname-components fmakunbound (notinline asdf::component-name-to-pathname-components) proclaim asdf::s (nil :force-relative :force-directory) asdf::force-directory asdf::force-relative #:g341 string typep si::do-check-type #\: find "~@<A portable ASDF pathname designator cannot include a #: character: ~3i~_~S~@:>" error :separator "/" asdf::split-string asdf::components last asdf::last-comp "" equal asdf::first-char #\/ "~@<Absolute pathname designator not allowed: ~3i~_~S~@:>" :absolute :relative asdf::relative asdf::x ("" ".") :test member #Y(nil nil nil (24 45 30 26 13 0 15 31 14 32 33 23 12 19 4 33 29) #20# #1# 30911) remove-if :back ".." substitute "" butlast #Y(asdf::component-name-to-pathname-components nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 45 8 13 0 15 9 19 2 10 76 39 13 13 0 15 9 77 15 4 19 4 11 51 3 43 1 15 12 13 2 19 2 13 39 8 15 14 13 2 19 2 15 13 2 14 16 15 17 19 3 18 45 19 13 0 19 1 20 4 45 21 10 1 4 12 1 22 17 23 39 41 13 4 19 1 24 12 1 25 17 23 39 22 10 2 39 8 15 26 13 4 19 2 15 14 27 10 1 5 12 72 2 38 6 14 28 77 72 2 38 7 14 28 13 1 72 2 47 1 19 45 29 34 34 12 13 1 19 2 35 51 1 14 36 15 37 13 1 14 32 33 23 12 19 5 38 51 1 13 2 1 39 17 23 39 10 13 0 13 1 77 72 3 38 26 10 5 39 10 13 0 13 1 77 72 3 38 13 13 0 13 1 19 1 40 12 13 2 72 3 43 2 43 2 29) #20# #1# 30911) si::fset function "Splits the path string S, returning three values:
A flag that is either :absolute or :relative, indicating
   how the rest of the values are to be interpreted.
A directory path --- a list of strings, suitable for
   use with MAKE-PATHNAME when prepended with the flag
   value.
A filename with type extension, possibly NIL in the
   case of a directory pathname.
FORCE-DIRECTORY forces S to be interpreted as a directory
pathname (third return value will be NIL, final component
of S will be treated as part of the directory path.

The intention of this function is to support structured component names,
e.g., (:file \"foo/bar\"), which will be unpacked to relative
pathnames." si::set-documentation)) #1# 30911) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 23 12 19 2 24 1 0 73 29) #21=#A(t (25) (asdf::remove-keys fmakunbound (notinline asdf::remove-keys) proclaim asdf::key-names asdf::args asdf::val asdf::name #:g350 #:loop-list-head351 #:loop-list-tail352 0 atom #22=#:loop-desetq-temp cddr symbol-name :key :test equal member #:g353 #:g354 rplacd #Y(asdf::remove-keys nil nil (24 45 4 24 45 5 26 58 60 127 13 1 77 77 46 6 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 89 10 3 16 12 39 4 35 0 1 10 3 45 13 10 0 4 51 5 10 0 5 51 0 10 0 4 51 6 43 1 10 3 16 14 51 3 10 4 16 15 12 13 8 14 16 33 15 12 14 17 15 18 19 6 19 76 39 28 10 1 45 20 13 5 10 6 6 2 45 21 13 1 10 0 17 22 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #21# #1# 32790) si::fset)) #1# 32790) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 19 12 19 2 20 1 0 73 29) #23=#A(t (21) (asdf::remove-keyword fmakunbound (notinline asdf::remove-keyword) proclaim asdf::key asdf::args asdf::v asdf::k #:g360 #:loop-list-head361 #:loop-list-tail362 0 atom #22# cddr eq #:g363 #:g364 rplacd #Y(asdf::remove-keyword nil nil (24 45 4 24 45 5 26 58 60 114 13 1 77 77 46 6 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 76 10 3 16 12 39 4 35 0 1 10 3 45 13 10 0 4 51 5 10 0 5 51 0 10 0 4 51 6 43 1 10 3 16 14 51 3 13 4 10 8 17 15 76 39 28 10 1 45 16 13 5 10 6 6 2 45 17 13 1 10 0 17 18 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #23# #1# 33004) si::fset)) #1# 33004) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #24=#A(t (8) (asdf::getenv fmakunbound (notinline asdf::getenv) proclaim asdf::x ext::getenv #Y(asdf::getenv nil nil (24 45 4 26 10 0 16 5 29) #24# #1# 33126) si::fset)) #1# 33126) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 15 0 15 17 15 18 19 3 19 1 0 73 29) #25=#A(t (20) (asdf::directory-pathname-p fmakunbound (notinline asdf::directory-pathname-p) proclaim pathname asdf::x (nil :unspecific "") :test equal member #Y(asdf::check-one nil nil (24 45 5 26 13 0 15 6 14 7 15 8 19 4 9 29) #25# #1# 34275) wild-pathname-p pathname-name pathname-type t #Y(asdf::directory-pathname-p nil nil (24 45 4 26 10 0 73 39 52 10 0 16 4 45 4 30 1 10 13 1 19 1 11 76 73 39 30 13 1 19 1 12 12 32 0 18 1 73 39 17 13 1 19 1 13 12 32 0 18 1 73 39 4 11 14 73 43 1 43 1 29) #25# #1# 34275) si::fset function "Does PATHNAME represent a directory?

A directory-pathname is a pathname _without_ a filename. The three
ways that the filename components can be missing are for it to be NIL,
:UNSPECIFIC or the empty string.

Note that this does _not_ check to see that PATHNAME points to an
actually-existing directory." si::set-documentation)) #1# 34275) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #26=#A(t (28) (asdf::ensure-directory-pathname fmakunbound (notinline asdf::ensure-directory-pathname) proclaim asdf::pathspec stringp pathname pathnamep "~@<Invalid pathname designator ~S~@:>" error wild-pathname-p "~@<Can't reliably convert wild pathname ~3i~_~S~@:>" asdf::directory-pathname-p :directory pathname-directory :relative file-namestring append :name :type :version :defaults make-pathname #Y(asdf::ensure-directory-pathname nil nil (24 45 4 26 10 0 16 5 39 11 10 0 16 6 12 19 1 0 38 88 10 0 16 7 76 39 10 15 8 13 0 19 2 9 38 72 13 0 19 1 10 39 10 15 11 13 0 19 2 9 38 56 13 0 19 1 12 39 6 10 0 73 38 44 14 13 13 0 19 1 14 73 40 6 11 15 6 1 73 12 10 0 16 16 6 1 12 19 2 17 12 14 18 77 14 19 77 14 20 77 14 21 13 0 19 10 22 29) #26# #1# 34941) si::fset function "Converts the non-wild pathname designator PATHSPEC to directory form." si::set-documentation)) #1# 34941) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #27=#A(t (13) (asdf::absolute-pathname-p fmakunbound (notinline asdf::absolute-pathname-p) proclaim asdf::pathspec (or pathname string) typep :absolute pathname pathname-directory eq #Y(asdf::absolute-pathname-p nil nil (24 45 4 26 13 0 15 5 19 2 6 73 39 14 14 7 10 0 16 8 12 19 1 9 4 17 10 29) #27# #1# 35724) si::fset)) #1# 35724) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 31 12 19 2 32 15 0 15 33 15 34 19 3 35 1 0 73 29) #28=#A(t (36) (asdf::coerce-pathname fmakunbound (notinline asdf::coerce-pathname) proclaim asdf::name (nil :defaults :type) type asdf::defaults #:g366 #29=(or null pathname) typep symbol string-downcase :type :defaults string :force-directory :directory eq :force-relative t asdf::component-name-to-pathname-components asdf::filename asdf::path asdf::relative asdf::split-name-type make-pathname :name apply (#29# symbol string) si::etypecase-error #Y(asdf::coerce-pathname nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 45 8 13 0 15 9 19 2 10 39 6 10 3 73 38 151 13 0 15 11 19 2 10 39 20 13 3 19 1 12 12 14 13 13 2 14 14 13 1 19 5 0 38 123 13 0 15 15 19 2 10 39 108 13 3 14 16 13 2 11 17 17 18 12 14 19 14 20 19 5 21 47 2 22 47 1 23 45 24 13 5 11 17 17 18 40 4 10 2 76 39 7 77 77 72 2 38 18 10 5 39 9 13 2 13 5 72 2 38 6 13 2 19 1 25 47 1 6 45 4 15 26 14 17 13 2 10 3 3 12 14 27 13 0 14 13 13 1 10 6 73 39 8 14 14 10 6 6 2 73 12 19 8 28 43 2 43 3 38 7 13 0 1 29 17 30 43 1 29) #28# #1# 36035) si::fset function "coerce NAME into a PATHNAME.
When given a string, portably decompose it into a relative pathname:
#\\/ separates subdirectories. The last #\\/-separated string is as follows:
if TYPE is NIL, its last #\\. if any separates name and type from from type;
if TYPE is a string, it is the type, and the whole string is the name;
if TYPE is :DIRECTORY, the string is a directory component;
if the string is empty, it's a directory.
Any directory named .. is read as :BACK.
Host, device and version components are taken from DEFAULTS." si::set-documentation)) #1# 36035) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #30=#A(t (15) (asdf::merge-component-name-type fmakunbound (notinline asdf::merge-component-name-type) proclaim asdf::name (nil :defaults :type) type asdf::defaults "Please don't use ASDF::MERGE-COMPONENT-NAME-TYPE. Use ASDF:COERCE-PATHNAME." warn :type :defaults asdf::coerce-pathname #Y(asdf::merge-component-name-type nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 15 8 19 1 9 13 2 14 10 13 1 14 11 13 0 19 5 12 29) #30# #1# 37821) si::fset)) #1# 37821) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #31=#A(t (14) (asdf::subpathname fmakunbound (notinline asdf::subpathname) proclaim pathname asdf::subpath (nil :type) type :type asdf::coerce-pathname asdf::pathname-directory-pathname asdf::merge-pathnames* #Y(asdf::subpathname nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 10 2 73 39 20 13 1 14 8 13 0 19 3 9 12 13 2 19 1 10 12 19 2 11 29) #31# #1# 38146) si::fset)) #1# 38146) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #32=#A(t (10) (asdf::subpathname* pathname asdf::subpath (nil :type) type asdf::ensure-directory-pathname :type asdf::subpathname #Y(asdf::subpathname* nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 10 2 73 39 16 13 2 19 1 5 12 13 1 14 6 13 0 19 4 7 29) #32# #1# 38343) si::fset)) #1# 38343) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 16 12 19 2 17 1 0 73 29) #33=#A(t (18) (asdf::length=n-p fmakunbound (notinline asdf::length=n-p) proclaim asdf::x asdf::n #:g369 (integer 0 *) typep si::do-check-type asdf::l asdf::i 0 zerop consp 1- #Y(asdf::length=n-p nil nil (24 45 4 24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 76 39 13 13 0 15 7 77 15 5 19 4 9 51 1 43 1 58 60 64 75 45 10 10 2 45 11 57 12 61 2 6 44 10 5 51 2 10 1 16 13 39 9 10 2 76 73 36 3 38 12 10 2 16 14 76 39 5 75 73 36 3 10 2 5 51 2 10 1 16 15 51 1 35 0 0 62 73 43 1 43 1 63 29) #33# #1# 38488) si::fset)) #1# 38488) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 17 12 19 2 18 1 0 73 29) #34=#A(t (19) (asdf::string-suffix-p fmakunbound (notinline asdf::string-suffix-p) proclaim asdf::s asdf::suffix #:g375 string typep si::do-check-type #:g377 length - asdf::start <= :start1 string-equal #Y(asdf::string-suffix-p nil nil (24 45 4 24 45 5 26 10 1 45 6 13 0 15 7 19 2 8 76 39 13 13 0 15 7 77 15 4 19 4 9 51 2 43 1 10 0 45 10 13 0 15 7 19 2 8 76 39 13 13 0 15 7 77 15 5 19 4 9 51 1 43 1 10 1 16 11 12 10 0 16 11 12 19 2 12 45 13 9 0 13 0 19 2 14 73 39 12 13 2 13 1 14 15 13 0 19 4 16 43 1 29) #34# #1# 38726) si::fset)) #1# 38726) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #35=#A(t (20) (asdf::read-file-forms fmakunbound (notinline asdf::read-file-forms) proclaim asdf::file open asdf::in asdf::eof asdf::form #:loop-list-head381 #:loop-list-tail382 0 read eq rplacd close :abort t #Y(asdf::read-file-forms nil nil (24 45 4 26 13 0 19 1 5 45 6 64 88 58 60 73 75 6 1 45 7 75 45 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 35 13 6 77 13 4 19 3 12 51 3 13 3 10 4 17 13 39 4 35 0 1 13 1 10 3 6 1 51 1 17 14 35 0 0 10 2 5 73 36 5 62 73 43 2 43 1 43 1 63 69 10 0 39 6 13 0 19 1 15 70 65 10 0 39 10 13 0 14 16 14 17 19 3 15 66 43 1 29) #35# #1# 38935) si::fset)) #1# 38935) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #36=#A(t (14) (asdf::pathname-root fmakunbound (notinline asdf::pathname-root) proclaim pathname :directory (:absolute) :name :type :version :defaults make-pathname #Y(asdf::pathname-root nil nil (24 45 4 26 14 5 15 6 14 7 77 14 8 77 14 9 77 14 10 13 0 19 10 11 29) #36# #1# 39111) si::fset)) #1# 39111) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 15 0 15 17 15 18 19 3 19 1 0 73 29) #37=#A(t (20) (asdf::probe-file* fmakunbound (notinline asdf::probe-file*) proclaim asdf::p #:g384 null typep string parse-namestring pathname wild-pathname-p probe-file (null string pathname) si::etypecase-error #Y(asdf::probe-file* nil nil (24 45 4 26 10 0 45 5 13 0 15 6 19 2 7 39 5 75 73 38 51 13 0 15 8 19 2 7 39 12 13 1 19 1 9 12 19 1 0 38 31 13 0 15 10 19 2 7 39 16 13 1 19 1 11 76 73 39 5 10 1 16 12 38 7 13 0 1 13 17 14 43 1 29) #37# #1# 39464) si::fset function "when given a pathname P, probes the filesystem for a file or directory
with given pathname and if it exists return its truename." si::set-documentation)) #1# 39464) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 49 12 19 2 50 15 0 15 51 15 52 19 3 53 1 0 73 29) #38=#A(t (54) (asdf::truenamize fmakunbound (notinline asdf::truenamize) proclaim pathname *default-pathname-defaults* asdf::defaults (or null logical-pathname) typep asdf::merge-pathnames* asdf::p logical-pathname asdf::probe-file* asdf::found asdf::absolute-pathname-p #:g391 #:g392 0 error si::temp #Y(nil nil nil (24 45 19 26 10 0 51 2 35 1 0 29) #38# #1# 40059) si::*handler-clusters* truename condition asdf::true-defaults merge-pathnames asdf::pathname-root asdf::sofar asdf::directories :host :device :directory :relative :name pathname-name :type pathname-type :version pathname-version make-pathname #Y(asdf::solution nil nil (24 45 28 26 14 29 77 14 30 77 14 31 14 32 10 0 7 2 12 14 33 13 2 19 1 34 12 14 35 13 2 19 1 36 12 14 37 10 2 16 38 12 19 12 39 12 13 1 19 2 9 29) #38# #1# 40059) pathname-directory asdf::normalize-pathname-directory-component directory #:loop-list395 asdf::component rest asdf::more atom #Y(asdf::truenamize nil nil (24 45 4 25 40 3 14 5 46 6 26 58 60 325 13 2 15 7 19 2 8 39 6 10 2 73 36 0 13 2 13 1 19 2 9 45 10 13 0 15 11 19 2 8 39 6 10 0 73 36 1 13 0 19 1 12 45 13 10 0 39 6 10 0 73 36 2 43 1 13 0 19 1 14 76 39 68 57 15 60 47 75 45 16 57 17 61 1 22 15 18 34 20 3 6 1 12 11 21 3 48 21 10 5 16 22 36 2 44 1 10 1 45 23 77 13 0 72 2 43 1 36 2 62 43 1 63 45 24 10 0 39 10 13 4 13 0 19 2 25 51 1 43 1 13 0 19 1 14 76 39 6 10 0 73 36 1 13 0 19 1 26 12 19 1 12 45 27 10 0 76 39 6 10 1 73 36 2 30 1 40 58 60 148 13 3 19 1 41 12 19 1 42 45 43 77 10 0 5 12 46 44 46 45 10 2 5 45 46 75 45 47 57 17 61 2 20 96 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 2 16 48 39 4 35 0 1 14 31 14 32 10 3 6 2 12 19 2 39 12 13 8 19 2 9 12 19 1 12 51 1 10 1 39 7 10 1 51 8 38 9 13 2 32 7 18 1 36 6 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 2 5 51 2 35 0 0 77 32 7 18 1 36 6 62 73 43 1 43 1 43 2 43 1 63 43 1 43 1 43 1 63 29) #38# #1# 40059) si::fset function "Resolve as much of a pathname as possible" si::set-documentation)) #1# 40059) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #39=#A(t (8) (asdf::resolve-symlinks fmakunbound (notinline asdf::resolve-symlinks) proclaim asdf::path asdf::truenamize #Y(asdf::resolve-symlinks nil nil (24 45 4 26 13 0 19 1 5 29) #39# #1# 41769) si::fset)) #1# 41769) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #40=#A(t (9) (asdf::resolve-symlinks* fmakunbound (notinline asdf::resolve-symlinks*) proclaim asdf::path asdf::*resolve-symlinks* asdf::resolve-symlinks #Y(asdf::resolve-symlinks* nil nil (24 45 4 26 11 5 39 13 10 0 73 39 6 13 0 19 1 6 38 4 10 0 73 29) #40# #1# 41962) si::fset)) #1# 41962) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 1 0 73 29) #41=#A(t (17) (asdf::ensure-pathname-absolute fmakunbound (notinline asdf::ensure-pathname-absolute) proclaim asdf::path asdf::absolute-pathname-p stringp pathname pathnamep "not a valid pathname designator ~S" error asdf::resolve-symlinks asdf::resolved (asdf::absolute-pathname-p asdf::resolved) si::assert-failure #Y(asdf::ensure-pathname-absolute nil nil (24 45 4 26 13 0 19 1 5 39 6 10 0 73 38 60 10 0 16 6 39 11 10 0 16 7 12 19 1 0 38 44 10 0 16 8 76 39 10 15 9 13 0 19 2 10 38 28 13 0 19 1 11 45 12 38 6 15 13 19 1 14 13 0 19 1 5 76 40 -12 10 0 73 43 1 29) #41# #1# 42075) si::fset)) #1# 42075) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #42=#A(t (9) (asdf::default-directory fmakunbound (notinline asdf::default-directory) proclaim *default-pathname-defaults* asdf::pathname-directory-pathname asdf::truenamize #Y(asdf::default-directory nil nil (26 14 4 19 1 5 12 19 1 6 29) #42# #1# 42425) si::fset)) #1# 42425) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #43=#A(t (11) (asdf::lispize-pathname fmakunbound (notinline asdf::lispize-pathname) proclaim asdf::input-file :type "lisp" :defaults make-pathname #Y(asdf::lispize-pathname nil nil (24 45 4 26 14 5 15 6 14 7 13 0 19 4 8 29) #43# #1# 42529) si::fset)) #1# 42529) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (asdf::*wild* si::*make-special :wild)) #1# 42621) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 14 4 14 3 14 5 14 3 14 6 77 19 8 7 52 0 1 0 73 29) #A(t (8) (asdf::*wild-file* si::*make-special :name asdf::*wild* :type :version :directory make-pathname)) #1# 42680) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 11 4 6 2 12 14 5 77 14 6 77 14 7 77 19 8 8 52 0 1 0 73 29) #A(t (9) (asdf::*wild-directory* si::*make-special :directory :relative asdf::*wild* :name :type :version make-pathname)) #1# 42820) #Y(si::bytecodes nil nil (1 0 16 1 14 2 15 3 14 4 77 14 5 77 14 6 77 19 8 7 52 0 1 0 73 29) #A(t (8) (asdf::*wild-inferiors* si::*make-special :directory (:relative :wild-inferiors) :name :type :version make-pathname)) #1# 42935) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 19 2 4 52 0 1 0 73 29) #A(t (5) (asdf::*wild-path* si::*make-special asdf::*wild-file* asdf::*wild-inferiors* merge-pathnames)) #1# 43058) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #44=#A(t (9) (asdf::wilden fmakunbound (notinline asdf::wilden) proclaim asdf::path asdf::*wild-path* asdf::merge-pathnames* #Y(asdf::wilden nil nil (24 45 4 26 14 5 13 0 19 2 6 29) #44# #1# 43134) si::fset)) #1# 43134) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #45=#A(t (15) (asdf::directory-separator-for-host fmakunbound (notinline asdf::directory-separator-for-host) proclaim *default-pathname-defaults* pathname :directory (:absolute "FOO") :defaults make-pathname asdf::foo namestring asdf::last-char #Y(asdf::directory-separator-for-host nil nil (25 40 3 14 4 46 5 26 14 6 15 7 14 8 13 0 19 4 9 45 10 10 0 16 11 12 19 1 12 43 1 29) #45# #1# 43196) si::fset)) #1# 43196) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 34 12 19 2 35 1 0 73 29) #46=#A(t (36) (asdf::directorize-pathname-host-device fmakunbound (notinline asdf::directorize-pathname-host-device) proclaim pathname asdf::pathname-root asdf::root asdf::wilden asdf::wild-root asdf::merge-pathnames* asdf::absolute-pathname asdf::directory-separator-for-host asdf::separator namestring asdf::root-namestring #\/ asdf::x #\: eql #Y(nil nil nil (24 45 16 26 13 0 1 17 17 18 73 40 7 13 0 10 2 17 18 29) #46# #1# 43406) substitute-if asdf::root-string :force-directory t asdf::component-name-to-pathname-components asdf::filename asdf::path asdf::relative :defaults :directory :absolute make-pathname asdf::new-base translate-pathname #Y(asdf::directorize-pathname-host-device nil nil (24 45 4 26 13 0 19 1 5 45 6 13 0 19 1 7 45 8 13 2 13 1 19 2 9 45 10 13 2 19 1 11 45 12 10 3 16 13 45 14 15 15 34 19 12 13 0 19 3 20 45 21 13 0 14 22 14 23 19 3 24 47 2 25 47 1 26 45 27 14 28 13 8 14 29 14 30 10 1 7 2 12 19 4 31 45 32 13 7 13 8 13 0 19 1 7 12 19 3 33 43 1 43 3 43 6 29) #46# #1# 43406) si::fset)) #1# 43406) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::find-system fmakunbound (notinline asdf::find-system) proclaim :delete-methods t :lambda-list (asdf::system &optional asdf::error-p) ensure-generic-function)) #1# 44296) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::perform-with-restarts fmakunbound (notinline asdf::perform-with-restarts) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45464) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::perform fmakunbound (notinline asdf::perform) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45522) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::operation-done-p fmakunbound (notinline asdf::operation-done-p) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45566) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::mark-operation-done fmakunbound (notinline asdf::mark-operation-done) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45619) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::explain fmakunbound (notinline asdf::explain) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45675) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::output-files fmakunbound (notinline asdf::output-files) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45719) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::input-files fmakunbound (notinline asdf::input-files) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45768) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-operation-time fmakunbound (notinline asdf::component-operation-time) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 45816) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::operation-description fmakunbound (notinline asdf::operation-description) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "returns a phrase that describes performing this operation
on this component, e.g. \"loading /a/b/c\".
You can put together sentences using this phrase." ensure-generic-function)) #1# 45877) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::system-source-file fmakunbound (notinline asdf::system-source-file) proclaim :delete-methods t :lambda-list (asdf::system) :documentation "Return the source file in which system is defined." ensure-generic-function)) #1# 46108) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::component-system fmakunbound (notinline asdf::component-system) proclaim :delete-methods t :lambda-list (asdf::component) :documentation "Find the top-level system containing COMPONENT" ensure-generic-function)) #1# 46223) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::component-pathname fmakunbound (notinline asdf::component-pathname) proclaim :delete-methods t :lambda-list (asdf::component) :documentation "Extracts the pathname applicable for a particular component." ensure-generic-function)) #1# 46335) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::component-relative-pathname fmakunbound (notinline asdf::component-relative-pathname) proclaim :delete-methods t :lambda-list (asdf::component) :documentation "Returns a pathname for the component argument intended to be
interpreted relative to the pathname of that component's parent.
Despite the function's name, the return value may be an absolute
pathname, because an absolute pathname may be interpreted relative to
another pathname in a degenerate way." ensure-generic-function)) #1# 46463) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-property fmakunbound (notinline asdf::component-property) proclaim :delete-methods t :lambda-list (asdf::component asdf::property) ensure-generic-function)) #1# 46838) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::component-property) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::component asdf::property) ensure-generic-function)) #1# 46893) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-external-format fmakunbound (notinline asdf::component-external-format) proclaim :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 46965) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-encoding fmakunbound (notinline asdf::component-encoding) proclaim :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 47018) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::module-components-by-name) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::module) ensure-generic-function)) #1# 47064) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::version-satisfies fmakunbound (notinline asdf::version-satisfies) proclaim :delete-methods t :lambda-list (asdf::component asdf::version) ensure-generic-function)) #1# 47195) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::find-component fmakunbound (notinline asdf::find-component) proclaim :delete-methods t :lambda-list (asdf::base asdf::path) :documentation "Finds the component with PATH starting from BASE module;
if BASE is nil, then the component is assumed to be a system." ensure-generic-function)) #1# 47248) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::source-file-type fmakunbound (notinline asdf::source-file-type) proclaim :delete-methods t :lambda-list (asdf::component asdf::system) ensure-generic-function)) #1# 47430) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::operation-ancestor fmakunbound (notinline asdf::operation-ancestor) proclaim :delete-methods t :lambda-list (asdf::operation) :documentation "Recursively chase the operation's parent pointer until we get to
the head of the tree" ensure-generic-function)) #1# 47481) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::component-visited-p fmakunbound (notinline asdf::component-visited-p) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Returns the value stored by a call to
VISIT-COMPONENT, if that has been called, otherwise NIL.
This value stored will be a cons cell, the first element
of which is a computed key, so not interesting.  The
CDR wil be the DATA value stored by VISIT-COMPONENT; recover
it as (cdr (component-visited-p op c)).
  In the current form of ASDF, the DATA value retrieved is
effectively a boolean, indicating whether some operations are
to be performed in order to do OPERATION X COMPONENT.  If the
data value is NIL, the combination had been explored, but no
operations needed to be performed." ensure-generic-function)) #1# 47637) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::visit-component fmakunbound (notinline asdf::visit-component) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component asdf::data) :documentation "Record DATA as being associated with OPERATION
and COMPONENT.  This is a side-effecting function:  the association
will be recorded on the ROOT OPERATION (OPERATION-ANCESTOR of the
OPERATION).
  No evidence that DATA is ever interesting, beyond just being
non-NIL.  Using the data field is probably very risky; if there is
already a record for OPERATION X COMPONENT, DATA will be quietly
discarded instead of recorded.
  Starting with 2.006, TRAVERSE will store an integer in data,
so that nodes can be sorted in decreasing order of traversal." ensure-generic-function)) #1# 48300) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::visiting-component) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::operation asdf::component) ensure-generic-function)) #1# 48925) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-visiting-p fmakunbound (notinline asdf::component-visiting-p) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 48999) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::component-depends-on fmakunbound (notinline asdf::component-depends-on) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Returns a list of dependencies needed by the component to perform
    the operation.  A dependency has one of the following forms:

      (<operation> <component>*), where <operation> is a class
        designator and each <component> is a component
        designator, which means that the component depends on
        <operation> having been performed on each <component>; or

      (FEATURE <feature>), which means that the component depends
        on <feature>'s presence in *FEATURES*.

    Methods specialized on subclasses of existing component types
    should usually append the results of CALL-NEXT-METHOD to the
    list." ensure-generic-function)) #1# 49057) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::component-self-dependencies fmakunbound (notinline asdf::component-self-dependencies) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 49773) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 15 8 15 9 19 7 10 29) #A(t (11) (asdf::traverse fmakunbound (notinline asdf::traverse) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Generate and return a plan for performing OPERATION on COMPONENT.

The plan returned is a list of dotted-pairs. Each pair is the CONS
of ASDF operation object and a COMPONENT object. The pairs will be
processed in order by OPERATE." ensure-generic-function)) #1# 49838) #Y(si::bytecodes nil nil (11 0 73 39 14 15 1 77 19 2 2 73 39 5 1 3 16 4 29) #A(t (5) (asdf::*upgraded-p* asdf::module find-class (defmethod update-instance-for-redefined-class :after ((asdf::m asdf::module) asdf::added asdf::deleted asdf::plist &key) (declare (ignorable asdf::deleted asdf::plist)) (when asdf::*asdf-verbose* (asdf::asdf-message (asdf::compatfmt "~&~@<; ~@;Updating ~A for ASDF ~A~@:>~%") asdf::m (asdf::asdf-version))) (when (member 'asdf::components-by-name asdf::added) (asdf::compute-module-components-by-name asdf::m)) (when (typep asdf::m 'asdf::system) (when (member 'asdf::source-file asdf::added) (asdf::%set-system-source-file (asdf::probe-asd (asdf::component-name asdf::m) (asdf::component-pathname asdf::m)) asdf::m) (when (equal (asdf::component-name asdf::m) "asdf") (setf (asdf::component-version asdf::m) asdf::*asdf-version*))))) eval)) #1# 50137) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::system-definition-error (error) clos::load-defclass)) #1# 51062) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 12 15 12 1 13 6 3 12 77 19 4 14 1 0 73 29) #47=#A(t (15) (asdf::formatted-system-definition-error (asdf::system-definition-error) :initfunction asdf::c asdf::s format asdf::format-control asdf::format-arguments apply #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #47# #1# 51709) #Y(nil nil nil (26 34 9 73 29) #47# #1# 51709) (:initform (lambda (asdf::c asdf::s) (apply 'format asdf::s (asdf::format-control asdf::c) (asdf::format-arguments asdf::c))) :name si::report-function) (:readers (asdf::format-control) :initargs (:format-control) :name asdf::format-control) (:readers (asdf::format-arguments) :initargs (:format-arguments) :name asdf::format-arguments) clos::load-defclass)) #1# 51709) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 11 12 1 12 7 3 12 15 13 15 14 1 15 6 4 12 77 19 4 16 1 0 73 29) #48=#A(t (17) (asdf::load-system-definition-error (asdf::system-definition-error) :initfunction asdf::c asdf::s #49="~@<Error while trying to load definition for system ~A from pathname ~A: ~3i~_~A~@:>" asdf::error-name asdf::error-pathname asdf::error-condition format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 12 19 5 9 29) #48# #1# 52032) #Y(nil nil nil (26 34 10 73 29) #48# #1# 52032) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #49#) (asdf::error-name asdf::c) (asdf::error-pathname asdf::c) (asdf::error-condition asdf::c))) :name si::report-function) (:readers (asdf::error-name) :initargs (:name) :name asdf::name) (:readers (asdf::error-pathname) :initargs (:pathname) :name pathname) (:readers (asdf::error-condition) :initargs (:condition) :name condition) clos::load-defclass)) #1# 52032) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 9 12 1 10 7 3 12 1 11 6 2 12 77 19 4 12 1 0 73 29) #50=#A(t (13) (asdf::circular-dependency (asdf::system-definition-error) :initfunction asdf::c asdf::s #51="~@<Circular dependency: ~3i~_~S~@:>" asdf::circular-dependency-components format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #50# #1# 52492) #Y(nil nil nil (26 34 8 73 29) #50# #1# 52492) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #51#) (asdf::circular-dependency-components asdf::c))) :name si::report-function) (:readers (asdf::circular-dependency-components) :initargs (:components) :name asdf::components) clos::load-defclass)) #1# 52492) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 9 12 1 10 7 3 12 1 11 6 2 12 77 19 4 12 1 0 73 29) #52=#A(t (13) (asdf::duplicate-names (asdf::system-definition-error) :initfunction asdf::c asdf::s #53="~@<Error while defining system: multiple components are given same name ~A~@:>" asdf::duplicate-names-name format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #52# #1# 52792) #Y(nil nil nil (26 34 8 73 29) #52# #1# 52792) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #53#) (asdf::duplicate-names-name asdf::c))) :name si::report-function) (:readers (asdf::duplicate-names-name) :initargs (:name) :name asdf::name) clos::load-defclass)) #1# 52792) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-component (asdf::system-definition-error) ((:initargs (:requires) :readers (asdf::missing-requires) :initform "(unnamed)" :name asdf::requires) (:initargs (:parent) :readers (asdf::missing-parent) :initform nil :name asdf::parent)) clos::load-defclass)) #1# 53099) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-component-of-version (asdf::missing-component) ((:initargs (:version) :readers (asdf::missing-version) :initform nil :name asdf::version)) clos::load-defclass)) #1# 53310) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-dependency (asdf::missing-component) ((:readers (asdf::missing-required-by) :initargs (:required-by) :name asdf::required-by)) clos::load-defclass)) #1# 53449) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::missing-dependency-of-version (asdf::missing-dependency asdf::missing-component-of-version) clos::load-defclass)) #1# 53576) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 12 15 12 1 13 6 3 12 77 19 4 14 1 0 73 29) #54=#A(t (15) (asdf::operation-error (error) :initfunction asdf::c asdf::s #55="~@<Error while invoking ~A on ~A~@:>" asdf::error-operation asdf::error-component format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #54# #1# 53730) #Y(nil nil nil (26 34 9 73 29) #54# #1# 53730) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #55#) (asdf::error-operation asdf::c) (asdf::error-component asdf::c))) :name si::report-function) (:initargs (:component) :readers (asdf::error-component) :name asdf::component) (:initargs (:operation) :readers (asdf::error-operation) :name asdf::operation) clos::load-defclass)) #1# 53730) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-error (asdf::operation-error) clos::load-defclass)) #1# 54060) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-failed (asdf::compile-error) clos::load-defclass)) #1# 54114) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-warned (asdf::compile-error) clos::load-defclass)) #1# 54167) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 12 12 1 13 7 3 12 15 14 15 15 15 16 1 17 6 5 12 77 19 4 18 1 0 73 29) #56=#A(t (19) (asdf::invalid-configuration (condition) :initfunction asdf::c asdf::s #57="~@<~? (will be skipped)~@:>" asdf::condition-format asdf::condition-form asdf::condition-location asdf::condition-arguments format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 12 13 1 19 1 9 7 3 12 19 4 10 29) #56# #1# 54220) #Y(nil nil nil (26 34 11 73 29) #56# #1# 54220) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #57#) (asdf::condition-format asdf::c) (list* (asdf::condition-form asdf::c) (asdf::condition-location asdf::c) (asdf::condition-arguments asdf::c)))) :name si::report-function) (:initargs (:form) :readers (asdf::condition-form) :name asdf::form) (:initargs (:location) :readers (asdf::condition-location) :name asdf::location) (:initargs (:format) :readers (asdf::condition-format) :name format) (:initform nil :initargs (:arguments) :readers (asdf::condition-arguments) :name asdf::arguments) clos::load-defclass)) #1# 54220) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 77 19 4 6 1 0 73 29) #58=#A(t (7) (asdf::invalid-source-registry (asdf::invalid-configuration warning) :initfunction #59="~@<Invalid source registry ~S~@[ in ~S~]~@{ ~@?~}~@:>" #Y(nil nil nil (26 1 3 73 29) #58# #1# 54771) (:initform (asdf::compatfmt #59#) :name format) clos::load-defclass)) #1# 54771) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 77 19 4 6 1 0 73 29) #60=#A(t (7) (asdf::invalid-output-translation (asdf::invalid-configuration warning) :initfunction #61="~@<Invalid asdf output-translation ~S~@[ in ~S~]~@{ ~@?~}~@:>" #Y(nil nil nil (26 1 3 73 29) #60# #1# 54937) (:initform (asdf::compatfmt #61#) :name format) clos::load-defclass)) #1# 54937) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 15 11 14 12 1 14 12 1 15 7 3 12 15 16 15 17 1 18 6 15 12 77 19 4 19 29) #62=#A(t (20) (asdf::component (:documentation "Component name: designator for a string composed of portable pathname characters" :type string :initargs (:name) :writers ((setf asdf::component-name)) :readers (asdf::component-name) :name asdf::name) (:initargs (:version) :writers ((setf asdf::component-version)) :readers (asdf::component-version) :name asdf::version) (:initargs (:description) :writers ((setf asdf::component-description)) :readers (asdf::component-description) :name asdf::description) (:initargs (:long-description) :writers ((setf asdf::component-long-description)) :readers (asdf::component-long-description) :name asdf::long-description) (:initform nil :writers ((setf asdf::component-load-dependencies)) :readers (asdf::component-load-dependencies) :name asdf::load-dependencies) (:writers ((setf asdf::component-in-order-to)) :readers (asdf::component-in-order-to) :initargs (:in-order-to) :initform nil :name asdf::in-order-to) (:writers ((setf asdf::component-do-first)) :readers (asdf::component-do-first) :initargs (:do-first) :initform nil :name asdf::do-first) (:initform nil :writers ((setf asdf::component-inline-methods)) :readers (asdf::component-inline-methods) :name asdf::inline-methods) (:readers (asdf::component-parent) :initform nil :initargs (:parent) :name asdf::parent) (:initargs (:pathname) :name asdf::relative-pathname) (:name asdf::absolute-pathname) :initfunction make-hash-table #Y(nil nil nil (26 19 0 13 29) #62# #1# 55114) (:writers ((setf asdf::component-operation-times)) :readers (asdf::component-operation-times) :initform (make-hash-table) :name asdf::operation-times) (:initargs (:around-compile) :name asdf::around-compile) (:initargs (:encoding) :initform nil :writers ((setf asdf::%component-encoding)) :readers (asdf::%component-encoding) :name asdf::%encoding) (:initform nil :initargs (:properties) :writers ((setf asdf::component-properties)) :readers (asdf::component-properties) :name asdf::properties) clos::load-defclass)) #1# 55114) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #63=#A(t (15) (asdf::component-find-path fmakunbound (notinline asdf::component-find-path) proclaim asdf::component asdf::c #:loop-list-head399 #:loop-list-tail400 0 asdf::component-name rplacd asdf::component-parent reverse #Y(asdf::component-find-path nil nil (24 45 4 26 58 60 66 75 45 5 75 6 1 45 6 10 0 45 7 57 8 61 2 6 36 10 5 51 3 10 3 76 39 4 35 0 1 13 1 13 3 19 1 9 6 1 51 1 17 10 13 3 19 1 11 51 3 35 0 0 10 2 5 73 36 4 62 43 2 43 1 63 16 12 29) #63# #1# 58595) si::fset)) #1# 58595) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 9 19 6 12 29) #64=#A(t (13) (print-object (asdf::component t) (asdf::c stream) asdf::c stream "~{~S~^ ~}" asdf::component-find-path format #Y(si::.print-unreadable-object-body. nil nil (26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #64# #1# 58747) t si::print-unreadable-object-function #Y(print-object nil nil (24 45 3 24 45 4 26 30 1 8 13 2 13 1 14 9 77 32 0 12 19 5 10 43 1 29) #64# #1# 58747) clos::install-method)) #1# 58747) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #65=#A(t (12) (print-object (asdf::missing-dependency t) (asdf::c asdf::s) asdf::c asdf::s "~@<~A, required by ~A~@:>" call-next-method asdf::missing-required-by format #Y(print-object nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 77 19 2 6 12 13 1 19 1 7 12 19 4 8 29) #65# #1# 58913) t clos::install-method)) #1# 58913) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #66=#A(t (12) (asdf::sysdef-error fmakunbound (notinline asdf::sysdef-error) proclaim format asdf::arguments asdf::formatted-system-definition-error :format-control :format-arguments error #Y(asdf::sysdef-error nil nil (24 45 4 27 45 5 15 6 14 7 13 1 14 8 13 0 19 5 9 29) #66# #1# 59105) si::fset)) #1# 59105) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #67=#A(t (13) (print-object (asdf::missing-component t) (asdf::c asdf::s) asdf::c asdf::s "~@<Component ~S not found~@[ in ~A~]~@:>" asdf::missing-requires asdf::missing-parent asdf::coerce-name format #Y(print-object nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 73 39 10 13 1 19 1 7 12 19 1 8 12 19 4 9 29) #67# #1# 59258) t clos::install-method)) #1# 59258) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #68=#A(t (14) (print-object (asdf::missing-component-of-version t) (asdf::c asdf::s) asdf::c asdf::s "~@<Component ~S does not match version ~A~@[ in ~A~]~@:>" asdf::missing-requires asdf::missing-version asdf::missing-parent asdf::coerce-name format #Y(print-object nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 73 39 10 13 1 19 1 8 12 19 1 9 12 19 5 10 29) #68# #1# 59516) t clos::install-method)) #1# 59516) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #69=#A(t (9) (asdf::component-system (asdf::component) (asdf::component) asdf::component asdf::component-parent asdf::it #Y(asdf::component-system nil nil (24 45 3 26 13 0 19 1 4 45 5 10 0 39 8 13 0 19 1 0 38 4 10 1 73 43 1 29) #69# #1# 59805) t clos::install-method)) #1# 59805) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*default-component-class* si::*make-special boundp asdf::cl-source-file)) #1# 59942) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 25 12 19 2 26 1 0 73 29) #70=#A(t (27) (asdf::compute-module-components-by-name fmakunbound (notinline asdf::compute-module-components-by-name) proclaim asdf::module :test equal make-hash-table asdf::hash #:g410 #:g411 (setf asdf::module-components-by-name) asdf::module-components #:loop-list412 asdf::c asdf::name asdf::previous 0 asdf::component-name asdf::module-components-by-name gethash asdf::duplicate-names :name error si::hash-set #Y(asdf::compute-module-components-by-name nil nil (24 45 4 26 14 5 15 6 19 2 7 45 8 10 1 45 9 10 1 45 10 13 0 13 1 33 11 18 2 43 1 43 1 77 13 1 19 1 12 12 46 13 46 14 75 45 15 75 45 16 57 17 61 2 2 68 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 19 1 18 51 2 13 2 13 6 19 1 19 12 19 2 20 51 1 10 1 39 10 15 21 14 22 13 2 19 3 23 13 2 13 6 19 1 19 12 13 3 19 3 24 35 0 0 62 43 1 43 1 43 2 10 0 73 43 1 29) #70# #1# 59994) si::fset)) #1# 59994) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::module (asdf::component) ((:writers ((setf asdf::module-components)) :readers (asdf::module-components) :initargs (:components) :initform nil :name asdf::components) (:writers ((setf asdf::module-components-by-name)) :readers (asdf::module-components-by-name) :name asdf::components-by-name) (:writers ((setf asdf::module-if-component-dep-fails)) :readers (asdf::module-if-component-dep-fails) :initargs (:if-component-dep-fails) :initform :fail :name asdf::if-component-dep-fails) (:writers ((setf asdf::module-default-component-class)) :readers (asdf::module-default-component-class) :initargs (:default-component-class) :initform nil :name asdf::default-component-class)) clos::load-defclass)) #1# 60458) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #71=#A(t (10) (asdf::component-parent-pathname fmakunbound (notinline asdf::component-parent-pathname) proclaim asdf::component asdf::component-parent asdf::parent asdf::component-pathname #Y(asdf::component-parent-pathname nil nil (24 45 4 26 13 0 19 1 5 45 6 10 0 73 39 6 13 0 19 1 7 43 1 29) #71# #1# 61051) si::fset)) #1# 61051) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 20 12 14 21 19 6 22 29) #72=#A(t (23) (asdf::component-pathname (asdf::component) (asdf::component) asdf::component asdf::absolute-pathname slot-boundp slot-value asdf::component-relative-pathname asdf::component-parent-pathname asdf::pathname-directory-pathname asdf::merge-pathnames* pathname asdf::absolute-pathname-p "~@<Invalid relative pathname ~S for component ~S~@:>" asdf::component-find-path error #:g428 #:g429 #:g430 (setf slot-value) #Y(asdf::component-pathname nil nil (24 45 3 26 13 0 1 4 17 5 39 9 13 0 1 4 17 6 38 79 13 0 19 1 7 12 13 0 19 1 8 12 19 1 9 12 19 2 10 45 11 10 0 76 40 6 13 0 19 1 12 76 39 14 15 13 13 0 13 1 19 1 14 12 19 3 15 10 1 45 16 1 4 45 17 10 2 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 10 0 73 43 1 29) #72# #1# 61467) t clos::install-method)) #1# 61467) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #73=#A(t (13) (asdf::component-property (asdf::component t) (asdf::c asdf::property) asdf::c asdf::property asdf::properties slot-value :test equal assoc #Y(asdf::component-property nil nil (24 45 3 24 45 4 26 13 0 13 1 1 5 17 6 12 14 7 33 8 12 19 4 9 5 73 29) #73# #1# 62109) t clos::install-method)) #1# 62109) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 20 12 14 21 19 6 22 29) #74=#A(t (23) (#75=(setf asdf::component-property) (t asdf::component t) (asdf::new-value asdf::c asdf::property) asdf::new-value asdf::c asdf::property asdf::properties slot-value :test equal assoc asdf::a #:g446 #:g447 rplacd #:g448 #:g449 acons #:g450 (setf slot-value) #Y(#75# nil nil (24 45 3 24 45 4 24 45 5 26 13 0 13 1 1 6 17 7 12 14 8 33 9 12 19 4 10 45 11 10 0 39 23 10 0 45 12 10 4 45 13 13 1 10 0 17 14 10 0 43 1 43 1 38 39 10 2 45 15 1 6 45 16 13 3 13 5 13 4 1 6 17 7 12 19 3 17 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 43 1 10 2 73 29) #74# #1# 62232) t clos::install-method)) #1# 62232) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*default-encoding* si::*make-special boundp :default variable "Default encoding for source files.
The default value :default preserves the legacy behavior.
A future default might be :utf-8 or :autodetect
reading emacs-style -*- coding: utf-8 -*- specifications,
and falling back to utf-8 or latin1 if nothing is specified." si::set-documentation)) #1# 62544) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*utf-8-external-format* si::*make-special :utf-8 variable "Default :external-format argument to pass to CL:OPEN and also
CL:LOAD or CL:COMPILE-FILE to best process a UTF-8 encoded file.
On modern implementations, this will decode UTF-8 code points as CL characters.
On legacy implementations, it may fall back on some 8-bit encoding,
with non-ASCII code points being read as several CL characters;
hopefully, if done consistently, that won't affect program behavior too much." si::set-documentation)) #1# 62846) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #76=#A(t (8) (asdf::always-default-encoding fmakunbound (notinline asdf::always-default-encoding) proclaim pathname asdf::*default-encoding* #Y(asdf::always-default-encoding nil nil (24 45 4 26 11 5 73 29) #76# #1# 63418) si::fset)) #1# 63418) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 33 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*encoding-detection-hook* si::*make-special boundp asdf::always-default-encoding variable "Hook for an extension to define a function to automatically detect a file's encoding" si::set-documentation)) #1# 63514) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #77=#A(t (8) (asdf::detect-encoding fmakunbound (notinline asdf::detect-encoding) proclaim pathname asdf::*encoding-detection-hook* #Y(asdf::detect-encoding nil nil (24 45 4 26 14 5 13 0 20 1 23 29) #77# #1# 63665) si::fset)) #1# 63665) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #78=#A(t (14) (asdf::component-encoding (asdf::component) (asdf::c) asdf::c asdf::x #:loop-it-454 0 asdf::%component-encoding asdf::component-parent asdf::component-pathname asdf::detect-encoding #Y(asdf::component-encoding nil nil (24 45 3 26 58 60 55 75 45 4 75 45 5 57 6 61 2 6 37 10 4 51 2 10 2 76 39 4 35 0 1 13 2 19 1 7 51 1 39 6 10 1 73 36 3 13 2 19 1 8 51 2 35 0 0 62 43 1 43 1 63 73 40 10 13 0 19 1 9 12 19 1 10 29) #78# #1# 63749) t clos::install-method)) #1# 63749) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #79=#A(t (13) (asdf::default-encoding-external-format fmakunbound (notinline asdf::default-encoding-external-format) proclaim asdf::encoding :default :utf-8 asdf::*utf-8-external-format* "Continue using :external-format :default" "~@<Your ASDF component is using encoding ~S but it isn't recognized. Your system should :defsystem-depends-on (:asdf-encodings).~:>" cerror #Y(asdf::default-encoding-external-format nil nil (24 45 4 26 10 0 42 5 6 11 5 73 38 21 42 6 6 11 7 73 38 13 15 8 15 9 13 0 19 3 10 11 5 73 29) #79# #1# 63946) si::fset)) #1# 63946) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 33 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*encoding-external-format-hook* si::*make-special boundp asdf::default-encoding-external-format variable "Hook for an extension to define a mapping between non-default encodings
and implementation-defined external-format's" si::set-documentation)) #1# 64386) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #80=#A(t (5) (asdf::encoding-external-format asdf::encoding asdf::*encoding-external-format-hook* #Y(asdf::encoding-external-format nil nil (24 45 1 26 14 2 13 0 20 1 23 29) #80# #1# 64586) si::fset)) #1# 64586) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #81=#A(t (9) (asdf::component-external-format (asdf::component) (asdf::c) asdf::c asdf::component-encoding asdf::encoding-external-format #Y(asdf::component-external-format nil nil (24 45 3 26 13 0 19 1 4 12 19 1 5 29) #81# #1# 64684) t clos::install-method)) #1# 64684) #Y(si::bytecodes nil nil (15 0 77 15 1 77 19 4 2 29) #A(t (3) (asdf::proto-system ((:name asdf::name)) clos::load-defclass)) #1# 64791) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::system (asdf::module asdf::proto-system) ((:initargs (:description) :writers ((setf asdf::system-description)) :readers (asdf::system-description) :name asdf::description) (:initargs (:long-description) :writers ((setf asdf::system-long-description)) :readers (asdf::system-long-description) :name asdf::long-description) (:initargs (:author) :writers ((setf asdf::system-author)) :readers (asdf::system-author) :name asdf::author) (:initargs (:maintainer) :writers ((setf asdf::system-maintainer)) :readers (asdf::system-maintainer) :name asdf::maintainer) (:initargs (:license :licence) :writers ((setf asdf::system-license) (setf asdf::system-licence)) :readers (asdf::system-license asdf::system-licence) :name asdf::licence) (:writers (asdf::%set-system-source-file) :initargs (:source-file) :readers (asdf::%system-source-file) :name asdf::source-file) (:initargs (:defsystem-depends-on) :readers (asdf::system-defsystem-depends-on) :name asdf::defsystem-depends-on)) clos::load-defclass)) #1# 65064) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 8 19 6 11 29) #82=#A(t (12) (asdf::version-satisfies (asdf::component t) (asdf::c asdf::version) asdf::c asdf::version slot-boundp "Requested version ~S but component ~S has no version" warn t asdf::component-version #Y(asdf::version-satisfies nil nil (24 45 3 24 45 4 26 57 0 60 44 10 1 39 7 13 2 1 4 17 5 76 39 19 10 1 39 10 15 6 13 1 13 2 19 3 7 11 8 73 36 0 13 2 19 1 9 12 13 1 19 2 0 63 29) #82# #1# 65868) clos::install-method)) #1# 65868) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #83=#A(t (10) (asdf::asdf-version fmakunbound (notinline asdf::asdf-version) proclaim asdf::*asdf-version* #Y(asdf::asdf-version nil nil (26 11 4 73 29) #83# #1# 66263) si::fset function "Exported interface to the version of ASDF currently installed. A string.
You can compare this string with e.g.:
(ASDF:VERSION-SATISFIES (ASDF:ASDF-VERSION) \"2.345.67\")." si::set-documentation)) #1# 66263) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 28 12 19 2 29 15 0 15 30 15 31 19 3 32 1 0 73 29) #84=#A(t (33) (asdf::parse-version fmakunbound (notinline asdf::parse-version) proclaim string asdf::on-error stringp "~S: ~S is not a string" asdf::prev #:loop-across-list460 #:loop-across-index-459 #:loop-across-vector-458 asdf::c 0 length >= aref 1+ digit-char-p #\. eql t "~S: ~S doesn't follow asdf version numbering convention" parse-integer :separator "." asdf::split-string mapcar #Y(asdf::parse-version nil nil (24 45 4 25 40 2 77 46 5 26 10 1 16 6 40 19 10 0 39 12 13 0 15 7 15 0 13 1 20 3 23 40 2 75 73 39 166 58 60 124 75 45 8 77 13 3 9 0 9 0 46 9 46 10 46 11 46 12 57 13 61 2 11 77 10 2 16 14 51 4 75 51 5 13 3 13 4 19 2 15 39 4 35 0 1 13 2 13 3 19 2 16 51 1 10 3 16 17 51 3 13 1 19 1 18 40 20 13 1 1 19 17 20 39 12 10 5 39 8 13 5 1 19 17 20 76 76 39 5 75 73 36 6 10 1 51 5 35 0 0 10 1 73 39 6 13 1 19 1 18 36 6 11 21 73 36 6 62 43 4 43 1 63 40 19 10 0 39 12 13 0 15 22 15 0 13 1 20 3 23 40 2 75 73 39 17 33 23 12 13 1 14 24 15 25 19 3 26 12 19 2 27 29) #84# #1# 66481) si::fset function "Parse a version string as a series of natural integers separated by dots.
Return a (non-null) list of integers if the string is valid, NIL otherwise.
If on-error is error, warn, or designates a function of compatible signature,
the function is called with an explanation of what is wrong with the argument.
NB: ignores leading zeroes, and so doesn't distinguish between 2.003 and 2.3" si::set-documentation)) #1# 66481) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 9 19 6 14 29) #85=#A(t (15) (asdf::version-satisfies (string t) (asdf::cver asdf::version) asdf::cver asdf::version warn asdf::parse-version asdf::y asdf::x t > = #Y(asdf::bigger nil nil (24 45 8 24 45 7 26 10 0 76 39 6 11 9 73 38 54 10 1 76 39 5 75 73 38 45 10 1 4 12 10 0 4 12 19 2 10 39 6 11 9 73 38 27 10 1 4 12 10 0 4 12 19 2 11 73 39 13 10 1 5 12 10 0 5 12 32 2 18 2 29) #85# #1# 67509) #Y(asdf::version-satisfies nil nil (24 45 3 24 45 4 26 13 1 15 5 19 2 6 12 13 0 15 5 19 2 6 12 46 7 46 8 31 1 12 10 1 73 39 39 10 2 73 39 34 10 1 4 12 10 2 4 12 19 2 11 73 39 20 10 2 5 76 73 40 13 10 1 5 12 10 2 5 12 32 0 18 2 43 1 43 2 29) #85# #1# 67509) clos::install-method)) #1# 67509) #Y(si::bytecodes nil nil (1 0 16 1 8 76 52 0 1 2 16 1 1 3 52 2 1 4 16 5 1 6 16 7 15 4 1 18 12 19 2 19 1 20 16 5 1 21 16 7 15 20 1 31 12 19 2 19 1 32 16 5 1 33 16 7 15 32 1 45 12 19 2 19 1 46 16 5 1 47 16 7 15 46 1 71 12 19 2 19 1 46 73 29) #86=#A(t (72) (asdf::*link-initial-dword* si::*make-special asdf::*link-guid* #A(t (16) (1 20 2 0 0 0 0 0 192 0 0 0 0 0 0 70)) asdf::read-null-terminated-string fmakunbound (notinline asdf::read-null-terminated-string) proclaim asdf::s make-string-output-stream asdf::out asdf::code 0 read-byte zerop code-char write-char get-output-stream-string #Y(asdf::read-null-terminated-string nil nil (24 45 8 26 19 0 9 45 10 75 45 11 57 12 61 2 2 30 13 3 19 1 13 51 1 10 1 16 14 39 4 35 0 1 10 1 16 15 12 13 2 19 2 16 35 0 0 62 43 1 10 0 16 17 43 1 29) #86# #1# 67972) si::fset asdf::read-little-endian (notinline asdf::read-little-endian) asdf::bytes #:loop-limit463 asdf::i #:loop-sum-464 >= * ash + 1+ #Y(asdf::read-little-endian nil nil (24 45 8 25 40 3 9 4 46 22 26 58 60 75 9 0 13 1 46 23 46 24 8 0 45 25 57 12 61 2 2 45 13 2 13 3 19 2 26 39 4 35 0 1 13 1 13 6 19 1 13 12 9 8 13 2 19 2 27 17 28 12 19 2 29 51 1 10 2 16 30 51 2 35 0 0 10 1 73 36 4 62 73 43 1 43 2 63 29) #86# #1# 67972) asdf::parse-file-location-info (notinline asdf::parse-file-location-info) file-position asdf::remaining-offset asdf::network-volume-offset asdf::local-offset asdf::local-volume-offset asdf::fli-flags asdf::end-of-header asdf::total-length asdf::start logbitp asdf::strcat #Y(asdf::parse-file-location-info nil nil (24 45 8 26 13 0 19 1 34 12 13 0 19 1 20 12 13 0 19 1 20 12 13 0 19 1 20 12 13 0 19 1 20 12 13 0 19 1 20 12 13 0 19 1 20 12 13 0 19 1 20 12 46 35 46 36 46 37 46 38 46 39 46 40 46 41 46 42 10 3 16 14 76 73 39 75 9 0 10 3 17 43 39 16 13 8 13 0 13 5 19 2 29 12 19 2 34 38 24 9 1 10 3 17 43 39 16 13 8 13 0 13 6 9 20 19 3 29 12 19 2 34 13 8 19 1 4 12 13 8 13 0 13 7 19 2 29 12 19 2 34 13 8 19 1 4 12 19 2 44 43 8 29) #86# #1# 67972) asdf::parse-windows-shortcut (notinline asdf::parse-windows-shortcut) pathname :element-type (unsigned-byte 8) open #:g468 #:g469 end-of-file si::temp #Y(nil nil nil (24 45 55 26 35 1 0 29) #86# #1# 67972) si::*handler-clusters* = length make-array asdf::header read-sequence equalp asdf::flags asdf::buffer string map close :abort t #Y(asdf::parse-windows-shortcut nil nil (24 45 48 26 13 0 14 49 15 50 19 3 51 45 8 64 239 57 52 60 223 75 45 53 57 12 61 1 206 15 54 34 56 3 6 1 12 11 57 3 48 57 13 3 19 1 20 12 14 0 19 2 58 39 26 11 2 16 59 12 19 1 60 45 61 13 0 13 4 19 2 62 13 0 11 2 17 63 43 1 73 39 148 13 3 19 1 20 45 64 13 4 9 76 19 2 34 9 0 10 0 17 43 39 29 13 4 9 2 19 2 20 45 59 13 5 13 0 13 5 19 1 34 12 19 2 29 12 19 2 34 43 1 9 1 10 0 17 43 39 8 13 4 19 1 32 38 81 9 2 10 0 17 43 39 29 13 4 9 2 19 2 20 45 59 13 5 13 0 13 5 19 1 34 12 19 2 29 12 19 2 34 43 1 9 3 10 0 17 43 73 39 36 13 4 9 2 19 2 20 45 59 13 0 19 1 60 45 65 13 0 13 6 19 2 62 15 66 33 15 12 13 0 19 3 67 43 2 43 1 36 2 44 1 75 73 36 2 62 73 43 1 63 69 10 0 39 6 13 0 19 1 68 70 65 10 0 39 10 13 0 14 69 14 70 19 3 68 66 43 1 29) #86# #1# 67972))) #1# 67972) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #87=#A(t (9) (asdf::make-defined-systems-table fmakunbound (notinline asdf::make-defined-systems-table) proclaim :test equal make-hash-table #Y(asdf::make-defined-systems-table nil nil (26 14 4 15 5 19 2 6 29) #87# #1# 70966) si::fset)) #1# 70966) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 6 19 0 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (asdf::*defined-systems* si::*make-special boundp asdf::make-defined-systems-table variable "This is a hash table whose keys are strings, being the
names of the systems, and whose values are pairs, the first
element of which is a universal-time indicating when the
system definition was last updated, and the second element
of which is a system object." si::set-documentation)) #1# 71140) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 1 0 73 29) #88=#A(t (17) (asdf::coerce-name fmakunbound (notinline asdf::coerce-name) proclaim asdf::name #:g472 asdf::component typep asdf::component-name symbol symbol-name string-downcase string "~@<Invalid component designator: ~3i~_~A~@:>" asdf::sysdef-error #Y(asdf::coerce-name nil nil (24 45 4 26 10 0 45 5 13 0 15 6 19 2 7 39 8 13 1 19 1 8 38 41 13 0 15 9 19 2 7 39 11 10 1 16 10 12 19 1 11 38 22 13 0 15 12 19 2 7 39 6 10 1 73 38 8 15 13 13 1 19 2 14 43 1 29) #88# #1# 71461) si::fset)) #1# 71461) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #89=#A(t (10) (asdf::system-registered-p fmakunbound (notinline asdf::system-registered-p) proclaim asdf::name asdf::coerce-name asdf::*defined-systems* gethash #Y(asdf::system-registered-p nil nil (24 45 4 26 13 0 19 1 5 12 14 6 19 2 7 29) #89# #1# 71701) si::fset)) #1# 71701) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 21 12 19 2 22 1 0 73 29) #90=#A(t (23) (asdf::registered-systems fmakunbound (notinline asdf::registered-systems) proclaim asdf::*defined-systems* #:g488 #:loop-hashtab-486 asdf::system #:loop-hash-val-temp-493 #:loop-it-489 si::hash-table-iterator #:loop-hashtab-next-487 #:loop-list-head494 #:loop-list-tail495 0 #:loop-hash-val-temp-490 #:loop-hash-key-temp-491 #:loop-hash-predicate-var-492 #22# asdf::coerce-name rplacd #Y(asdf::registered-systems nil nil (26 58 60 124 77 77 77 14 4 77 46 5 46 6 46 7 46 8 46 9 10 3 16 10 45 11 75 6 1 45 12 10 0 45 13 57 14 61 2 2 72 13 3 20 0 23 47 2 15 47 1 16 45 17 10 0 39 9 10 2 51 8 10 1 51 11 10 0 51 7 43 3 76 39 4 35 0 1 10 5 45 18 10 0 4 10 0 5 51 0 10 0 51 7 43 1 13 1 13 6 19 1 19 6 1 51 1 17 20 35 0 0 10 2 5 73 36 9 62 73 43 2 43 1 43 5 63 29) #90# #1# 71787) si::fset)) #1# 71787) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 19 12 19 2 20 1 0 73 29) #91=#A(t (21) (asdf::register-system fmakunbound (notinline asdf::register-system) proclaim asdf::system #:g506 typep si::do-check-type asdf::component-name asdf::name #:g508 string "~&~@<; ~@;Registering ~3i~_~A~@:>~%" asdf::asdf-message asdf::*defined-systems* gethash eq get-universal-time si::hash-set #Y(asdf::register-system nil nil (24 45 4 26 10 0 45 5 13 0 15 4 19 2 6 76 39 13 13 0 15 4 77 15 4 19 4 7 51 1 43 1 13 0 19 1 8 45 9 10 0 45 10 13 0 15 11 19 2 6 76 39 13 13 0 15 11 77 15 9 19 4 7 51 1 43 1 15 12 13 1 19 2 13 13 1 13 0 14 14 19 2 15 5 17 16 76 73 39 16 13 0 14 14 19 0 17 12 10 1 3 12 19 3 18 43 1 29) #91# #1# 71928) si::fset)) #1# 71928) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #92=#A(t (13) (asdf::clear-system fmakunbound (notinline asdf::clear-system) proclaim asdf::name asdf::coerce-name asdf::*defined-systems* remhash #Y(asdf::clear-system nil nil (24 45 4 26 13 0 19 1 5 12 11 6 17 7 29) #92# #1# 72295) si::fset function "Clear the entry for a system in the database of systems previously loaded.
Note that this does NOT in any way cause the code of the system to be unloaded." si::set-documentation)) #1# 72295) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #93=#A(t (19) (asdf::map-systems fmakunbound (notinline asdf::map-systems) proclaim asdf::fn asdf::_ asdf::datum #:g515 #:g516 si::dm-too-few-arguments asdf::def #Y(nil nil nil (24 45 5 24 45 6 26 10 0 45 7 10 0 45 8 10 0 76 39 6 13 1 19 1 9 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 10 13 6 13 0 20 1 23 43 4 29) #93# #1# 72726) asdf::*defined-systems* maphash #Y(asdf::map-systems nil nil (24 45 4 26 34 11 12 11 12 17 13 29) #93# #1# 72726) si::fset function "Apply FN to each defined system.

FN should be a function of one argument. It will be
called with an object of type asdf:system." si::set-documentation)) #1# 72726) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*system-definition-search-functions* si::*make-special boundp)) #1# 73108) #Y(si::bytecodes nil nil (15 0 14 1 19 2 2 12 1 5 12 15 6 19 2 7 12 19 2 8 52 1 73 29) #94=#A(t (9) (asdf::contrib-sysdef-search asdf::*system-definition-search-functions* remove asdf::x member #Y(nil nil nil (24 45 3 26 13 0 14 1 19 2 4 29) #94# #1# 73287) (asdf::sysdef-central-registry-search asdf::sysdef-source-registry-search asdf::sysdef-find-asdf) remove-if append)) #1# 73287) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #95=#A(t (14) (asdf::search-for-system-definition fmakunbound (notinline asdf::search-for-system-definition) proclaim asdf::system asdf::coerce-name asdf::name asdf::x #Y(nil nil nil (24 45 7 26 13 0 13 1 20 1 23 29) #95# #1# 74003) asdf::find-system-if-being-defined asdf::*system-definition-search-functions* some #Y(asdf::search-for-system-definition nil nil (24 45 4 26 13 0 19 1 5 45 6 34 8 12 43 1 15 9 11 10 3 12 19 2 11 29) #95# #1# 74003) si::fset)) #1# 74003) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*central-registry* si::*make-special boundp variable "A list of 'system directory designators' ASDF uses to find systems.

A 'system directory designator' is a pathname or an expression
which evaluates to a pathname. For example:

    (setf asdf:*central-registry*
          (list '*default-pathname-defaults*
                #p\"/home/me/cl/systems/\"
                #p\"/usr/share/common-lisp/systems/\"))

This is for backward compatibilily.
Going forward, we recommend new users should be using the source-registry.
" si::set-documentation)) #1# 74224) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 24 12 19 2 25 1 0 73 29) #96=#A(t (26) (asdf::featurep fmakunbound (notinline asdf::featurep) proclaim asdf::x *features* asdf::features atom member t :not eq (null (cddr asdf::x)) si::assert-failure cddr cadr :or #Y(nil nil nil (24 45 4 26 13 0 13 1 19 2 0 29) #96# #1# 74727) some :and #Y(nil nil nil (24 45 4 26 13 0 13 1 19 2 0 29) #96# #1# 74727) every "Malformed feature specification ~S" error #Y(asdf::featurep nil nil (24 45 4 25 40 3 14 5 46 6 26 10 1 16 7 39 16 13 1 13 0 19 2 8 73 39 4 11 9 73 38 88 14 10 10 1 4 17 11 39 30 38 6 15 12 19 1 13 10 1 16 14 76 76 40 -12 10 1 16 15 12 13 0 19 2 0 76 73 38 50 14 16 10 1 4 17 11 39 13 34 17 12 10 1 5 12 19 2 18 38 29 14 19 10 1 4 17 11 39 13 34 20 12 10 1 5 12 19 2 21 38 8 15 22 13 1 19 2 23 29) #96# #1# 74727) si::fset)) #1# 74727) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #97=#A(t (8) (asdf::os-unix-p fmakunbound (notinline asdf::os-unix-p) proclaim (:or :unix :cygwin :darwin) asdf::featurep #Y(asdf::os-unix-p nil nil (26 15 4 19 1 5 29) #97# #1# 75155) si::fset)) #1# 75155) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #98=#A(t (9) (asdf::os-windows-p fmakunbound (notinline asdf::os-windows-p) proclaim asdf::os-unix-p (:or :win32 :windows :mswindows :mingw32) asdf::featurep #Y(asdf::os-windows-p nil nil (26 19 0 4 76 73 39 6 15 5 19 1 6 29) #98# #1# 75220) si::fset)) #1# 75220) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 27 12 19 2 28 1 0 73 29) #99=#A(t (29) (asdf::probe-asd fmakunbound (notinline asdf::probe-asd) proclaim asdf::name asdf::defaults asdf::directory-pathname-p ".asd" asdf::strcat asdf::subpathname asdf::probe-file* asdf::file asdf::os-windows-p :defaults :version :newest :case :local :name ".asd" :type "lnk" make-pathname asdf::shortcut asdf::parse-windows-shortcut asdf::target pathname #Y(asdf::probe-asd nil nil (24 45 4 24 45 5 26 58 60 107 13 1 19 1 6 73 39 98 13 1 13 2 15 7 19 2 8 12 19 2 9 12 19 1 10 45 11 10 0 39 6 10 0 73 36 1 43 1 19 0 12 73 39 62 14 13 13 1 14 14 14 15 14 16 14 17 14 18 13 2 15 19 19 2 8 12 14 20 15 21 19 10 22 45 23 13 0 19 1 10 73 39 21 13 0 19 1 24 45 25 10 0 73 39 7 10 0 16 26 36 2 43 1 43 1 63 29) #99# #1# 75326) si::fset)) #1# 75326) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 54 12 19 2 55 1 0 73 29) #100=#A(t (56) (asdf::sysdef-central-registry-search fmakunbound (notinline asdf::sysdef-central-registry-search) proclaim asdf::system asdf::coerce-name asdf::to-replace asdf::to-remove asdf::name asdf::*central-registry* si::%dolist-var asdf::dir eval asdf::defaults asdf::directory-pathname-p asdf::probe-asd asdf::file #:g551 #:g552 0 :name asdf::remove-entry-from-registry :function si::temp #Y(nil nil nil (27 45 23 10 0 51 2 35 1 0 29) #100# #1# 76033) :report-function stream "Remove entry from *central-registry* and continue" write-string #Y(nil nil nil (24 45 26 26 15 27 13 0 19 2 28 29) #100# #1# 76033) si::make-restart asdf::coerce-entry-to-directory #Y(nil nil nil (27 45 23 10 0 51 2 35 1 1 29) #100# #1# 76033) asdf::s "~@<Coerce entry to ~a, replace ~a and continue.~@:>" asdf::ensure-directory-pathname format #Y(nil nil nil (24 45 33 26 13 0 15 34 13 4 19 1 35 12 13 5 19 4 36 29) #100# #1# 76033) si::*restart-clusters* *print-circle* "~@<While searching for system ~S: ~3i~_~S evaluated to ~S which is not a directory.~@:>" asdf::message error #Y(nil nil nil (26 13 4 10 8 3 51 8 73 29) #100# #1# 76033) apply #Y(nil nil nil (26 13 4 13 3 19 1 35 3 12 10 9 3 51 9 73 29) #100# #1# 76033) remove asdf::pair asdf::current asdf::new position subseq 1+ append #Y(asdf::sysdef-central-registry-search nil nil (24 45 4 26 13 0 19 1 5 12 77 77 46 6 46 7 46 8 64 184 58 60 180 11 9 45 10 75 45 11 38 162 10 1 4 51 0 10 0 16 12 45 13 10 0 39 140 13 0 19 1 14 39 23 13 4 13 0 19 2 15 45 16 10 0 39 6 10 0 73 36 4 43 1 38 111 57 17 60 107 75 45 18 57 19 61 2 75 84 14 20 15 21 14 22 34 24 12 14 25 34 29 12 19 6 30 12 14 20 15 31 14 22 34 32 12 14 25 34 37 12 19 6 30 6 2 12 11 38 3 48 38 75 48 39 77 15 40 13 10 13 4 13 3 19 5 36 45 41 13 0 19 1 42 43 1 44 1 36 2 44 1 34 43 12 13 1 19 2 44 36 2 34 45 12 13 1 19 2 44 36 2 62 43 1 63 43 1 10 1 5 51 1 10 1 40 -164 75 73 43 2 63 65 10 1 45 10 75 45 11 38 20 10 1 4 51 0 13 0 14 9 19 2 46 52 9 10 1 5 51 1 10 1 40 -22 43 2 10 2 45 10 75 45 47 38 63 10 1 4 51 0 10 0 4 45 48 10 1 5 45 49 13 1 14 9 19 2 50 45 50 14 9 9 0 13 0 19 3 51 12 10 1 6 1 12 14 9 10 0 16 52 12 19 2 51 12 19 3 53 52 9 43 3 10 1 5 51 1 10 1 40 -65 43 2 66 43 3 29) #100# #1# 76033) si::fset)) #1# 76033) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 22 12 19 2 23 1 0 73 29) #101=#A(t (24) (asdf::make-temporary-package fmakunbound (notinline asdf::make-temporary-package) proclaim asdf::counter #:g571 #:g572 0 error si::temp #Y(nil nil nil (24 45 9 26 10 0 51 2 35 1 0 29) #101# #1# 78106) si::*handler-clusters* "~A~D" :asdf format :use (:cl :asdf) make-package condition #Y(asdf::try nil nil (24 45 4 26 57 5 60 62 75 45 6 57 7 61 1 36 15 8 34 10 3 6 1 12 11 11 3 48 11 77 15 12 14 13 13 3 19 4 14 12 14 15 15 16 19 3 17 36 2 44 1 10 1 45 18 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #101# #1# 78106) package + #Y(asdf::make-temporary-package nil nil (26 30 1 19 8 0 45 4 13 0 32 1 18 1 45 20 38 18 13 1 9 1 19 2 21 51 1 13 1 32 2 18 1 51 0 10 0 39 -20 10 0 73 43 2 43 1 29) #101# #1# 78106) si::fset)) #1# 78106) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #102=#A(t (20) (asdf::safe-file-write-date fmakunbound (notinline asdf::safe-file-write-date) proclaim pathname asdf::probe-file* #:g577 #:g578 0 error si::temp #Y(nil nil nil (24 45 10 26 10 0 51 2 35 1 0 29) #102# #1# 78416) si::*handler-clusters* file-write-date condition asdf::*asdf-verbose* "~@<Missing FILE-WRITE-DATE for ~S, treating it as zero.~@:>" warn #Y(asdf::safe-file-write-date nil nil (24 45 4 26 10 0 39 58 13 0 19 1 5 39 51 57 6 60 47 75 45 7 57 8 61 1 22 15 9 34 11 3 6 1 12 11 12 3 48 12 10 3 16 13 36 2 44 1 10 1 45 14 77 13 0 72 2 43 1 36 2 62 43 1 63 73 40 19 10 0 39 3 11 15 39 8 15 16 13 0 19 2 17 8 0 73 29) #102# #1# 78416) si::fset)) #1# 78416) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 4 19 6 9 29) #103=#A(t (10) (asdf::find-system (null) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p "~@<NIL is not a valid system name~@:>" asdf::sysdef-error #Y(asdf::find-system nil nil (24 45 3 25 40 3 14 4 46 5 26 10 0 73 39 6 15 6 19 1 7 29) #103# #1# 79213) clos::install-method)) #1# 79213) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 4 19 6 8 29) #104=#A(t (9) (asdf::find-system (t) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p asdf::coerce-name #Y(asdf::find-system nil nil (24 45 3 25 40 3 14 4 46 5 26 13 1 19 1 6 12 13 0 19 2 0 29) #104# #1# 79391) clos::install-method)) #1# 79391) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*systems-being-defined* si::*make-special boundp variable "A hash-table of systems currently being defined keyed by name, or NIL" si::set-documentation)) #1# 79488) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #105=#A(t (10) (asdf::find-system-if-being-defined fmakunbound (notinline asdf::find-system-if-being-defined) proclaim asdf::name asdf::*systems-being-defined* asdf::coerce-name gethash #Y(asdf::find-system-if-being-defined nil nil (24 45 4 26 11 5 73 39 12 13 0 19 1 6 12 14 5 19 2 7 29) #105# #1# 79600) si::fset)) #1# 79600) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #106=#A(t (11) (asdf::call-with-system-definitions fmakunbound (notinline asdf::call-with-system-definitions) proclaim asdf::thunk asdf::*systems-being-defined* :test equal make-hash-table #Y(asdf::call-with-system-definitions nil nil (24 45 4 26 11 5 39 8 13 0 20 0 23 38 17 14 6 15 7 19 2 8 48 5 13 0 20 0 23 44 1 29) #106# #1# 79736) si::fset)) #1# 79736) #Y(si::bytecodes nil nil (15 0 1 12 12 14 13 9 2 19 4 14 1 0 73 29) #107=#A(t (15) (asdf::with-system-definitions #:g581 #:g580 #:g582 si::dm-too-few-arguments #:g583 #:g584 asdf::body si::dm-too-many-arguments asdf::call-with-system-definitions function lambda #Y(asdf::with-system-definitions nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 2 45 7 10 1 39 6 13 5 19 1 8 15 9 15 10 15 11 77 10 0 7 3 6 2 6 2 73 29) #107# #1# 79931) t si::fset)) #1# 79931) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 30 12 19 2 31 1 0 73 29) #108=#A(t (32) (asdf::load-sysdef fmakunbound (notinline asdf::load-sysdef) proclaim asdf::name pathname asdf::make-temporary-package package error condition asdf::load-system-definition-error :name :pathname :condition #Y(nil nil nil (24 45 9 26 15 10 14 11 13 3 14 12 13 2 14 13 13 0 19 7 8 29) #108# #1# 80047) si::*handler-clusters* translate-logical-pathname asdf::pathname-directory-pathname asdf::detect-encoding asdf::encoding-external-format asdf::external-format *default-pathname-defaults* *package* "~&~@<; ~@;Loading system definition from ~A into ~A~@:>~%" asdf::asdf-message :external-format load delete-package #Y(nil nil nil (26 19 0 6 45 7 64 67 15 8 34 14 3 6 1 12 11 15 3 48 15 13 0 13 1 19 1 16 12 19 1 17 12 13 1 19 1 18 12 19 1 19 12 46 20 49 21 49 22 15 23 13 2 13 1 19 3 24 13 2 14 25 13 0 19 3 26 43 1 44 2 44 1 65 10 0 16 27 66 43 1 29) #108# #1# 80047) asdf::call-with-system-definitions #Y(asdf::load-sysdef nil nil (24 45 4 24 45 5 26 34 28 12 19 1 29 29) #108# #1# 80047) si::fset)) #1# 80047) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 28 12 19 2 29 15 0 15 30 15 31 19 3 32 1 0 73 29) #109=#A(t (33) (asdf::locate-system fmakunbound (notinline asdf::locate-system) proclaim asdf::name asdf::coerce-name asdf::system-registered-p asdf::in-memory asdf::previous asdf::system typep asdf::previous-time asdf::search-for-system-definition asdf::found asdf::found-system (or pathname string) pathname asdf::system-source-file t asdf::foundp #:g590 (or null pathname asdf::system) si::do-check-type asdf::resolve-symlinks* asdf::absolute-pathname-p asdf::ensure-pathname-absolute asdf::%set-system-source-file equal #Y(asdf::locate-system nil nil (24 45 4 26 13 0 19 1 5 45 4 13 0 19 1 6 45 7 10 0 5 45 8 13 0 15 9 19 2 10 39 3 10 0 45 8 10 2 4 45 11 13 4 19 1 12 45 13 13 0 15 9 19 2 10 39 3 10 0 45 14 13 1 15 15 19 2 10 39 5 10 1 16 16 40 21 10 0 39 6 13 0 19 1 17 40 10 10 3 39 6 13 3 19 1 17 45 16 10 1 40 7 10 0 40 3 10 4 39 3 11 18 45 19 10 3 45 20 13 0 15 21 19 2 10 76 39 13 13 0 15 21 77 15 13 19 4 22 51 4 43 1 10 0 73 39 77 13 1 19 1 23 51 1 10 1 39 7 13 1 19 1 24 76 39 19 13 1 19 1 25 51 1 10 2 39 8 13 1 13 2 19 2 26 10 5 39 12 13 5 19 1 17 12 10 1 17 27 76 39 11 13 1 13 5 19 2 26 75 51 4 13 0 13 2 13 1 13 5 13 4 72 5 43 9 29) #109# #1# 81129) si::fset function "Given a system NAME designator, try to locate where to load the system from.
Returns five values: FOUNDP FOUND-SYSTEM PATHNAME PREVIOUS PREVIOUS-TIME
FOUNDP is true when a system was found,
either a new unregistered one or a previously registered one.
FOUND-SYSTEM when not null is a SYSTEM object that may be REGISTER-SYSTEM'ed as is
PATHNAME when not null is a path from where to load the system,
either associated with FOUND-SYSTEM, or with the PREVIOUS system.
PREVIOUS when not null is a previously loaded SYSTEM object of same name.
PREVIOUS-TIME when not null is the time at which the PREVIOUS system was loaded." si::set-documentation)) #1# 81129) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 45 12 14 4 19 6 46 29) #110=#A(t (47) (asdf::find-system (string) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p 0 #:g617 #:g618 :name asdf::reinitialize-source-registry-and-retry :function si::temp #Y(nil nil nil (27 45 12 10 0 51 2 35 1 0 29) #110# #1# 83091) :report-function asdf::s "~@<Retry finding system ~A after reinitializing the source-registry.~@:>" format #Y(nil nil nil (24 45 15 26 13 0 15 16 13 7 19 3 17 29) #110# #1# 83091) si::make-restart si::*restart-clusters* asdf::locate-system asdf::previous-time asdf::previous pathname asdf::found-system asdf::foundp asdf::register-system asdf::safe-file-write-date get-universal-time < asdf::load-sysdef asdf::system-registered-p asdf::in-memory #:g621 #:g622 rplaca asdf::missing-component :requires error asdf::initialize-source-registry #Y(nil nil nil (26 19 0 40 29) #110# #1# 83091) apply #Y(nil nil nil (26 58 60 197 57 6 61 1 1 57 7 60 182 75 45 8 57 6 61 1 160 14 9 15 10 14 11 34 13 12 14 14 34 18 12 19 6 19 6 1 12 11 20 3 48 20 13 6 19 1 21 47 4 22 47 3 23 47 2 24 47 1 25 45 26 10 1 39 4 10 3 76 39 6 13 1 19 1 27 10 2 39 21 10 4 76 40 16 13 4 13 2 19 1 28 12 19 0 29 12 19 3 30 39 8 13 11 13 2 19 2 31 13 11 19 1 32 45 33 10 0 39 34 10 3 39 24 10 0 45 34 13 4 19 1 28 45 35 13 1 10 0 17 36 10 0 43 1 43 1 10 0 5 73 38 15 10 11 73 39 10 15 37 14 38 13 12 19 3 39 36 10 43 1 43 5 36 2 44 1 34 41 12 13 1 19 2 42 36 2 62 43 1 63 35 0 0 62 73 63 29) #110# #1# 83091) asdf::call-with-system-definitions #Y(asdf::find-system nil nil (24 45 3 25 40 3 14 4 46 5 26 34 43 12 19 1 44 29) #110# #1# 83091) clos::install-method)) #1# 83091) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 19 12 19 2 20 1 0 73 29) #111=#A(t (21) (asdf::find-system-fallback fmakunbound (notinline asdf::find-system-fallback) proclaim asdf::requested asdf::fallback asdf::keys (t :source-file) asdf::source-file asdf::coerce-name equal asdf::*defined-systems* gethash asdf::registered make-instance asdf::system :name :source-file apply #Y(asdf::find-system-fallback nil nil (24 45 4 24 45 5 27 45 6 28 7 22 40 2 77 46 8 13 2 19 1 9 51 2 13 3 19 1 9 51 3 13 3 10 2 17 10 73 39 35 13 2 14 11 19 2 12 5 45 13 10 0 73 40 18 15 14 15 15 14 16 13 3 14 17 13 1 13 2 19 7 18 43 1 29) #111# #1# 84605) si::fset)) #1# 84605) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #112=#A(t (11) (asdf::sysdef-find-asdf fmakunbound (notinline asdf::sysdef-find-asdf) proclaim asdf::name "asdf" :version asdf::*asdf-version* asdf::find-system-fallback #Y(asdf::sysdef-find-asdf nil nil (24 45 4 26 13 0 15 5 14 6 14 7 19 4 8 29) #112# #1# 85015) si::fset)) #1# 85015) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #113=#A(t (10) (asdf::find-component (string t) (asdf::base asdf::path) asdf::base asdf::path asdf::find-system asdf::s #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 13 1 77 19 2 5 45 6 10 0 73 39 8 13 0 13 1 19 2 0 43 1 29) #113# #1# 85183) t clos::install-method)) #1# 85183) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #114=#A(t (9) (asdf::find-component (symbol t) (asdf::base asdf::path) asdf::base asdf::path asdf::coerce-name #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 10 1 39 14 13 1 19 1 5 12 13 0 19 2 0 38 15 10 0 39 9 13 0 77 19 2 0 38 3 75 73 29) #114# #1# 85410) t clos::install-method)) #1# 85410) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #115=#A(t (8) (asdf::find-component (cons t) (asdf::base asdf::path) asdf::base asdf::path #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 10 1 4 12 10 1 5 12 10 0 3 12 19 2 0 29) #115# #1# 85572) t clos::install-method)) #1# 85572) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #116=#A(t (13) (asdf::find-component (asdf::module string) (asdf::module asdf::name) asdf::module asdf::name asdf::components-by-name slot-boundp asdf::compute-module-components-by-name asdf::module-components-by-name gethash #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 13 1 1 5 17 6 76 39 6 13 1 19 1 7 13 0 13 1 19 1 8 12 19 2 9 12 72 1 29) #116# #1# 85672) t clos::install-method)) #1# 85672) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #117=#A(t (9) (asdf::find-component (asdf::component symbol) (asdf::component asdf::name) asdf::component asdf::name asdf::coerce-name #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 10 0 39 14 13 1 13 0 19 1 5 12 19 2 0 38 4 10 1 73 29) #117# #1# 85933) t clos::install-method)) #1# 85933) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #118=#A(t (8) (asdf::find-component (asdf::module cons) (asdf::module asdf::name) asdf::module asdf::name #Y(asdf::find-component nil nil (24 45 3 24 45 4 26 13 1 10 0 4 12 19 2 0 12 10 0 5 12 19 2 0 29) #118# #1# 86079) t clos::install-method)) #1# 86079) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::source-file (asdf::component) ((:initform nil :initargs (:type) :writers ((setf asdf::source-file-explicit-type)) :readers (asdf::source-file-explicit-type) :name type)) clos::load-defclass)) #1# 86202) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file (asdf::source-file) ((:initform "lisp" :name type)) clos::load-defclass)) #1# 86341) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file.cl (asdf::cl-source-file) ((:initform "cl" :name type)) clos::load-defclass)) #1# 86410) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file.lsp (asdf::cl-source-file) ((:initform "lsp" :name type)) clos::load-defclass)) #1# 86482) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::c-source-file (asdf::source-file) ((:initform "c" :name type)) clos::load-defclass)) #1# 86556) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::java-source-file (asdf::source-file) ((:initform "java" :name type)) clos::load-defclass)) #1# 86620) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::static-file (asdf::source-file) clos::load-defclass)) #1# 86690) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::doc-file (asdf::static-file) clos::load-defclass)) #1# 86730) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::html-file (asdf::doc-file) ((:initform "html" :name type)) clos::load-defclass)) #1# 86767) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #119=#A(t (9) (asdf::source-file-type (asdf::module asdf::module) (asdf::component asdf::s) asdf::component asdf::s :directory #Y(asdf::source-file-type nil nil (24 45 3 24 45 4 26 11 5 73 29) #119# #1# 86827) t clos::install-method)) #1# 86827) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #120=#A(t (9) (asdf::source-file-type (asdf::source-file asdf::module) (asdf::component asdf::s) asdf::component asdf::s asdf::source-file-explicit-type #Y(asdf::source-file-type nil nil (24 45 3 24 45 4 26 13 1 19 1 5 29) #120# #1# 86938) t clos::install-method)) #1# 86938) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #121=#A(t (16) (asdf::component-relative-pathname (asdf::component) (asdf::component) asdf::component asdf::relative-pathname slot-value asdf::component-name :type asdf::component-system asdf::source-file-type :defaults asdf::component-parent-pathname asdf::coerce-pathname #Y(asdf::component-relative-pathname nil nil (24 45 3 26 13 0 1 4 17 5 73 40 6 13 0 19 1 6 12 14 7 13 0 13 0 19 1 8 12 19 2 9 12 14 10 13 0 19 1 11 12 19 5 12 29) #121# #1# 87070) t clos::install-method)) #1# 87070) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 15 3 14 4 1 8 12 1 9 7 3 12 14 4 1 10 12 1 11 7 3 12 1 12 6 6 12 77 19 4 13 29) #122=#A(t (14) (asdf::operation (:writers ((setf asdf::operation-forced)) :readers (asdf::operation-forced) :initargs (:force) :initform nil :name asdf::forced) (:writers ((setf asdf::operation-forced-not)) :readers (asdf::operation-forced-not) :initargs (:force-not) :initform nil :name asdf::forced-not) (:writers ((setf asdf::operation-original-initargs)) :readers (asdf::operation-original-initargs) :initargs (:original-initargs) :initform nil :name asdf::original-initargs) :initfunction :test equal make-hash-table #Y(nil nil nil (26 14 5 15 6 19 2 7 29) #122# #1# 87357) (:writers ((setf asdf::operation-visited-nodes)) :readers (asdf::operation-visited-nodes) :initform (make-hash-table :test 'equal) :name asdf::visited-nodes) #Y(nil nil nil (26 14 5 15 6 19 2 7 29) #122# #1# 87357) (:writers ((setf asdf::operation-visiting-nodes)) :readers (asdf::operation-visiting-nodes) :initform (make-hash-table :test 'equal) :name asdf::visiting-nodes) (:writers ((setf asdf::operation-parent)) :readers (asdf::operation-parent) :initargs (:parent) :initform nil :name asdf::parent) clos::load-defclass)) #1# 87357) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 16 19 6 19 29) #123=#A(t (20) (print-object (asdf::operation t) (asdf::o stream) asdf::o stream #:g648 #:g649 0 error si::temp #Y(nil nil nil (24 45 9 26 10 0 51 2 35 1 0 29) #123# #1# 88512) si::*handler-clusters* asdf::operation-original-initargs prin1 condition #Y(si::.print-unreadable-object-body. nil nil (26 57 5 60 55 75 45 6 57 7 61 1 29 15 8 34 10 3 6 1 12 11 11 3 48 11 13 4 19 1 12 12 13 3 19 2 13 36 2 44 1 10 1 45 14 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #123# #1# 88512) t si::print-unreadable-object-function #Y(print-object nil nil (24 45 3 24 45 4 26 30 1 15 13 2 13 1 14 16 14 16 32 0 12 19 5 17 43 1 29) #123# #1# 88512) clos::install-method)) #1# 88512) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 20 12 14 21 19 6 22 29) #124=#A(t (23) (shared-initialize (:after) (asdf::operation t) (asdf::operation asdf::slot-names &key asdf::force asdf::force-not &allow-other-keys) asdf::operation asdf::slot-names (t :force-not :force) asdf::force asdf::force-not asdf::operation-forced consp #:g675 asdf::coerce-name mapcar #:g676 (setf asdf::operation-forced) asdf::operation-forced-not #:g677 #:g678 (setf asdf::operation-forced-not) #Y(shared-initialize nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 13 3 19 1 9 16 10 39 31 10 3 45 11 33 12 12 13 4 19 1 9 12 19 2 13 45 14 13 0 13 1 33 15 18 2 43 1 43 1 13 3 19 1 16 16 10 39 31 10 3 45 17 33 12 12 13 4 19 1 16 12 19 2 13 45 18 13 0 13 1 33 19 18 2 43 1 43 1 0 29) #124# #1# 88693) t clos::install-method)) #1# 88693) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #125=#A(t (10) (asdf::node-for fmakunbound (notinline asdf::node-for) proclaim asdf::o asdf::c class-of class-name #Y(asdf::node-for nil nil (24 45 4 24 45 5 26 10 1 16 6 12 19 1 7 12 10 0 3 73 29) #125# #1# 89284) si::fset)) #1# 89284) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #126=#A(t (9) (asdf::operation-ancestor (asdf::operation) (asdf::operation) asdf::operation asdf::operation-parent asdf::it #Y(asdf::operation-ancestor nil nil (24 45 3 26 13 0 19 1 4 45 5 10 0 39 8 13 0 19 1 0 38 4 10 1 73 43 1 29) #126# #1# 89346) t clos::install-method)) #1# 89346) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 27 12 19 2 28 15 0 15 29 15 30 19 3 31 1 0 73 29) #127=#A(t (32) (asdf::make-sub-operation fmakunbound (notinline asdf::make-sub-operation) proclaim asdf::c asdf::o asdf::dep-c asdf::dep-o asdf::operation-original-initargs copy-list asdf::args :force getf asdf::force-p asdf::component-parent eql t #:g684 #:g685 si::put-f #:g683 make-instance :parent :original-initargs apply type-of subtypep #Y(asdf::make-sub-operation nil nil (24 45 4 24 45 5 24 45 6 24 45 7 26 13 2 19 1 8 16 9 45 10 13 0 14 11 19 2 12 45 13 13 5 19 1 14 76 39 16 13 3 19 1 14 76 39 8 13 5 10 3 17 15 76 39 58 13 0 11 16 17 15 39 31 11 11 45 17 75 45 18 13 3 13 0 13 1 19 3 19 45 20 10 0 51 4 10 1 43 1 43 1 43 1 15 21 13 2 14 22 13 4 14 23 13 1 13 1 19 7 24 38 35 10 4 16 25 12 13 2 19 2 26 39 6 10 4 73 38 18 15 21 13 2 14 22 13 4 14 23 13 1 13 1 19 7 24 43 2 29) #127# #1# 89487) si::fset function "C is a component, O is an operation, DEP-C is another
component, and DEP-O, confusingly enough, is an operation
class specifier, not an operation." si::set-documentation)) #1# 89487) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 10 19 6 13 29) #128=#A(t (14) (asdf::visit-component (asdf::operation asdf::component t) (asdf::o asdf::c asdf::data) asdf::o asdf::c asdf::data asdf::component-visited-p asdf::node-for asdf::operation-ancestor asdf::operation-visited-nodes t si::hash-set #Y(asdf::visit-component nil nil (24 45 3 24 45 4 24 45 5 26 13 2 13 1 19 2 6 76 73 39 28 13 2 13 1 19 2 7 12 13 2 19 1 8 12 19 1 9 12 14 10 10 0 3 12 19 3 11 29) #128# #1# 90387) clos::install-method)) #1# 90387) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #129=#A(t (12) (asdf::component-visited-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::node-for asdf::operation-ancestor asdf::operation-visited-nodes gethash #Y(asdf::component-visited-p nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 12 13 1 19 1 6 12 19 1 7 12 19 2 8 29) #129# #1# 90617) t clos::install-method)) #1# 90617) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #130=#A(t (9) (#131=(setf asdf::visiting-component) (t t t) (asdf::new-value asdf::operation asdf::component) asdf::new-value asdf::operation asdf::component #Y(#131# nil nil (24 45 3 24 45 4 24 45 5 26 10 2 73 29) #130# #1# 90767) t clos::install-method)) #1# 90767) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 11 19 6 15 29) #132=#A(t (16) (#133=(setf asdf::visiting-component) (t asdf::operation asdf::component) (asdf::new-value asdf::o asdf::c) asdf::new-value asdf::o asdf::c asdf::node-for asdf::operation-ancestor asdf::a asdf::node asdf::operation-visiting-nodes t si::hash-set remhash #Y(#133# nil nil (24 45 3 24 45 4 24 45 5 26 13 1 13 0 19 2 6 12 13 1 19 1 7 12 46 8 46 9 10 4 39 16 13 0 13 1 19 1 10 12 14 11 19 3 12 38 10 13 0 13 1 19 1 10 17 13 10 4 73 43 2 29) #132# #1# 90944) clos::install-method)) #1# 90944) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #134=#A(t (13) (asdf::component-visiting-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::node-for asdf::node asdf::operation-ancestor asdf::operation-visiting-nodes gethash #Y(asdf::component-visiting-p nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 45 6 13 0 13 2 19 1 7 12 19 1 8 12 19 2 9 43 1 29) #134# #1# 91236) t clos::install-method)) #1# 91236) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #135=#A(t (9) (asdf::component-depends-on (symbol asdf::component) (asdf::op-spec asdf::c) asdf::op-spec asdf::c make-instance #Y(asdf::component-depends-on nil nil (24 45 3 24 45 4 26 13 1 19 1 5 12 13 0 19 2 0 29) #135# #1# 91401) t clos::install-method)) #1# 91401) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #136=#A(t (11) (asdf::component-depends-on (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c type-of asdf::component-in-order-to assoc #Y(asdf::component-depends-on nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 19 2 7 5 73 29) #136# #1# 91692) t clos::install-method)) #1# 91692) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #137=#A(t (16) (asdf::component-self-dependencies (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::x asdf::component-name :test string= member #Y(nil nil nil (24 45 5 26 13 1 19 1 6 12 10 0 5 12 14 7 33 8 12 19 4 9 29) #137# #1# 91810) asdf::component-depends-on remove-if-not #Y(asdf::component-self-dependencies nil nil (24 45 3 24 45 4 26 34 10 12 13 1 13 0 19 2 11 12 19 2 12 29) #137# #1# 91810) t clos::install-method)) #1# 91810) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 22 12 14 23 19 6 24 29) #138=#A(t (25) (asdf::input-files (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-parent asdf::component-self-dependencies asdf::self-deps asdf::parent asdf::dep #:g717 #:g718 si::dm-too-few-arguments asdf::op asdf::name si::dm-too-many-arguments make-instance asdf::find-component asdf::output-files #Y(nil nil nil (24 45 9 26 10 0 45 10 10 0 45 11 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 13 10 1 76 39 6 13 2 19 1 12 10 1 4 12 10 1 5 51 1 22 45 14 10 2 39 6 13 3 19 1 15 13 1 19 1 16 12 13 5 13 0 19 2 17 12 19 2 18 43 4 29) #138# #1# 91999) mapcan asdf::component-pathname #Y(asdf::input-files nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 13 1 13 0 19 2 6 12 46 7 46 8 10 1 39 11 34 19 12 13 1 19 2 20 38 9 13 2 19 1 21 6 1 73 43 2 29) #138# #1# 91999) t clos::install-method)) #1# 91999) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #139=#A(t (8) (asdf::input-files (asdf::operation asdf::module) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::input-files nil nil (24 45 3 24 45 4 26 75 73 29) #139# #1# 92563) t clos::install-method)) #1# 92563) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #140=#A(t (11) (asdf::component-operation-time (t t) (asdf::o asdf::c) asdf::o asdf::c type-of asdf::component-operation-times gethash #Y(asdf::component-operation-time nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 19 2 7 29) #140# #1# 92665) t clos::install-method)) #1# 92665) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 22 12 14 18 19 6 23 29) #141=#A(t (24) (asdf::operation-done-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::output-files asdf::input-files asdf::component-operation-time asdf::op-time asdf::in-files asdf::out-files min asdf::safe-file-write-date mapcar reduce #Y(asdf::earliest-out nil nil (26 33 11 12 33 12 12 13 0 19 2 13 12 19 2 14 29) #141# #1# 92763) max #Y(asdf::latest-in nil nil (26 33 16 12 33 12 12 13 1 19 2 13 12 19 2 14 29) #141# #1# 92763) t >= asdf::probe-file* every #Y(asdf::operation-done-p nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 12 13 1 13 0 19 2 6 12 13 1 13 0 19 2 7 12 46 8 46 9 46 10 30 2 15 17 10 3 76 39 4 10 2 76 39 6 11 18 73 38 67 10 2 76 39 18 10 4 73 39 11 13 4 32 0 18 0 12 19 2 19 38 45 10 3 76 39 5 75 73 38 36 33 20 12 13 3 19 2 21 73 39 25 33 20 12 13 2 19 2 21 73 39 14 32 1 18 0 12 32 0 18 0 12 19 2 19 43 2 43 3 29) #141# #1# 92763) clos::install-method)) #1# 92763) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*forcing* si::*make-special boundp variable "This dynamically-bound variable is used to force operations in
recursive calls to traverse." si::set-documentation)) #1# 94946) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::do-traverse fmakunbound (notinline asdf::do-traverse) proclaim :delete-methods t :lambda-list (asdf::operation asdf::component asdf::collect) ensure-generic-function)) #1# 95703) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 42 12 19 2 43 1 0 73 29) #142=#A(t (44) (asdf::resolve-dependency-name fmakunbound (notinline asdf::resolve-dependency-name) proclaim asdf::component asdf::name asdf::version 0 #:g725 #:g726 :name asdf::retry :function si::temp #Y(nil nil nil (27 45 13 10 0 51 2 35 1 0 29) #142# #1# 95760) :report-function asdf::s "~@<Retry loading ~3i~_~A.~@:>" format #Y(nil nil nil (24 45 16 26 13 0 15 17 13 7 19 3 18 29) #142# #1# 95760) :test-function asdf::c asdf::missing-dependency typep asdf::missing-required-by eq asdf::missing-requires equal #Y(nil nil nil (24 45 21 26 10 0 76 73 40 34 13 0 15 22 19 2 23 73 39 24 13 0 19 1 24 12 10 8 17 25 73 39 11 13 0 19 1 26 12 10 7 17 27 29) #142# #1# 95760) si::make-restart si::*restart-clusters* asdf::component-parent asdf::find-component asdf::comp :required-by :requires error asdf::version-satisfies asdf::missing-dependency-of-version :version #Y(nil nil nil (26 75 73 29) #142# #1# 95760) apply #Y(asdf::resolve-dependency-name nil nil (24 45 4 24 45 5 25 40 2 77 46 6 26 58 60 141 57 7 61 1 1 57 8 60 126 75 45 9 57 7 61 1 104 14 10 15 11 14 12 34 14 12 14 15 34 19 12 14 20 34 28 12 19 8 29 6 1 12 11 30 3 48 30 13 7 19 1 31 12 13 6 19 2 32 45 33 10 0 76 39 14 15 22 14 34 13 8 14 35 13 7 19 5 36 10 6 39 28 13 0 13 6 19 2 37 76 39 18 15 38 14 34 13 8 14 39 13 6 14 35 13 7 19 7 36 10 0 73 43 1 36 4 36 2 44 1 34 40 12 13 1 19 2 41 36 2 62 43 1 63 35 0 0 62 73 63 29) #142# #1# 95760) si::fset)) #1# 95760) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 22 12 19 2 23 1 0 73 29) #143=#A(t (24) (asdf::resolve-dependency-spec fmakunbound (notinline asdf::resolve-dependency-spec) proclaim asdf::component asdf::dep-spec atom asdf::resolve-dependency-name :version eq second third :feature "Continue nonetheless." "Congratulations, you're the first ever user of FEATURE dependencies! Please contact the asdf-devel mailing-list." cerror *features* :test string-equal find "~@<Bad dependency ~s.  Dependencies must be (:version <name> <version>), (:feature <feature> <name>), or <name>.~@:>" error #Y(asdf::resolve-dependency-spec nil nil (24 45 4 24 45 5 26 10 0 16 6 39 10 13 1 13 0 19 2 7 38 79 14 8 10 0 4 17 9 39 18 13 1 10 0 16 10 12 10 0 16 11 12 19 3 7 38 53 14 12 10 0 4 17 9 39 37 15 13 15 14 19 2 15 10 0 16 10 12 14 16 14 17 15 18 19 4 19 73 39 11 13 1 10 0 16 11 12 19 2 7 38 8 15 20 13 0 19 2 21 29) #143# #1# 96721) si::fset)) #1# 96721) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #144=#A(t (13) (asdf::do-one-dep fmakunbound (notinline asdf::do-one-dep) proclaim asdf::op asdf::c asdf::collect asdf::dep-op asdf::dep-c asdf::make-sub-operation asdf::do-traverse #Y(asdf::do-one-dep nil nil (24 45 4 24 45 5 24 45 6 24 45 7 24 45 8 26 13 3 13 4 13 0 13 1 19 4 9 12 13 0 13 2 19 3 10 29) #144# #1# 97955) si::fset)) #1# 97955) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 24 12 19 2 25 1 0 73 29) #145=#A(t (26) (asdf::do-dep fmakunbound (notinline asdf::do-dep) proclaim asdf::op asdf::c asdf::collect asdf::dep-op-spec asdf::dep-c-specs asdf::feature eq *features* member asdf::missing-dependency :required-by :requires :feature error asdf::flag si::%dolist-var asdf::d asdf::resolve-dependency-spec asdf::do-one-dep t #Y(asdf::do-dep nil nil (24 45 4 24 45 5 24 45 6 24 45 7 24 45 8 26 13 1 1 9 17 10 39 37 10 0 4 12 14 11 19 2 12 39 5 75 73 38 20 15 13 14 14 13 3 14 15 14 16 10 0 4 6 2 12 19 5 17 38 59 75 45 18 10 1 45 19 75 45 20 38 36 10 1 4 51 0 13 7 13 6 13 5 13 4 13 6 13 0 19 2 21 12 19 5 22 39 5 11 23 51 2 10 1 5 51 1 10 1 40 -38 43 2 10 0 73 43 1 29) #145# #1# 98377) si::fset)) #1# 98377) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (asdf::*visit-count* si::*make-special boundp)) #1# 99723) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #146=#A(t (8) (asdf::do-collect fmakunbound (notinline asdf::do-collect) proclaim asdf::collect asdf::x #Y(asdf::do-collect nil nil (24 45 4 24 45 5 26 13 1 13 0 20 1 23 29) #146# #1# 99749) si::fset)) #1# 99749) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 85 12 14 23 19 6 86 29) #147=#A(t (87) (asdf::do-traverse (asdf::operation asdf::component t) (asdf::operation asdf::c asdf::collect) asdf::operation asdf::c asdf::collect asdf::*forcing* asdf::flag asdf::x #:g764 #Y(asdf::update-flag nil nil (24 45 8 26 10 0 45 9 10 4 40 3 10 0 51 4 73 43 1 29) #147# #1# 99869) asdf::op asdf::comp asdf::do-dep #Y(asdf::dep nil nil (24 45 11 24 45 12 26 13 8 13 7 13 6 13 1 13 0 19 5 13 12 32 3 18 1 29) #147# #1# 99869) asdf::component-visited-p asdf::it asdf::component-visiting-p asdf::circular-dependency :components error #:g765 #:g766 t #:g767 (setf asdf::visiting-component) asdf::system typep asdf::operation-ancestor asdf::ancestor asdf::f consp asdf::component-name :test equal member #Y(asdf::match? nil nil (24 45 30 26 10 0 73 39 25 10 0 16 31 76 73 40 17 13 8 19 1 32 12 13 0 14 33 33 34 12 19 4 35 29) #147# #1# 99869) asdf::operation-forced asdf::operation-forced-not asdf::component-depends-on #:loop-list769 asdf::deps asdf::required-op 0 #22# asdf::module asdf::at-least-one #:internal-collect770 #Y(asdf::internal-collect nil nil (24 45 8 26 13 0 10 1 3 51 1 0 29) #147# #1# 99869) asdf::module-components si::%dolist-var asdf::kid #:error-return #Y(nil nil nil (24 45 4 26 11 23 51 6 73 29) #147# #1# 99869) #:normal-return #:g779 #:g780 asdf::missing-dependency si::temp #Y(nil nil nil (24 45 58 26 10 0 51 2 35 1 0 29) #147# #1# 99869) si::*handler-clusters* condition asdf::module-if-component-dep-fails :fail eq :try-next reverse asdf::module-ops asdf::operation-done-p class-of class-name asdf::component-do-first assoc asdf::do-first #:loop-list783 vector asdf::do-collect #:g784 #:g785 #:g786 (setf asdf::visiting-component) #:g788 asdf::*visit-count* + asdf::visit-component #Y(asdf::do-traverse nil nil (24 45 3 24 45 4 24 45 5 26 57 0 60 641 14 6 77 46 7 49 6 31 2 10 14 13 6 13 5 19 2 15 45 16 10 0 39 16 10 0 5 12 32 2 18 1 10 3 73 36 4 38 1 43 1 13 6 13 5 19 2 17 39 13 15 18 14 19 10 5 6 1 12 19 3 20 10 6 45 21 10 6 45 22 11 23 45 24 13 0 13 2 13 1 33 25 18 3 43 1 43 2 64 486 58 60 482 13 6 15 26 19 2 27 39 49 13 7 19 1 28 45 29 30 1 36 13 1 19 1 37 12 32 0 18 1 39 7 11 23 52 6 38 17 13 1 19 1 38 12 32 0 18 1 39 5 75 73 36 2 43 1 43 1 75 48 6 77 77 13 7 13 6 19 2 39 12 46 40 46 41 46 42 57 43 61 2 2 46 10 3 2 39 4 35 0 1 10 3 4 45 44 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 1 13 2 32 5 18 2 35 0 0 62 43 3 44 1 13 6 15 45 19 2 27 39 199 77 11 6 73 40 15 10 3 73 39 10 13 6 15 26 19 2 27 76 73 12 77 46 20 49 6 46 46 75 45 47 30 1 48 13 10 19 1 49 45 50 75 45 51 38 110 10 1 4 51 0 57 52 60 96 34 53 12 57 54 60 85 57 55 60 78 75 45 56 57 43 61 1 35 15 57 34 59 3 6 1 12 11 60 3 48 60 13 18 13 5 32 7 12 19 3 0 12 32 13 18 1 36 3 36 2 44 1 10 1 45 61 13 18 19 1 62 12 11 63 17 64 39 6 13 0 19 1 20 10 0 51 11 73 43 1 36 2 62 73 43 1 63 36 1 63 69 21 23 63 10 1 5 51 1 10 1 40 -112 43 2 13 10 19 1 62 12 11 65 17 64 39 4 10 2 76 39 6 13 3 19 1 20 10 1 16 66 12 72 1 43 1 43 1 43 2 44 1 45 67 11 6 73 40 10 13 8 13 7 19 2 68 76 73 12 32 3 18 1 10 4 39 115 10 8 16 69 12 19 1 70 12 13 7 19 1 71 12 19 2 72 5 45 73 77 77 13 0 46 74 46 41 46 42 57 43 61 2 2 51 10 3 2 39 4 35 0 1 10 3 4 45 44 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 13 13 12 13 11 13 1 13 2 19 5 13 35 0 0 62 43 3 43 1 13 6 13 0 19 1 75 12 19 2 76 13 6 13 8 10 7 3 12 19 2 76 43 1 63 65 10 6 45 77 10 6 45 78 75 45 79 13 0 13 2 13 1 33 80 18 3 43 1 43 2 66 43 2 13 4 13 3 10 0 73 39 17 8 1 45 81 14 82 13 0 19 2 83 52 82 73 43 1 12 19 3 84 10 0 73 43 1 44 1 63 29) #147# #1# 99869) clos::install-method)) #1# 99869) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 1 0 73 29) #148=#A(t (17) (asdf::flatten-tree fmakunbound (notinline asdf::flatten-tree) proclaim asdf::l #:c792 asdf::x #Y(asdf::c nil nil (24 45 6 26 13 0 10 1 3 51 1 0 29) #148# #1# 104386) (simple-vector 1) typep svref #Y(asdf::r nil nil (24 45 6 26 13 0 15 8 19 2 9 39 14 13 0 8 0 17 10 12 32 1 18 1 38 7 13 0 32 3 18 1 29) #148# #1# 104386) si::%dolist-var #Y(asdf::r* nil nil (24 45 4 26 10 0 45 12 75 45 6 38 17 10 1 4 51 0 13 0 32 4 18 1 10 1 5 51 1 10 1 40 -19 75 73 43 2 29) #148# #1# 104386) reverse #Y(asdf::flatten-tree nil nil (24 45 4 26 75 45 5 30 1 7 31 2 11 13 13 4 32 0 18 1 43 2 10 1 16 14 12 72 1 43 1 43 1 29) #148# #1# 104386) si::fset)) #1# 104386) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #149=#A(t (15) (asdf::traverse (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #:collect804 asdf::x #Y(asdf::collect nil nil (24 45 6 26 13 0 10 1 3 51 1 0 29) #149# #1# 105016) asdf::*visit-count* asdf::do-traverse reverse asdf::flatten-tree #Y(asdf::traverse nil nil (24 45 3 24 45 4 26 75 45 5 30 1 7 8 0 48 8 13 3 13 2 32 0 12 19 3 9 44 1 10 1 16 10 12 43 1 43 1 19 1 11 29) #149# #1# 105016) t clos::install-method)) #1# 105016) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #150=#A(t (11) (asdf::perform (asdf::operation asdf::source-file) (asdf::operation asdf::c) asdf::operation asdf::c "~@<Required method PERFORM not implemented for operation ~A, component ~A~@:>" class-of asdf::sysdef-error #Y(asdf::perform nil nil (24 45 3 24 45 4 26 15 5 10 1 16 6 12 10 0 16 6 12 19 3 7 29) #150# #1# 105199) t clos::install-method)) #1# 105199) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #151=#A(t (8) (asdf::perform (asdf::operation asdf::module) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::perform nil nil (24 45 3 24 45 4 26 75 73 29) #151# #1# 105409) t clos::install-method)) #1# 105409) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #152=#A(t (17) (asdf::mark-operation-done (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c type-of asdf::component-operation-times max get-universal-time asdf::safe-file-write-date asdf::input-files mapcar reduce si::hash-set #Y(asdf::mark-operation-done nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 33 7 12 19 0 8 12 33 9 12 13 1 13 0 19 2 10 12 19 2 11 3 12 19 2 12 12 19 3 13 29) #152# #1# 105507) t clos::install-method)) #1# 105507) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #153=#A(t (9) (asdf::perform-with-restarts (t t) (asdf::operation asdf::component) asdf::operation asdf::component asdf::perform #Y(asdf::perform-with-restarts nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 29) #153# #1# 105782) t clos::install-method)) #1# 105782) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 31 12 14 32 19 6 33 29) #154=#A(t (34) (asdf::perform-with-restarts (:around) (t t) (asdf::operation asdf::component) asdf::operation asdf::component 0 #:g838 #:g839 :name asdf::retry :function si::temp #Y(nil nil nil (27 45 12 10 0 51 2 35 1 0 29) #154# #1# 106060) :report-function asdf::s "~@<Retry ~A.~@:>" asdf::operation-description format #Y(nil nil nil (24 45 15 26 13 0 15 16 13 7 13 6 19 2 17 12 19 3 18 29) #154# #1# 106060) si::make-restart asdf::accept #Y(nil nil nil (27 45 12 10 0 51 2 35 1 1 29) #154# #1# 106060) "~@<Continue, treating ~A as having been successful.~@:>" #Y(nil nil nil (24 45 15 26 13 0 15 23 13 7 13 6 19 2 17 12 19 3 18 29) #154# #1# 106060) si::*restart-clusters* call-next-method #Y(nil nil nil (26 75 73 29) #154# #1# 106060) apply asdf::mark-operation-done #Y(nil nil nil (26 13 6 13 5 19 2 29 75 73 36 4 29) #154# #1# 106060) #Y(asdf::perform-with-restarts nil nil (24 45 4 24 45 5 26 58 60 101 57 6 61 1 1 57 7 60 86 75 45 8 57 6 61 2 54 63 14 9 15 10 14 11 34 13 12 14 14 34 19 12 19 6 20 12 14 9 15 21 14 11 34 22 12 14 14 34 24 12 19 6 20 6 2 12 11 25 3 48 25 19 0 26 36 4 36 2 44 1 34 27 12 13 1 19 2 28 36 2 34 30 12 13 1 19 2 28 36 2 62 43 1 63 35 0 0 62 73 63 29) #154# #1# 106060) t clos::install-method)) #1# 106060) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #155=#A(t (11) (asdf::explain (asdf::operation asdf::component) (asdf::operation asdf::component) asdf::operation asdf::component "~&~@<; ~@;~A~:>~%" asdf::operation-description asdf::asdf-message #Y(asdf::explain nil nil (24 45 3 24 45 4 26 15 5 13 1 13 0 19 2 6 12 19 2 7 29) #155# #1# 106632) t clos::install-method)) #1# 106632) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #156=#A(t (11) (asdf::operation-description (t t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<~A on ~A~@:>" class-of format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 10 1 16 6 12 13 0 19 4 7 29) #156# #1# 106808) t clos::install-method)) #1# 106808) #Y(si::bytecodes nil nil (15 0 15 1 15 2 14 3 1 5 12 1 6 7 3 12 14 3 1 8 12 1 9 7 3 12 1 10 6 4 12 77 19 4 11 29) #157=#A(t (12) (asdf::compile-op (asdf::operation) (:initform nil :writers ((setf asdf::compile-op-proclamations)) :readers (asdf::compile-op-proclamations) :initargs (:proclamations) :name asdf::proclamations) :initfunction asdf::*compile-file-warnings-behaviour* #Y(nil nil nil (26 11 4 73 29) #157# #1# 106951) (:initform asdf::*compile-file-warnings-behaviour* :writers ((setf asdf::operation-on-warnings)) :readers (asdf::operation-on-warnings) :initargs (:on-warnings) :name asdf::on-warnings) asdf::*compile-file-failure-behaviour* #Y(nil nil nil (26 11 7 73 29) #157# #1# 106951) (:initform asdf::*compile-file-failure-behaviour* :writers ((setf asdf::operation-on-failure)) :readers (asdf::operation-on-failure) :initargs (:on-failure) :name asdf::on-failure) (:initform nil :writers ((setf asdf::compile-op-flags)) :readers (asdf::compile-op-flags) :initargs (:flags) :name asdf::flags) clos::load-defclass)) #1# 106951) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #158=#A(t (16) (asdf::output-file fmakunbound (notinline asdf::output-file) proclaim asdf::operation asdf::component asdf::output-files asdf::files (asdf::length=n-p asdf::files 1) si::assert-failure asdf::length=n-p #Y(asdf::output-file nil nil (24 45 4 24 45 5 26 13 1 13 0 19 2 6 45 7 38 6 15 8 19 1 9 13 0 9 1 19 2 10 76 40 -14 10 0 4 73 43 1 29) #158# #1# 107510) si::fset function "The unique output file of performing OPERATION on COMPONENT" si::set-documentation)) #1# 107510) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #159=#A(t (11) (asdf::ensure-all-directories-exist fmakunbound (notinline asdf::ensure-all-directories-exist) proclaim asdf::pathnames si::%dolist-var pathname translate-logical-pathname ensure-directories-exist #Y(asdf::ensure-all-directories-exist nil nil (24 45 4 26 10 0 45 5 75 45 6 38 20 10 1 4 51 0 13 0 19 1 7 12 19 1 8 10 1 5 51 1 10 1 40 -22 75 73 43 2 29) #159# #1# 107723) si::fset)) #1# 107723) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 8 12 14 9 19 6 10 29) #160=#A(t (11) (asdf::perform (:before) (asdf::compile-op asdf::source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::output-files asdf::ensure-all-directories-exist #Y(asdf::perform nil nil (24 45 4 24 45 5 26 13 1 13 0 19 2 6 12 19 1 7 29) #160# #1# 107877) t clos::install-method)) #1# 107877) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 7 12 14 8 19 6 9 29) #161=#A(t (10) (asdf::perform (:after) (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::mark-operation-done #Y(asdf::perform nil nil (24 45 4 24 45 5 26 13 1 13 0 19 2 6 29) #161# #1# 108007) t clos::install-method)) #1# 108007) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::around-compile-hook fmakunbound (notinline asdf::around-compile-hook) proclaim :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 108109) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::call-with-around-compile-hook fmakunbound (notinline asdf::call-with-around-compile-hook) proclaim :delete-methods t :lambda-list (asdf::component asdf::thunk) ensure-generic-function)) #1# 108156) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #162=#A(t (11) (asdf::around-compile-hook (asdf::component) (asdf::c) asdf::c asdf::around-compile slot-boundp slot-value asdf::component-parent #Y(asdf::around-compile-hook nil nil (24 45 3 26 13 0 1 4 17 5 39 9 13 0 1 4 17 6 38 18 13 0 19 1 7 73 39 10 13 0 19 1 7 12 19 1 0 29) #162# #1# 108218) t clos::install-method)) #1# 108218) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #163=#A(t (21) (asdf::ensure-function asdf::fun (nil :package) :asdf package #:g844 #164=(or symbol function) typep cons function eval string si::+io-syntax-progv-list+ #:%progv-list find-package *package* read-from-string (#164# cons string) si::etypecase-error #Y(asdf::ensure-function nil nil (24 45 1 28 2 22 40 3 14 3 46 4 10 1 45 5 13 0 15 6 19 2 7 39 6 10 2 73 38 71 13 0 15 8 19 2 7 39 11 15 9 10 2 6 2 16 10 38 52 13 0 15 11 19 2 7 39 37 15 9 11 12 45 13 10 0 4 12 10 0 5 67 10 2 16 14 48 15 13 3 19 1 16 44 1 68 43 1 6 2 16 10 38 7 13 0 1 17 17 18 43 1 29) #163# #1# 108425) si::fset)) #1# 108425) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #165=#A(t (11) (asdf::call-with-around-compile-hook (asdf::component t) (asdf::c asdf::thunk) asdf::c asdf::thunk asdf::around-compile-hook asdf::hook asdf::ensure-function #Y(asdf::call-with-around-compile-hook nil nil (24 45 3 24 45 4 26 13 1 19 1 5 45 6 10 0 39 14 13 0 19 1 7 12 13 1 20 1 23 38 6 13 1 20 0 23 43 1 29) #165# #1# 108750) t clos::install-method)) #1# 108750) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 38 12 14 39 19 6 40 29) #166=#A(t (41) (asdf::perform (asdf::compile-op asdf::cl-source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-pathname asdf::output-files asdf::operation-on-warnings asdf::operation-on-failure asdf::*compile-file-failure-behaviour* asdf::*compile-file-warnings-behaviour* asdf::output-file asdf::source-file asdf::flags asdf::*compile-op-compile-file-function* :output-file :external-format asdf::component-external-format asdf::compile-op-flags append apply #Y(nil nil nil (27 45 13 14 14 13 1 14 15 13 2 14 16 13 3 19 1 17 12 13 0 13 4 19 1 18 12 19 2 19 12 19 7 20 29) #166# #1# 108941) asdf::call-with-around-compile-hook asdf::failure-p asdf::warnings-p asdf::output asdf::compile-error :component :operation error :warn "~@<COMPILE-FILE failed while performing ~A on ~A.~@:>" warn :error asdf::compile-failed :ignore "~@<COMPILE-FILE warned while performing ~A on ~A.~@:>" asdf::compile-warned #Y(asdf::perform nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 13 1 13 0 19 2 6 4 12 13 1 19 1 7 12 13 1 19 1 8 12 49 9 49 10 46 11 46 12 13 2 34 21 12 19 2 22 47 2 23 47 1 24 45 25 10 0 76 39 14 15 26 14 27 13 5 14 28 13 6 19 5 29 10 2 39 41 13 6 19 1 8 42 30 12 15 31 13 6 13 5 19 3 32 38 22 42 33 16 15 34 14 27 13 5 14 28 13 6 19 5 29 38 4 42 35 1 10 1 73 39 47 13 6 19 1 7 42 30 12 15 36 13 6 13 5 19 3 32 38 28 42 33 16 15 37 14 27 13 5 14 28 13 6 19 5 29 38 10 42 35 5 75 73 38 3 75 73 43 3 43 2 44 2 29) #166# #1# 108941) t clos::install-method)) #1# 108941) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #167=#A(t (17) (asdf::output-files (asdf::compile-op asdf::cl-source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-pathname asdf::lispize-pathname asdf::p :type :fasl compile-file-pathname asdf::f asdf::use-ecl-byte-compiler-p :object #Y(asdf::output-files nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 19 1 6 45 7 13 0 14 8 14 9 19 3 10 45 11 19 0 12 39 8 10 0 6 1 73 38 16 13 1 14 8 14 13 19 3 10 12 10 0 6 2 73 43 2 29) #167# #1# 110652) t clos::install-method)) #1# 110652) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #168=#A(t (8) (asdf::perform (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::perform nil nil (24 45 3 24 45 4 26 75 73 29) #168# #1# 111172) t clos::install-method)) #1# 111172) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #169=#A(t (8) (asdf::output-files (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::output-files nil nil (24 45 3 24 45 4 26 75 73 29) #169# #1# 111276) t clos::install-method)) #1# 111276) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #170=#A(t (8) (asdf::input-files (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::input-files nil nil (24 45 3 24 45 4 26 75 73 29) #170# #1# 111385) t clos::install-method)) #1# 111385) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #171=#A(t (10) (asdf::operation-description (asdf::compile-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<compiling ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #171# #1# 111493) t clos::install-method)) #1# 111493) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #172=#A(t (10) (asdf::operation-description (asdf::compile-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<compiled ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #172# #1# 111661) t clos::install-method)) #1# 111661) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::basic-load-op (asdf::operation) clos::load-defclass)) #1# 111837) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::load-op (asdf::basic-load-op) clos::load-defclass)) #1# 111972) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 27 12 14 28 19 6 29 29) #173=#A(t (30) (asdf::perform-with-restarts (asdf::load-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c 0 #:g861 #:g862 :name asdf::try-recompiling :function si::temp #Y(nil nil nil (27 45 11 10 0 51 2 35 1 0 29) #173# #1# 112011) :report-function asdf::s "Recompile ~a and try loading it again" asdf::component-name format #Y(nil nil nil (24 45 14 26 13 0 15 15 13 6 19 1 16 12 19 3 17 29) #173# #1# 112011) si::make-restart si::*restart-clusters* call-next-method asdf::compile-op asdf::make-sub-operation asdf::perform #Y(nil nil nil (26 13 5 13 6 13 5 15 22 19 4 23 12 13 5 19 2 24 29) #173# #1# 112011) apply #Y(asdf::perform-with-restarts nil nil (24 45 3 24 45 4 26 58 60 72 57 5 61 1 1 57 6 60 57 75 45 7 57 5 61 1 35 14 8 15 9 14 10 34 12 12 14 13 34 18 12 19 6 19 6 1 12 11 20 3 48 20 19 0 21 36 4 36 2 44 1 34 25 12 13 1 19 2 26 36 2 62 43 1 63 35 0 0 62 73 63 29) #173# #1# 112011) t clos::install-method)) #1# 112011) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 19 12 14 20 19 6 21 29) #174=#A(t (22) (asdf::perform (asdf::load-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c load asdf::input-files #:loop-list874 asdf::i #:loop-list-head875 #:loop-list-tail876 0 pathname-type "fas" string= asdf::lispize-pathname compile-file-pathname rplacd map #Y(asdf::perform nil nil (24 45 3 24 45 4 26 77 33 5 12 58 60 94 77 13 2 13 1 19 2 6 12 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 53 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 19 1 12 12 15 13 19 2 14 76 39 18 13 1 13 3 19 1 15 12 19 1 16 6 1 51 1 17 17 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 19 3 18 29) #174# #1# 112372) t clos::install-method)) #1# 112372) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #175=#A(t (8) (asdf::perform (asdf::load-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::perform nil nil (24 45 3 24 45 4 26 75 73 29) #175# #1# 112666) t clos::install-method)) #1# 112666) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 5 19 6 7 29) #176=#A(t (8) (asdf::operation-done-p (asdf::load-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c t #Y(asdf::operation-done-p nil nil (24 45 3 24 45 4 26 11 5 73 29) #176# #1# 112767) clos::install-method)) #1# 112767) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #177=#A(t (8) (asdf::output-files (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::output-files nil nil (24 45 3 24 45 4 26 75 73 29) #177# #1# 112875) t clos::install-method)) #1# 112875) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #178=#A(t (11) (asdf::component-depends-on (asdf::load-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::compile-op asdf::component-name call-next-method #Y(asdf::component-depends-on nil nil (24 45 3 24 45 4 26 15 5 13 0 19 1 6 6 2 12 19 0 7 3 73 29) #178# #1# 112981) t clos::install-method)) #1# 112981) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #179=#A(t (10) (asdf::operation-description (asdf::load-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loading ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #179# #1# 113159) t clos::install-method)) #1# 113159) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #180=#A(t (10) (asdf::operation-description (asdf::load-op asdf::cl-source-file) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loading FASL for ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #180# #1# 113332) t clos::install-method)) #1# 113332) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #181=#A(t (10) (asdf::operation-description (asdf::load-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loaded ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #181# #1# 113531) t clos::install-method)) #1# 113531) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::load-source-op (asdf::basic-load-op) clos::load-defclass)) #1# 113712) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 19 19 6 20 29) #182=#A(t (21) (asdf::perform (asdf::load-source-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c asdf::component-pathname asdf::source #:g886 asdf::last-loaded-as-source #:g887 :external-format asdf::component-external-format load #Y(nil nil nil (26 13 2 14 10 13 3 19 1 11 12 19 3 12 29) #182# #1# 113858) asdf::call-with-around-compile-hook get-universal-time #:g888 (setf asdf::component-property) #Y(asdf::perform nil nil (24 45 3 24 45 4 26 13 0 19 1 5 45 6 10 1 45 7 1 8 45 9 13 3 34 13 12 19 2 14 39 4 19 0 15 45 16 13 0 13 2 13 1 33 17 18 3 43 1 43 2 43 1 29) #182# #1# 113858) t clos::install-method)) #1# 113858) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #183=#A(t (8) (asdf::perform (asdf::load-source-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::perform nil nil (24 45 3 24 45 4 26 75 73 29) #183# #1# 114221) t clos::install-method)) #1# 114221) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #184=#A(t (8) (asdf::output-files (asdf::load-source-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::output-files nil nil (24 45 3 24 45 4 26 75 73 29) #184# #1# 114329) t clos::install-method)) #1# 114329) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #185=#A(t (20) (asdf::component-depends-on (asdf::load-source-op asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::load-op asdf::what-would-load-op-do #:loop-list898 asdf::co asdf::op #:loop-list-head899 #:loop-list-tail900 0 #22# eq asdf::load-source-op rplacd #Y(asdf::component-depends-on nil nil (24 45 3 24 45 4 26 58 60 108 15 5 13 1 19 2 0 45 6 77 77 13 0 46 7 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 59 10 5 2 39 4 35 0 1 10 5 4 45 13 10 0 4 51 4 10 0 5 51 0 10 0 51 5 43 1 10 5 5 51 5 13 3 1 5 17 14 39 14 13 1 15 15 10 4 3 6 1 51 1 17 16 35 0 0 10 2 5 73 36 7 62 73 43 2 43 3 43 1 63 29) #185# #1# 114440) t clos::install-method)) #1# 114440) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 10 19 6 12 29) #186=#A(t (13) (asdf::operation-done-p (asdf::load-source-op asdf::source-file) (asdf::o asdf::c) asdf::o asdf::c asdf::last-loaded-as-source asdf::component-property asdf::component-pathname asdf::safe-file-write-date > t #Y(asdf::operation-done-p nil nil (24 45 3 24 45 4 26 13 0 15 5 19 2 6 76 40 22 13 0 19 1 7 12 19 1 8 12 13 0 15 5 19 2 6 12 19 2 9 39 5 75 73 38 4 11 10 73 29) #186# #1# 114790) clos::install-method)) #1# 114790) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #187=#A(t (10) (asdf::operation-description (asdf::load-source-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<Loading source of ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #187# #1# 115078) t clos::install-method)) #1# 115078) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #188=#A(t (10) (asdf::operation-description (asdf::load-source-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<Loaded source of ~3i~_~A~@:>" format #Y(asdf::operation-description nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #188# #1# 115268) t clos::install-method)) #1# 115268) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::test-op (asdf::operation) clos::load-defclass)) #1# 115456) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #189=#A(t (8) (asdf::perform (asdf::test-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::perform nil nil (24 45 3 24 45 4 26 75 73 29) #189# #1# 115585) t clos::install-method)) #1# 115585) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 14 7 15 8 19 8 9 29) #190=#A(t (10) (asdf::operation-done-p (asdf::test-op asdf::system) (asdf::operation asdf::c) asdf::operation asdf::c #Y(asdf::operation-done-p nil nil (24 45 3 24 45 4 26 75 73 29) #190# #1# 115684) t :documentation "Testing a system is _never_ done." clos::install-method)) #1# 115684) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 9 12 14 10 19 6 11 29) #191=#A(t (12) (asdf::component-depends-on (:around) (asdf::test-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::load-op asdf::component-name call-next-method #Y(asdf::component-depends-on nil nil (24 45 4 24 45 5 26 15 6 13 0 19 1 7 6 2 12 19 0 8 3 73 29) #191# #1# 115827) t clos::install-method)) #1# 115827) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::operate fmakunbound (notinline asdf::operate) proclaim :delete-methods t :lambda-list (asdf::operation-class asdf::system &key &allow-other-keys) ensure-generic-function)) #1# 115979) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::perform-plan fmakunbound (notinline asdf::perform-plan) proclaim :delete-methods t :lambda-list (asdf::plan &key) ensure-generic-function)) #1# 116156) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 40 12 19 2 41 1 0 73 29) #192=#A(t (42) (asdf::cleanup-upgraded-asdf fmakunbound (notinline asdf::cleanup-upgraded-asdf) proclaim asdf::old-version asdf::asdf-version asdf::new-version equal asdf::version-satisfies "~&~@<; ~@;Upgraded ASDF from version ~A to version ~A~@:>~%" asdf::asdf-message "~&~@<; ~@;Downgraded ASDF from version ~A to version ~A~@:>~%" warn "~&~@<; ~@;Changed ASDF from version ~A to incompatible version ~A~@:>~%" asdf::find-system :asdf asdf::find-symbol* asdf::asdf asdf::make-defined-systems-table asdf::*defined-systems* asdf::register-system asdf::*systems-being-defined* #:g917 #:loop-hashtab-915 asdf::name #:loop-it-918 si::hash-table-iterator #:loop-hashtab-next-916 #:loop-list-head922 #:loop-list-tail923 0 #:loop-hash-val-temp-919 #:loop-hash-key-temp-920 #:loop-hash-predicate-var-921 rplacd asdf::l clrhash si::%dolist-var asdf::s t #Y(asdf::cleanup-upgraded-asdf nil nil (24 45 4 26 19 0 5 45 6 13 1 10 0 17 7 76 73 39 224 13 0 13 1 19 2 8 39 12 15 9 13 1 13 0 19 3 10 38 30 13 1 13 0 19 2 8 39 12 15 11 13 1 13 0 19 3 12 38 10 15 13 13 1 13 0 19 3 10 15 14 14 15 19 2 16 12 14 15 20 1 23 45 17 19 0 18 52 19 13 0 19 1 20 11 21 39 141 58 60 99 77 77 14 21 77 46 22 46 23 46 24 46 25 10 2 16 26 45 27 75 6 1 45 28 10 0 45 29 57 30 61 2 2 51 13 3 20 0 23 47 2 31 47 1 32 45 33 10 0 39 9 10 2 51 10 10 1 51 8 10 0 51 7 43 3 76 39 4 35 0 1 13 1 10 5 6 1 51 1 17 34 35 0 0 10 2 5 73 36 8 62 43 2 43 1 43 4 63 45 35 11 21 16 36 10 0 45 37 75 45 38 38 17 10 1 4 51 0 13 0 77 19 2 14 10 1 5 51 1 10 1 40 -19 43 2 43 1 11 39 73 43 1 43 1 29) #192# #1# 116195) si::fset)) #1# 116195) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 1 0 73 29) #193=#A(t (16) (asdf::upgrade-asdf fmakunbound (notinline asdf::upgrade-asdf) proclaim asdf::asdf-version asdf::version (or style-warning warning) muffle-warning si::*handler-clusters* asdf::load-op :asdf :verbose asdf::operate asdf::cleanup-upgraded-asdf #Y(asdf::upgrade-asdf nil nil (26 19 0 4 45 5 15 6 33 7 3 6 1 12 11 8 3 48 8 15 9 14 10 14 11 77 19 4 12 44 1 13 0 19 1 13 43 1 29) #193# #1# 117492) si::fset)) #1# 117492) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #194=#A(t (16) (asdf::perform-plan (list) (asdf::steps &key) asdf::steps (t) *package* *readtable* #:loop-list930 asdf::component asdf::op 0 #22# asdf::perform-with-restarts #Y(asdf::perform-plan nil nil (24 45 3 28 4 14 5 14 6 49 6 49 5 77 77 13 0 46 7 46 8 46 9 57 10 61 2 2 45 10 3 2 39 4 35 0 1 10 3 4 45 11 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 1 13 2 19 2 12 35 0 0 62 73 43 3 44 2 29) #194# #1# 117845) t clos::install-method)) #1# 117845) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 45 12 14 46 19 6 47 29) #195=#A(t (48) (asdf::operate (t t) (asdf::operation-class asdf::system &rest asdf::args &key ((:verbose asdf::*asdf-verbose*) asdf::*asdf-verbose*) asdf::version asdf::force &allow-other-keys) asdf::operation-class asdf::system asdf::args (t :force :version :verbose) asdf::*asdf-verbose* asdf::version asdf::force make-instance :original-initargs apply asdf::op *standard-output* make-broadcast-stream asdf::*verbose-out* #:g932 typep #196=(or string symbol) asdf::find-system (asdf::system #196#) si::etypecase-error asdf::version-satisfies asdf::missing-component-of-version :requires :version error asdf::traverse asdf::steps ("asdf") asdf::component-find-path equal ("asdf") cdr mapcar :test :key find asdf::upgrade-asdf :asdf asdf::find-symbol* asdf::perform-plan #Y(nil nil nil (26 15 10 13 5 14 11 13 3 13 3 19 5 12 45 13 11 7 39 5 11 14 38 4 19 0 15 48 16 10 5 45 17 13 0 15 4 19 2 18 39 5 10 6 38 23 13 0 15 19 19 2 18 39 8 13 6 19 1 20 38 7 13 0 1 21 17 22 43 1 45 4 13 0 13 4 19 2 23 76 39 14 15 24 14 25 13 0 14 26 13 4 19 5 27 13 1 13 0 19 2 28 45 29 15 30 13 1 19 1 31 17 32 76 39 27 15 33 15 34 13 0 19 2 35 12 14 36 15 32 14 37 15 31 19 6 38 39 4 19 0 39 39 20 15 0 14 40 19 2 41 12 13 8 13 1 13 6 19 4 12 36 3 13 0 19 1 42 13 2 13 0 72 2 43 1 43 2 44 1 29) #195# #1# 118082) asdf::call-with-system-definitions #Y(asdf::operate nil nil (24 45 3 24 45 4 27 45 5 28 6 22 40 3 14 7 49 7 22 40 2 77 46 8 22 40 2 77 46 9 57 0 60 8 34 43 12 19 1 44 63 44 1 29) #195# #1# 118082) t clos::install-method)) #1# 118082) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #197=#A(t (15) (asdf::oos fmakunbound (notinline asdf::oos) proclaim asdf::operation-class asdf::system asdf::args (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate apply #Y(asdf::oos nil nil (24 45 4 24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 15 11 13 5 13 4 13 3 19 4 12 29) #197# #1# 119573) si::fset)) #1# 119573) #Y(si::bytecodes nil nil (1 0 45 1 1 2 45 3 1 4 45 5 77 15 6 13 2 19 3 7 45 8 13 0 13 2 13 1 33 9 18 3 43 1 43 2 1 10 45 11 1 4 45 12 10 2 45 13 13 0 13 2 13 1 33 14 18 3 43 1 43 2 43 1 29) #A(t (15) ("Operate does three things:

1. It creates an instance of OPERATION-CLASS using any keyword parameters
as initargs.
2. It finds the  asdf-system specified by SYSTEM (possibly loading
it from disk).
3. It then calls TRAVERSE with the operation and system as arguments

The traverse operation is wrapped in WITH-COMPILATION-UNIT and error
handling code. If a VERSION argument is supplied, then operate also
ensures that the system found satisfies it using the VERSION-SATISFIES
method.

Note that dependencies may cause the operation to invoke other
operations on the system or its components: the new operations will be
created with the same initargs as the original one.
" asdf::operate-docstring asdf::oos #:g933 function #:g934 "Short for _operate on system_ and an alias for the OPERATE function.~%~%~a" format #:g935 (setf documentation) asdf::operate #:g936 #:g937 #:g938 (setf documentation))) #1# 119770) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #198=#A(t (19) (asdf::load-system fmakunbound (notinline asdf::load-system) proclaim asdf::system asdf::keys (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::*load-system-operation* apply t #Y(asdf::load-system nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 15 10 14 11 13 4 13 3 19 4 12 11 13 73 29) #198# #1# 120732) si::fset function "Shorthand for `(operate 'asdf:load-op system)`.
See OPERATE for details." si::set-documentation)) #1# 120732) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #199=#A(t (9) (asdf::load-systems fmakunbound (notinline asdf::load-systems) proclaim asdf::systems asdf::load-system map #Y(asdf::load-systems nil nil (27 45 4 77 15 5 13 0 19 3 6 29) #199# #1# 120998) si::fset)) #1# 120998) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #200=#A(t (9) (asdf::component-loaded-p asdf::c asdf::load-op asdf::find-component asdf::component-operation-times gethash t #Y(asdf::component-loaded-p nil nil (24 45 1 26 15 2 13 0 77 19 2 3 12 19 1 4 12 19 2 5 73 39 4 11 6 73 29) #200# #1# 121069) si::fset)) #1# 121069) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #201=#A(t (6) (asdf::loaded-systems asdf::component-loaded-p asdf::registered-systems remove-if-not #Y(asdf::loaded-systems nil nil (26 15 1 19 0 2 12 19 2 3 29) #201# #1# 121181) si::fset)) #1# 121181) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #202=#A(t (10) (asdf::require-system asdf::s asdf::keys (t) asdf::load-system :force-not asdf::loaded-systems apply #Y(asdf::require-system nil nil (24 45 1 27 45 2 28 3 15 4 13 1 14 5 19 0 6 12 13 0 19 5 7 29) #202# #1# 121267) si::fset)) #1# 121267) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #203=#A(t (19) (asdf::compile-system fmakunbound (notinline asdf::compile-system) proclaim asdf::system asdf::args (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::compile-op apply t #Y(asdf::compile-system nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 15 10 15 11 13 4 13 3 19 4 12 11 13 73 29) #203# #1# 121387) si::fset function "Shorthand for `(asdf:operate 'asdf:compile-op system)`. See OPERATE
for details." si::set-documentation)) #1# 121387) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #204=#A(t (19) (asdf::test-system fmakunbound (notinline asdf::test-system) proclaim asdf::system asdf::args (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::test-op apply t #Y(asdf::test-system nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 15 10 15 11 13 4 13 3 19 4 12 11 13 73 29) #204# #1# 121675) si::fset function "Shorthand for `(asdf:operate 'asdf:test-op system)`. See OPERATE for
details." si::set-documentation)) #1# 121675) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #205=#A(t (9) (asdf::load-pathname fmakunbound (notinline asdf::load-pathname) proclaim *load-pathname* *compile-file-pathname* asdf::resolve-symlinks* #Y(asdf::load-pathname nil nil (26 11 4 73 40 4 11 5 73 12 19 1 6 29) #205# #1# 121951) si::fset)) #1# 121951) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #206=#A(t (15) (asdf::determine-system-pathname fmakunbound (notinline asdf::determine-system-pathname) proclaim pathname asdf::load-pathname asdf::file-pathname asdf::pathname-directory-pathname asdf::directory-pathname :type :directory asdf::subpathname asdf::default-directory #Y(asdf::determine-system-pathname nil nil (24 45 4 26 19 0 5 45 6 10 0 39 6 13 0 19 1 7 45 8 10 2 39 12 13 0 13 2 14 9 14 10 19 4 11 73 40 9 10 0 73 40 4 19 0 12 43 2 29) #206# #1# 122140) si::fset)) #1# 122140) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 15 12 19 2 16 1 0 73 29) #207=#A(t (17) (asdf::find-class* fmakunbound (notinline asdf::find-class*) proclaim asdf::x t asdf::errorp asdf::environment #:g940 #208=(or standard-class built-in-class) typep symbol find-class (#208# symbol) si::etypecase-error #Y(asdf::find-class* nil nil (24 45 4 25 40 3 14 5 46 6 25 40 2 77 46 7 26 10 2 45 8 13 0 15 9 19 2 10 39 6 10 3 73 38 27 13 0 15 11 19 2 10 39 12 13 3 13 2 13 1 19 3 12 38 7 13 0 1 13 17 14 43 1 29) #207# #1# 122705) si::fset)) #1# 122705) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 26 12 19 2 27 1 0 73 29) #209=#A(t (28) (asdf::class-for-type fmakunbound (notinline asdf::class-for-type) proclaim asdf::parent type *package* asdf::find-symbol* :asdf #:loop-list943 symbol class 0 find-class asdf::component subtypep :file eq asdf::module #:loop-it-944 asdf::module-default-component-class asdf::component-parent asdf::*default-component-class* asdf::find-class* "don't recognize component type ~A" asdf::sysdef-error #Y(asdf::class-for-type nil nil (24 45 4 24 45 5 26 58 60 96 77 13 1 13 1 14 6 19 2 7 12 13 1 14 8 19 2 7 6 3 12 46 9 46 10 75 45 11 57 12 61 2 2 56 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 39 7 13 2 77 19 2 13 51 1 10 1 39 12 13 1 15 14 19 1 13 12 19 2 15 39 6 10 1 73 36 4 35 0 0 62 43 1 43 2 63 73 40 87 13 0 11 16 17 17 39 69 58 60 55 75 45 18 75 45 19 57 12 61 2 6 37 10 5 51 2 10 2 76 39 4 35 0 1 13 2 19 1 20 51 1 39 6 10 1 73 36 3 13 2 19 1 21 51 2 35 0 0 62 43 1 43 1 63 73 40 4 11 22 73 12 77 19 2 23 73 40 8 15 24 13 0 19 2 25 29) #209# #1# 122870) si::fset)) #1# 122870) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 20 12 19 2 21 15 0 15 22 15 23 19 3 24 1 0 73 29) #210=#A(t (25) (asdf::maybe-add-tree fmakunbound (notinline asdf::maybe-add-tree) proclaim asdf::tree asdf::op1 asdf::op2 asdf::c assoc asdf::first-op-tree asdf::it :test equal find #:g949 #:g950 rplacd #:g951 acons #:g952 #Y(asdf::maybe-add-tree nil nil (24 45 4 24 45 5 24 45 6 24 45 7 26 13 2 13 3 19 2 8 45 9 10 0 39 99 13 2 10 0 5 12 19 2 8 45 10 10 0 39 45 13 2 10 0 5 12 14 11 33 12 12 19 4 13 39 3 38 25 10 0 45 14 13 3 10 1 5 3 45 15 13 1 10 0 17 16 10 0 43 1 43 1 38 33 10 1 45 17 13 4 10 3 6 1 12 10 2 5 12 19 3 18 45 19 13 1 10 0 17 16 10 0 43 1 43 1 43 1 10 4 73 38 17 13 3 13 2 10 1 6 2 6 1 12 13 4 19 3 18 43 1 29) #210# #1# 123652) si::fset function "Add the node C at /OP1/OP2 in TREE, unless it's there already.
Returns the new tree (which probably shares structure with the old one)" si::set-documentation)) #1# 123652) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #211=#A(t (14) (asdf::union-of-dependencies fmakunbound (notinline asdf::union-of-dependencies) proclaim asdf::deps asdf::new-tree si::%dolist-var asdf::dep asdf::op-tree asdf::op asdf::c asdf::maybe-add-tree #Y(asdf::union-of-dependencies nil nil (27 45 4 75 45 5 10 1 45 6 75 45 7 38 105 10 1 4 51 0 10 0 45 6 75 45 8 38 80 10 1 4 51 0 10 0 5 45 6 75 45 9 38 54 10 1 4 51 0 10 0 5 45 6 75 45 10 38 28 10 1 4 51 0 13 8 10 4 4 12 10 2 4 12 13 0 19 4 11 51 8 10 1 5 51 1 10 1 40 -30 43 2 10 1 5 51 1 10 1 40 -56 43 2 10 1 5 51 1 10 1 40 -82 43 2 10 1 5 51 1 10 1 40 -107 43 2 10 0 73 43 1 29) #211# #1# 124255) si::fset)) #1# 124255) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*serial-depends-on* si::*make-special boundp)) #1# 124557) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #212=#A(t (13) (asdf::sysdef-error-component fmakunbound (notinline asdf::sysdef-error-component) proclaim asdf::msg type asdf::name asdf::value "~&~@<The value specified for ~(~A~) ~A is ~S~@:>" asdf::strcat asdf::sysdef-error #Y(asdf::sysdef-error-component nil nil (24 45 4 24 45 5 24 45 6 24 45 7 26 13 3 15 8 19 2 9 12 13 2 13 1 13 0 19 4 10 29) #212# #1# 124592) si::fset)) #1# 124592) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 16 12 19 2 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #213=#A(t (21) (asdf::check-component-input fmakunbound (notinline asdf::check-component-input) proclaim type asdf::name asdf::weakly-depends-on asdf::depends-on asdf::components asdf::in-order-to listp ":depends-on must be a list." asdf::sysdef-error-component ":weakly-depends-on must be a list." ":components must be NIL or a list of components." ":in-order-to must be NIL or a list of components." #Y(asdf::check-component-input nil nil (24 45 4 24 45 5 24 45 6 24 45 7 24 45 8 24 45 9 26 10 2 16 10 76 39 12 15 11 13 5 13 4 13 2 19 4 12 10 3 16 10 76 39 12 15 13 13 5 13 4 13 3 19 4 12 10 1 16 10 76 39 12 15 14 13 5 13 4 13 1 19 4 12 10 0 16 10 39 6 10 0 4 16 10 76 73 39 12 15 15 13 5 13 4 13 0 19 4 12 29) #213# #1# 124772) si::fset function "A partial test of the values of a component." si::set-documentation)) #1# 124772) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 17 12 19 2 18 1 0 73 29) #214=#A(t (19) (asdf::%remove-component-inline-methods fmakunbound (notinline asdf::%remove-component-inline-methods) proclaim asdf::component asdf::+asdf-methods+ si::%dolist-var asdf::name asdf::m symbol-function remove-method #Y(nil nil nil (24 45 8 26 10 1 16 9 12 13 0 19 2 10 29) #214# #1# 125597) asdf::component-inline-methods map #:g987 #:g988 (setf asdf::component-inline-methods) #Y(asdf::%remove-component-inline-methods nil nil (24 45 4 26 11 5 45 6 75 45 7 38 24 10 1 4 51 0 77 34 11 12 13 2 19 1 12 12 19 3 13 10 1 5 51 1 10 1 40 -26 43 2 10 0 45 14 75 45 15 13 0 13 1 33 16 18 2 43 1 43 1 29) #214# #1# 125597) si::fset)) #1# 125597) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 40 12 19 2 41 1 0 73 29) #215=#A(t (42) (asdf::%define-component-inline-methods fmakunbound (notinline asdf::%define-component-inline-methods) proclaim asdf::ret rest asdf::+asdf-methods+ si::%dolist-var asdf::name symbol-name :keyword intern keyword asdf::data asdf::key asdf::value 0 second eq #:g1038 #:g1039 si::dm-too-few-arguments asdf::op asdf::qual #:g1040 #:g1041 asdf::o asdf::c asdf::body si::dm-too-many-arguments defmethod eql eval #:g1044 #:g1042 asdf::component-inline-methods adjoin #:g1043 (setf asdf::component-inline-methods) cddr #Y(asdf::%define-component-inline-methods nil nil (24 45 4 24 45 5 26 11 6 45 7 75 45 8 38 285 10 1 4 51 0 10 0 16 9 12 14 10 19 2 11 45 12 75 45 13 75 45 14 75 45 15 57 16 61 2 6 239 10 7 51 3 10 3 4 51 2 10 3 16 17 51 1 10 3 76 39 4 35 0 1 13 2 10 4 17 18 39 199 10 1 45 19 10 0 45 20 10 0 76 39 6 13 1 19 1 21 10 0 4 12 10 0 5 51 0 22 45 22 10 1 76 39 6 13 2 19 1 21 10 1 4 12 10 1 5 51 1 22 45 23 10 2 76 39 6 13 3 19 1 21 10 2 4 12 10 2 5 51 2 22 45 24 10 0 45 25 10 0 76 39 6 13 5 19 1 21 10 0 4 12 10 0 5 51 0 22 45 26 10 1 76 39 6 13 6 19 1 21 10 1 4 12 10 1 5 51 1 22 45 27 10 6 45 28 10 3 39 6 13 8 19 1 29 15 30 13 14 13 5 13 2 10 6 6 2 12 13 1 15 31 10 17 6 2 6 2 6 2 12 10 0 7 5 16 32 45 33 10 18 45 34 13 1 13 0 19 1 35 12 19 2 36 45 37 13 0 13 1 33 38 18 2 43 3 43 9 10 3 16 39 51 3 35 0 0 62 43 1 43 1 43 1 43 1 10 1 5 51 1 10 1 40 -287 75 73 43 2 29) #215# #1# 126075) si::fset)) #1# 126075) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #216=#A(t (10) (asdf::%refresh-component-inline-methods fmakunbound (notinline asdf::%refresh-component-inline-methods) proclaim asdf::component rest asdf::%remove-component-inline-methods asdf::%define-component-inline-methods #Y(asdf::%refresh-component-inline-methods nil nil (24 45 4 24 45 5 26 13 1 19 1 6 13 1 13 0 19 2 7 29) #216# #1# 126621) si::fset)) #1# 126621) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 109 12 19 2 110 1 0 73 29) #217=#A(t (111) (asdf::parse-component-form fmakunbound (notinline asdf::parse-component-form) proclaim asdf::parent asdf::options #:g1075 #:g1076 si::dm-too-few-arguments type asdf::name rest :components si::search-keyword #:g1077 si::missing-keyword eq asdf::components :pathname #:g1078 pathname :perform #:g1079 asdf::perform :explain #:g1080 asdf::explain :output-files #:g1081 asdf::output-files :operation-done-p #:g1082 asdf::operation-done-p :weakly-depends-on #:g1083 asdf::weakly-depends-on :depends-on #:g1084 asdf::depends-on :serial #:g1085 asdf::serial :in-order-to #:g1086 asdf::in-order-to :do-first #:g1087 asdf::do-first :version #:g1088 asdf::version asdf::versionp (:version :do-first :in-order-to :serial :depends-on :weakly-depends-on :operation-done-p :output-files :explain :perform :pathname :components) t si::check-keyword asdf::check-component-input asdf::find-component asdf::class-for-type typep asdf::duplicate-names :name error asdf::parse-version "~@<Invalid version ~S for component ~S~@[ of ~S~]~@:>" warn asdf::coerce-name :parent (asdf::components pathname asdf::perform asdf::explain asdf::output-files asdf::operation-done-p asdf::weakly-depends-on asdf::depends-on asdf::serial asdf::in-order-to) asdf::remove-keys asdf::args asdf::ret asdf::x asdf::find-system #Y(nil nil nil (24 45 71 26 13 0 77 19 2 72 29) #217# #1# 126781) complement remove-if #:g1090 append asdf::*serial-depends-on* reinitialize-instance apply make-instance asdf::component-pathname asdf::module #:g1093 #:loop-list1095 asdf::c-form asdf::c #:loop-list-head1096 #:loop-list-tail1097 0 asdf::component-name rplacd #:g1094 (setf asdf::module-components) asdf::compute-module-components-by-name #:g1099 #:g1100 (setf asdf::component-load-dependencies) #:g1101 asdf::compile-op asdf::load-op asdf::union-of-dependencies #:g1102 (setf asdf::component-in-order-to) #:g1103 #:g1104 (setf asdf::component-do-first) asdf::%refresh-component-inline-methods #Y(asdf::parse-component-form nil nil (24 45 4 24 45 5 26 10 0 45 6 10 0 45 7 10 0 76 39 6 13 1 19 1 8 10 0 4 12 10 0 5 51 0 22 45 9 10 1 76 39 6 13 2 19 1 8 10 1 4 12 10 1 5 51 1 22 45 10 10 2 45 11 13 3 15 12 19 2 13 45 14 13 0 1 15 17 16 39 4 75 38 3 10 0 45 17 13 5 15 18 19 2 13 45 19 13 0 1 15 17 16 39 4 75 38 3 10 0 45 20 13 7 15 21 19 2 13 45 22 13 0 1 15 17 16 39 4 75 38 3 10 0 45 23 13 9 15 24 19 2 13 45 25 13 0 1 15 17 16 39 4 75 38 3 10 0 45 26 13 11 15 27 19 2 13 45 28 13 0 1 15 17 16 39 4 75 38 3 10 0 45 29 13 13 15 30 19 2 13 45 31 13 0 1 15 17 16 39 4 75 38 3 10 0 45 32 13 15 15 33 19 2 13 45 34 13 0 1 15 17 16 39 4 75 38 3 10 0 45 35 13 17 15 36 19 2 13 45 37 13 0 1 15 17 16 39 4 75 38 3 10 0 45 38 13 19 15 39 19 2 13 45 40 13 0 1 15 17 16 39 4 75 38 3 10 0 45 41 13 21 15 42 19 2 13 45 43 13 0 1 15 17 16 39 4 75 38 3 10 0 45 44 13 23 15 45 19 2 13 45 46 13 0 1 15 17 16 39 4 75 38 3 10 0 45 47 13 25 15 48 19 2 13 45 49 13 0 1 15 17 16 39 4 75 38 3 10 0 45 50 13 1 1 15 17 16 76 45 51 13 28 15 52 14 53 19 3 54 13 27 13 26 13 11 13 9 13 23 13 5 19 6 55 10 31 39 30 13 31 13 26 19 2 56 39 21 13 31 13 26 19 2 56 12 13 31 13 27 19 2 57 12 19 2 58 76 39 10 15 59 14 60 13 26 19 3 61 10 0 39 21 13 1 77 19 2 62 76 39 12 15 63 13 1 13 26 13 31 19 4 64 14 60 13 26 19 1 65 12 14 18 13 21 14 66 13 31 15 67 13 25 19 2 68 7 7 45 69 13 32 13 27 19 2 56 45 70 10 13 39 24 34 73 16 74 12 13 13 19 2 75 45 76 13 12 13 0 19 2 77 51 12 43 1 11 78 39 8 14 78 10 11 3 51 11 10 0 39 12 15 79 13 0 13 1 19 3 80 38 18 15 81 13 33 13 29 19 2 57 12 13 1 19 3 80 51 0 13 0 19 1 82 13 0 15 83 19 2 58 39 131 75 48 78 10 0 45 84 58 60 100 77 13 27 46 85 46 86 75 45 87 75 45 10 75 6 1 45 88 10 0 45 89 57 90 61 2 2 56 10 6 2 39 4 35 0 1 10 6 4 51 5 10 6 5 51 6 13 9 13 5 19 2 0 51 4 13 4 19 1 91 51 3 13 1 10 4 6 1 51 1 17 92 10 18 39 5 10 3 52 78 35 0 0 10 2 5 73 36 7 62 43 2 43 1 43 1 43 2 63 45 93 13 0 13 1 33 94 18 2 43 1 43 1 44 1 13 0 19 1 95 10 0 45 96 10 12 45 97 13 0 13 1 33 98 18 2 43 1 43 1 10 0 45 99 13 8 15 100 15 100 10 12 7 2 6 2 12 15 101 15 101 10 12 7 2 6 2 6 2 12 19 2 102 45 103 13 0 13 1 33 104 18 2 43 1 43 1 10 0 45 105 13 6 15 100 15 101 10 12 7 2 6 2 6 1 12 19 2 102 45 106 13 0 13 1 33 107 18 2 43 1 43 1 13 0 13 27 19 2 108 10 0 73 43 2 43 30 29) #217# #1# 126781) si::fset)) #1# 126781) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #218=#A(t (13) (asdf::reset-system fmakunbound (notinline asdf::reset-system) proclaim asdf::system asdf::keys (t) asdf::proto-system change-class reinitialize-instance apply #Y(asdf::reset-system nil nil (24 45 4 27 45 5 28 6 13 1 15 7 19 2 8 12 15 4 19 2 8 15 9 13 1 13 0 19 3 10 29) #218# #1# 129789) si::fset)) #1# 129789) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 40 12 19 2 41 1 0 73 29) #219=#A(t (42) (asdf::do-defsystem fmakunbound (notinline asdf::do-defsystem) proclaim asdf::name asdf::options (t :defsystem-depends-on :class :pathname) pathname asdf::system class asdf::defsystem-depends-on asdf::coerce-name asdf::system-registered-p asdf::registered get-universal-time rplaca :name make-instance asdf::register-system asdf::registered! :source-file asdf::load-pathname asdf::reset-system (:class) asdf::remove-keys asdf::component-options asdf::*systems-being-defined* si::hash-set asdf::load-systems apply asdf::class-for-type type-of eq change-class :module :pathname asdf::determine-system-pathname asdf::parse-component-form #Y(nil nil nil (26 13 4 19 1 11 45 4 13 0 19 1 12 45 13 10 0 39 10 13 0 19 0 14 17 15 38 14 15 8 14 16 13 1 19 3 17 12 19 1 18 45 19 10 0 5 12 14 16 13 2 14 20 19 0 21 12 19 5 22 45 8 15 23 13 7 19 2 24 45 25 13 4 14 26 13 1 19 3 27 15 28 13 5 19 2 29 77 13 6 19 2 30 45 9 10 2 16 31 12 10 0 17 32 76 39 8 13 2 13 0 19 2 33 43 1 77 14 34 13 4 14 35 13 7 19 1 36 12 10 0 7 5 12 19 2 37 43 5 29) #219# #1# 129961) asdf::call-with-system-definitions #Y(asdf::do-defsystem nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 3 15 8 46 9 22 40 2 77 46 10 34 38 12 19 1 39 29) #219# #1# 129961) si::fset)) #1# 129961) #Y(si::bytecodes nil nil (15 0 1 10 12 14 11 9 2 19 4 12 1 0 73 29) #220=#A(t (13) (asdf::defsystem #:g1112 #:g1111 #:g1113 si::dm-too-few-arguments asdf::name asdf::options apply 'asdf::do-defsystem quote #Y(asdf::defsystem nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 15 7 15 8 15 9 10 1 6 2 12 15 9 10 0 6 2 6 4 73 29) #220# #1# 131570) t si::fset)) #1# 131570) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #221=#A(t (17) (asdf::run-shell-command fmakunbound (notinline asdf::run-shell-command) proclaim asdf::control-string asdf::args format apply asdf::command "; $ ~A~%" asdf::asdf-message ext::system #Y(asdf::run-shell-command nil nil (24 45 4 27 45 5 15 6 77 13 1 13 0 19 4 7 45 8 15 9 13 0 19 2 10 10 0 16 11 43 1 29) #221# #1# 131655) si::fset function "Interpolate ARGS into CONTROL-STRING as if by FORMAT, and
synchronously execute the result using a Bourne-compatible shell, with
output to *VERBOSE-OUT*.  Returns the shell's exit code." si::set-documentation)) #1# 131655) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 15 0 15 8 15 9 19 3 10 1 0 73 29) #222=#A(t (11) (asdf::system-definition-pathname fmakunbound (notinline asdf::system-definition-pathname) proclaim asdf::x asdf::system-source-file #Y(asdf::system-definition-pathname nil nil (24 45 4 26 13 0 19 1 5 29) #222# #1# 136672) si::fset function "Function ASDF:SYSTEM-DEFINITION-PATHNAME is obsolete.
It used to expose ASDF internals with subtle differences with respect to
user expectations, that have been refactored away since.
We recommend you use ASDF:SYSTEM-SOURCE-FILE instead
for a mostly compatible replacement that we're supporting,
or even ASDF:SYSTEM-SOURCE-DIRECTORY or ASDF:SYSTEM-RELATIVE-PATHNAME
if that's whay you mean." si::set-documentation)) #1# 136672) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #223=#A(t (14) (asdf::system-source-file (asdf::system) (asdf::system) asdf::system asdf::source-file slot-boundp asdf::component-name asdf::component-pathname asdf::probe-asd asdf::%set-system-source-file asdf::%system-source-file #Y(asdf::system-source-file nil nil (24 45 3 26 13 0 1 4 17 5 76 39 22 13 0 19 1 6 12 13 0 19 1 7 12 19 2 8 12 13 0 19 2 9 13 0 19 1 10 29) #223# #1# 138315) t clos::install-method)) #1# 138315) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #224=#A(t (9) (asdf::system-source-file (string) (asdf::system-name) asdf::system-name asdf::find-system asdf::%system-source-file #Y(asdf::system-source-file nil nil (24 45 3 26 13 0 19 1 4 12 19 1 5 29) #224# #1# 138617) t clos::install-method)) #1# 138617) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #225=#A(t (9) (asdf::system-source-file (symbol) (asdf::system-name) asdf::system-name asdf::find-system asdf::%system-source-file #Y(asdf::system-source-file nil nil (24 45 3 26 13 0 19 1 4 12 19 1 5 29) #225# #1# 138721) t clos::install-method)) #1# 138721) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 15 0 15 9 15 10 19 3 11 1 0 73 29) #226=#A(t (12) (asdf::system-source-directory fmakunbound (notinline asdf::system-source-directory) proclaim asdf::system-designator asdf::system-source-file asdf::pathname-directory-pathname #Y(asdf::system-source-directory nil nil (24 45 4 26 13 0 19 1 5 12 19 1 6 29) #226# #1# 138825) si::fset function "Return a pathname object corresponding to the
directory in which the system specification (.asd file) is
located." si::set-documentation)) #1# 138825) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #227=#A(t (11) (asdf::relativize-directory fmakunbound (notinline asdf::relativize-directory) proclaim directory stringp :relative :absolute eq #Y(asdf::relativize-directory nil nil (24 45 4 26 10 0 16 5 39 10 14 6 10 0 6 2 73 38 23 10 0 4 12 11 7 17 8 39 10 14 6 10 0 5 3 73 38 4 10 0 73 29) #227# #1# 139068) si::fset)) #1# 139068) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #228=#A(t (14) (asdf::relativize-pathname-directory fmakunbound (notinline asdf::relativize-pathname-directory) proclaim asdf::pathspec pathname asdf::p :directory pathname-directory asdf::relativize-directory :defaults make-pathname #Y(asdf::relativize-pathname-directory nil nil (24 45 4 26 10 0 16 5 45 6 14 7 13 0 19 1 8 12 19 1 9 12 14 10 13 0 19 4 11 43 1 29) #228# #1# 139276) si::fset)) #1# 139276) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #229=#A(t (13) (asdf::system-relative-pathname fmakunbound (notinline asdf::system-relative-pathname) proclaim asdf::system asdf::name (nil :type) type asdf::system-source-directory :type asdf::subpathname #Y(asdf::system-relative-pathname nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 13 2 19 1 8 12 13 1 14 9 13 0 19 4 10 29) #229# #1# 139460) si::fset)) #1# 139460) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #230=#A(t (14) (asdf::first-feature fmakunbound (notinline asdf::first-feature) proclaim asdf::features si::%dolist-var asdf::x consp :or asdf::feature asdf::val asdf::featurep #Y(asdf::first-feature nil nil (24 45 4 26 58 60 75 10 1 45 5 75 45 6 38 57 10 1 4 51 0 10 0 16 7 39 16 10 0 4 12 14 8 10 0 5 3 12 72 2 38 7 13 0 13 0 72 2 47 1 9 45 10 13 1 19 1 11 39 6 10 0 73 36 4 43 2 10 1 5 51 1 10 1 40 -59 75 73 43 2 63 29) #230# #1# 139584) si::fset)) #1# 139584) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #231=#A(t (5) (asdf::implementation-type (:abcl (:acl :allegro) (:ccl :clozure) :clisp (:corman :cormanlisp) :cmu :ecl :gcl (:lw :lispworks) :mcl :mkcl :sbcl :scl :symbolics :xcl) asdf::first-feature #Y(asdf::implementation-type nil nil (26 15 1 19 1 2 29) #231# #1# 140097) si::fset)) #1# 140097) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #232=#A(t (5) (asdf::operating-system (:cygwin (:win :windows :mswindows :win32 :mingw32) (:linux :linux :linux-target) (:macosx :macosx :darwin :darwin-target :apple) (:solaris :solaris :sunos) (:bsd :bsd :freebsd :netbsd :openbsd) :unix :genera) asdf::first-feature #Y(asdf::operating-system nil nil (26 15 1 19 1 2 29) #232# #1# 140295) si::fset)) #1# 140295) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #233=#A(t (5) (asdf::architecture ((:x64 :amd64 :x86-64 :x86_64 :x8664-target (:and :word-size=64 :pc386)) (:x86 :x86 :i386 :i486 :i586 :i686 :pentium3 :pentium4 :pc386 :iapx386 :x8632-target) (:ppc64 :ppc64 :ppc64-target) (:ppc32 :ppc32 :ppc32-target :ppc :powerpc) :hppa64 :hppa :sparc64 (:sparc32 :sparc32 :sparc) :mipsel :mipseb :mips :alpha (:arm :arm :arm-target) :imach (:java :java :java-1.4 :java-1.5 :java-1.6 :java-1.7)) asdf::first-feature #Y(asdf::architecture nil nil (26 15 1 19 1 2 29) #233# #1# 140661) si::fset)) #1# 140661) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #234=#A(t (12) (asdf::lisp-version-string lisp-implementation-version asdf::s "~A~@[-~A~]" ext::lisp-implementation-vcs-id asdf::vcs-id length min subseq format #Y(asdf::lisp-version-string nil nil (26 19 0 1 45 2 77 15 3 13 0 19 0 4 45 5 13 0 9 0 10 0 16 6 12 9 8 19 2 7 12 19 3 8 12 43 1 19 4 9 12 10 0 6 2 4 73 43 1 29) #234# #1# 141273) si::fset)) #1# 141273) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 20 12 19 2 21 1 0 73 29) #235=#A(t (22) (asdf::implementation-identifier fmakunbound (notinline asdf::implementation-identifier) proclaim #\_ asdf::x " /:;&^\\|?<>(){}[]$#`'\"" find #Y(nil nil nil (24 45 5 26 13 0 15 6 19 2 7 29) #235# #1# 143262) "~(~a~@{~@[-~a~]~}~)" asdf::implementation-type lisp-implementation-type asdf::lisp-version-string lisp-implementation-version asdf::operating-system software-type asdf::architecture machine-type format substitute-if #Y(asdf::implementation-identifier nil nil (26 15 4 34 8 12 77 15 9 19 0 10 73 40 4 19 0 11 12 19 0 12 73 40 4 19 0 13 12 19 0 14 73 40 4 19 0 15 12 19 0 16 73 40 4 19 0 17 12 19 6 18 12 19 3 19 29) #235# #1# 143262) si::fset)) #1# 143262) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 5 12 19 2 6 1 0 73 29) #236=#A(t (7) (asdf::hostname fmakunbound (notinline asdf::hostname) proclaim machine-instance #Y(asdf::hostname nil nil (26 19 0 4 29) #236# #1# 143645) si::fset)) #1# 143645) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #237=#A(t (6) (asdf::inter-directory-separator asdf::os-unix-p #\: #\; #Y(asdf::inter-directory-separator nil nil (26 19 0 1 39 6 1 2 73 38 4 1 3 73 29) #237# #1# 143985) si::fset)) #1# 143985) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #238=#A(t (9) (asdf::user-homedir fmakunbound (notinline asdf::user-homedir) proclaim user-homedir-pathname asdf::pathname-directory-pathname asdf::truenamize #Y(asdf::user-homedir nil nil (26 19 0 4 12 19 1 5 12 19 1 6 29) #238# #1# 144176) si::fset)) #1# 144176) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #239=#A(t (20) (asdf::ensure-pathname* fmakunbound (notinline asdf::ensure-pathname*) proclaim asdf::x asdf::want-absolute asdf::want-directory asdf::fmt asdf::args length plusp asdf::ensure-directory-pathname pathname asdf::p asdf::absolute-pathname-p "ignore relative pathname" "Invalid relative pathname ~A~@[ ~?~]" cerror #Y(asdf::ensure-pathname* nil nil (24 45 4 24 45 5 24 45 6 24 45 7 27 45 8 57 0 60 62 10 5 16 9 16 10 73 39 52 10 3 39 8 13 5 19 1 11 38 5 10 5 16 12 45 13 10 5 39 26 13 0 19 1 14 76 39 18 15 15 15 16 13 6 13 3 13 2 19 5 17 75 73 36 1 10 0 73 43 1 63 29) #239# #1# 144411) si::fset)) #1# 144411) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 21 12 19 2 22 1 0 73 29) #240=#A(t (23) (asdf::split-pathnames* fmakunbound (notinline asdf::split-pathnames*) proclaim asdf::x asdf::want-absolute asdf::want-directory asdf::fmt asdf::args :separator asdf::inter-directory-separator string asdf::split-string #:loop-list1117 asdf::dir #:loop-list-head1118 #:loop-list-tail1119 0 asdf::ensure-pathname* apply rplacd #Y(asdf::split-pathnames* nil nil (24 45 4 24 45 5 24 45 6 24 45 7 27 45 8 58 60 92 77 13 5 14 9 19 0 10 16 11 12 19 3 12 12 46 13 46 14 75 6 1 45 15 10 0 45 16 57 17 61 2 2 45 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 15 18 13 3 13 9 13 8 13 7 13 6 19 6 19 6 1 51 1 17 20 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #240# #1# 144828) si::fset)) #1# 144828) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #241=#A(t (14) (asdf::getenv-pathname fmakunbound (notinline asdf::getenv-pathname) proclaim asdf::x (nil :want-directory :want-absolute) asdf::want-absolute asdf::want-directory asdf::getenv asdf::s "from (getenv ~S)" asdf::ensure-pathname* #Y(asdf::getenv-pathname nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 13 2 19 1 8 45 9 13 0 13 2 13 1 15 10 13 3 19 5 11 29) #241# #1# 145096) si::fset)) #1# 145096) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 1 0 73 29) #242=#A(t (16) (asdf::getenv-pathnames fmakunbound (notinline asdf::getenv-pathnames) proclaim asdf::x (nil :want-directory :want-absolute) asdf::want-absolute asdf::want-directory asdf::getenv asdf::s length plusp "from (getenv ~S) = ~S" asdf::split-pathnames* #Y(asdf::getenv-pathnames nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 13 2 19 1 8 45 9 10 0 16 10 16 11 73 39 16 13 0 13 2 13 1 15 12 13 3 13 0 19 6 13 29) #242# #1# 145252) si::fset)) #1# 145252) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #243=#A(t (11) (asdf::getenv-absolute-directory fmakunbound (notinline asdf::getenv-absolute-directory) proclaim asdf::x :want-absolute t :want-directory asdf::getenv-pathname #Y(asdf::getenv-absolute-directory nil nil (24 45 4 26 13 0 14 5 14 6 14 7 14 6 19 5 8 29) #243# #1# 145448) si::fset)) #1# 145448) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #244=#A(t (11) (asdf::getenv-absolute-directories fmakunbound (notinline asdf::getenv-absolute-directories) proclaim asdf::x :want-absolute t :want-directory asdf::getenv-pathnames #Y(asdf::getenv-absolute-directories nil nil (24 45 4 26 13 0 14 5 14 6 14 7 14 6 19 5 8 29) #244# #1# 145544) si::fset)) #1# 145544) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #245=#A(t (20) (asdf::get-folder-path fmakunbound (notinline asdf::get-folder-path) proclaim asdf::folder #:g1121 :local-appdata "LOCALAPPDATA" asdf::getenv-absolute-directory :appdata "APPDATA" :common-appdata "ALLUSERSAPPDATA" "ALLUSERSPROFILE" "Application Data/" asdf::subpathname* (:local-appdata :appdata :common-appdata) si::ecase-error #Y(asdf::get-folder-path nil nil (24 45 4 26 10 0 45 5 10 0 42 6 8 15 7 19 1 8 38 41 42 9 8 15 10 19 1 8 38 31 42 11 22 15 12 19 1 8 73 40 12 15 13 19 1 8 12 15 14 19 2 15 38 7 13 0 1 16 17 17 43 1 29) #245# #1# 145643) si::fset)) #1# 145643) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 36 12 19 2 37 1 0 73 29) #246=#A(t (38) (asdf::user-configuration-directories fmakunbound (notinline asdf::user-configuration-directories) proclaim asdf::os-unix-p "XDG_CONFIG_HOME" asdf::getenv-absolute-directory "common-lisp/" asdf::subpathname* "XDG_CONFIG_DIRS" asdf::getenv-absolute-directories #:loop-list1125 asdf::dir #:loop-list-head1126 #:loop-list-tail1127 0 "common-lisp/" rplacd asdf::os-windows-p :local-appdata asdf::get-folder-path "common-lisp/config/" :appdata "common-lisp/config/" asdf::user-homedir ".config/common-lisp/" asdf::subpathname append asdf::dirs asdf::absolute-pathname-p remove-if-not :from-end t :test equal remove-duplicates #Y(asdf::user-configuration-directories nil nil (26 19 0 4 73 39 92 15 5 19 1 6 12 15 7 19 2 8 12 58 60 75 77 15 9 19 1 10 12 46 11 46 12 75 6 1 45 13 10 0 45 14 57 15 61 2 2 37 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 13 3 15 16 19 2 8 6 1 51 1 17 17 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 3 73 12 19 0 18 73 39 27 14 19 19 1 20 12 15 21 19 2 8 12 14 22 19 1 20 12 15 23 19 2 8 6 2 73 12 19 0 24 12 15 25 19 2 26 6 1 12 19 3 27 45 28 33 29 12 13 0 19 2 30 12 14 31 14 32 14 33 15 34 19 5 35 43 1 29) #246# #1# 146260) si::fset)) #1# 146260) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 12 12 19 2 13 1 0 73 29) #247=#A(t (14) (asdf::system-configuration-directories fmakunbound (notinline asdf::system-configuration-directories) proclaim asdf::os-unix-p (#P"/etc/common-lisp/") asdf::os-windows-p :common-appdata asdf::get-folder-path "common-lisp/config/" asdf::subpathname* asdf::it #Y(asdf::system-configuration-directories nil nil (26 19 0 4 39 6 1 5 73 38 35 19 0 6 73 39 29 14 7 19 1 8 12 15 9 19 2 10 45 11 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 29) #247# #1# 146998) si::fset)) #1# 146998) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 25 12 19 2 26 1 0 73 29) #248=#A(t (27) (asdf::in-first-directory fmakunbound (notinline asdf::in-first-directory) proclaim asdf::dirs asdf::x (nil :direction) :input asdf::direction #:g1133 nil :probe asdf::probe-file* :output :io identity (:probe :input nil :io :output) si::ecase-error asdf::fun #:loop-list1131 asdf::dir #:loop-it-1132 0 asdf::ensure-directory-pathname asdf::merge-pathnames* #Y(asdf::in-first-directory nil nil (24 45 4 24 45 5 28 6 22 40 3 14 7 46 8 58 60 116 10 1 45 9 10 0 41 10 7 41 7 4 42 11 5 1 12 38 17 41 13 4 42 14 5 1 15 38 7 13 0 1 16 17 17 43 1 45 18 77 13 4 46 19 46 20 75 45 21 57 22 61 2 2 52 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 39 18 13 4 13 7 13 2 19 1 23 12 19 2 24 12 20 1 23 51 1 39 6 10 1 73 36 5 35 0 0 62 73 43 1 43 2 43 1 63 29) #248# #1# 147356) si::fset)) #1# 147356) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #249=#A(t (13) (asdf::in-user-configuration-directory fmakunbound (notinline asdf::in-user-configuration-directory) proclaim asdf::x (nil :direction) :input asdf::direction asdf::user-configuration-directories :direction asdf::in-first-directory #Y(asdf::in-user-configuration-directory nil nil (24 45 4 28 5 22 40 3 14 6 46 7 19 0 8 12 13 1 14 9 13 0 19 4 10 29) #249# #1# 147674) si::fset)) #1# 147674) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #250=#A(t (13) (asdf::in-system-configuration-directory fmakunbound (notinline asdf::in-system-configuration-directory) proclaim asdf::x (nil :direction) :input asdf::direction asdf::system-configuration-directories :direction asdf::in-first-directory #Y(asdf::in-system-configuration-directory nil nil (24 45 4 28 5 22 40 3 14 6 46 7 19 0 8 12 13 1 14 9 13 0 19 4 10 29) #250# #1# 147823) si::fset)) #1# 147823) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #251=#A(t (11) (asdf::configuration-inheritance-directive-p fmakunbound (notinline asdf::configuration-inheritance-directive-p) proclaim asdf::x (:inherit-configuration :ignore-inherited-configuration) asdf::kw member asdf::length=n-p #Y(asdf::configuration-inheritance-directive-p nil nil (24 45 4 26 1 5 45 6 13 1 13 0 19 2 7 73 40 20 13 1 9 1 19 2 8 73 39 10 10 1 4 12 13 0 19 2 7 43 1 29) #251# #1# 147975) si::fset)) #1# 147975) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 1 0 73 29) #252=#A(t (20) (asdf::report-invalid-form fmakunbound (notinline asdf::report-invalid-form) proclaim asdf::reporter asdf::args #:g1135 null typep error asdf::invalid-configuration apply function #253=(or symbol string) cons append (null function #253# cons) si::etypecase-error #Y(asdf::report-invalid-form nil nil (24 45 4 27 45 5 10 1 45 6 13 0 15 7 19 2 8 39 12 15 9 15 10 13 1 19 3 11 38 69 13 0 15 12 19 2 8 39 10 13 2 13 1 19 2 11 38 51 13 0 15 13 19 2 8 39 12 15 9 13 2 13 1 19 3 11 38 31 13 0 15 14 19 2 8 39 16 15 11 13 2 13 1 19 2 15 12 19 2 11 38 7 13 0 1 16 17 17 43 1 29) #252# #1# 148174) si::fset)) #1# 148174) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*ignored-configuration-form* si::*make-special boundp)) #1# 148463) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 33 12 19 2 34 1 0 73 29) #254=#A(t (35) (asdf::validate-configuration-form fmakunbound (notinline asdf::validate-configuration-form) proclaim asdf::form asdf::tag asdf::directive-validator (nil :invalid-form-reporter :location) asdf::location asdf::invalid-form-reporter consp eq t asdf::*ignored-configuration-form* :form :location asdf::report-invalid-form asdf::inherit asdf::ignore-invalid-p asdf::x #:loop-list1137 asdf::directive 0 asdf::configuration-inheritance-directive-p #:g1139 + :ignore-invalid-entries = :arguments "~@<One and only one of ~S or ~S is required.~@:>" :inherit-configuration :ignore-inherited-configuration nreverse #Y(asdf::validate-configuration-form nil nil (24 45 4 24 45 5 24 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 57 0 60 224 10 5 16 10 39 9 10 5 4 12 10 4 17 11 76 39 22 11 12 52 13 13 1 14 14 13 5 14 15 13 2 19 5 16 75 73 36 0 58 60 182 8 0 45 17 75 45 18 10 7 6 1 45 19 77 10 9 5 12 46 20 46 21 57 22 61 2 2 111 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 19 1 23 39 20 8 1 45 24 13 6 13 0 19 2 25 51 6 43 1 11 12 38 55 13 1 11 26 17 11 39 9 11 12 51 4 11 12 38 39 13 10 13 1 20 1 23 39 5 11 12 38 26 10 4 39 4 75 38 19 11 12 52 13 13 8 14 14 13 1 14 15 13 9 19 5 16 75 39 8 13 1 10 3 3 51 3 35 0 0 13 5 9 1 19 2 27 76 39 17 13 8 14 28 15 29 14 30 11 31 6 3 12 19 3 16 10 3 16 32 36 6 62 73 43 2 43 1 43 1 43 1 63 63 29) #254# #1# 148506) si::fset)) #1# 148506) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 1 0 73 29) #255=#A(t (16) (asdf::validate-configuration-file fmakunbound (notinline asdf::validate-configuration-file) proclaim asdf::file asdf::validator (nil :description) asdf::description asdf::read-file-forms asdf::forms asdf::length=n-p "~@<One and only one form allowed for ~A. Got: ~3i~_~S~@:>~%" error :location #Y(asdf::validate-configuration-file nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 13 2 19 1 8 45 9 13 0 9 1 19 2 10 76 39 10 15 11 13 1 13 0 19 3 12 13 2 10 0 4 12 14 13 13 3 20 3 23 43 1 29) #255# #1# 149798) si::fset)) #1# 149798) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #256=#A(t (11) (asdf::hidden-file-p fmakunbound (notinline asdf::hidden-file-p) proclaim pathname pathname-name asdf::first-char #\. equal #Y(asdf::hidden-file-p nil nil (24 45 4 26 13 0 19 1 5 12 19 1 6 12 1 7 17 8 29) #256# #1# 150115) si::fset)) #1# 150115) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #257=#A(t (12) (asdf::directory* fmakunbound (notinline asdf::directory*) proclaim asdf::pathname-spec asdf::keys (t) directory append apply #Y(asdf::directory* nil nil (24 45 4 27 45 5 28 6 15 7 13 1 13 0 77 19 2 8 12 19 3 9 29) #257# #1# 150202) si::fset)) #1# 150202) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 55 12 19 2 56 15 0 15 57 15 58 19 3 59 1 0 73 29) #258=#A(t (60) (asdf::validate-configuration-directory fmakunbound (notinline asdf::validate-configuration-directory) proclaim directory asdf::tag asdf::validator (nil :invalid-form-reporter) asdf::invalid-form-reporter #:g1156 #:g1157 0 error si::temp #Y(nil nil nil (24 45 13 26 10 0 51 2 35 1 0 29) #258# #1# 150773) si::*handler-clusters* asdf::hidden-file-p :name :wild :type "conf" :defaults make-pathname asdf::directory* remove-if condition string< :key namestring sort asdf::files #:loop-list1159 asdf::file #:loop-list-head1160 #:loop-list-tail1161 #:g1162 asdf::ignore-invalid-p asdf::read-file-forms #:loop-list1164 asdf::form #:loop-list-head1165 #:loop-list-tail1166 :ignore-invalid-entries eq t rplacd asdf::*ignored-configuration-form* :form :location asdf::report-invalid-form copy-list #:g1163 last (:inherit-configuration) append #Y(asdf::validate-configuration-directory nil nil (24 45 4 24 45 5 24 45 6 28 7 22 40 2 77 46 8 57 9 60 69 75 45 10 57 11 61 1 43 15 12 34 14 3 6 1 12 11 15 3 48 15 15 16 14 17 14 18 14 19 15 20 14 21 13 6 19 6 22 12 19 1 23 12 19 2 24 36 2 44 1 10 1 45 25 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 33 26 12 14 27 33 28 12 19 4 29 45 30 13 3 58 60 213 77 13 1 46 31 46 32 75 6 1 45 33 10 0 45 34 57 11 61 2 2 178 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 35 58 60 123 75 45 36 77 13 6 19 1 37 12 46 38 46 39 75 6 1 45 40 10 0 45 41 57 11 61 2 2 80 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 11 42 17 43 39 7 11 44 51 5 38 45 13 16 13 3 20 1 23 39 13 13 1 10 3 6 1 51 1 17 45 38 24 10 5 39 7 11 44 52 46 38 14 13 15 14 47 13 3 14 48 13 11 19 5 49 35 0 0 10 2 5 73 36 6 62 43 2 43 2 43 1 63 16 50 45 51 13 1 10 0 17 45 10 0 43 1 43 1 39 10 10 1 5 12 19 1 52 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 53 19 2 54 7 2 73 43 1 29) #258# #1# 150773) si::fset function "Map the VALIDATOR across the .conf files in DIRECTORY, the TAG will
be applied to the results to yield a configuration form.  Current
values of TAG include :source-registry and :output-translations." si::set-documentation)) #1# 150773) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*output-translations* si::*make-special boundp variable "Either NIL (for uninitialized), or a list of one element,
said element itself being a sorted list of mappings.
Each mapping is a pair of a source pathname and destination pathname,
and the order is by decreasing length of namestring of the source pathname." si::set-documentation)) #1# 151935) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 57 30 1 5 15 6 19 1 7 12 15 8 14 9 32 0 18 3 40 34 19 0 10 39 25 14 11 19 1 12 73 40 6 14 13 19 1 12 12 15 14 15 15 14 9 32 0 18 4 40 3 1 16 43 1 52 0 1 0 73 29) #259=#A(t (17) (asdf::*user-cache* si::*make-special boundp asdf::x asdf::sub #Y(asdf::try nil nil (24 45 3 27 45 4 10 1 73 39 8 13 1 10 0 7 2 73 29) #259# #1# 152533) "XDG_CACHE_HOME" asdf::getenv-absolute-directory "common-lisp" :implementation asdf::os-windows-p :local-appdata asdf::get-folder-path :appdata "common-lisp" "cache" (:home ".cache" "common-lisp" :implementation))) #1# 152533) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 5 12 19 2 6 1 0 73 29) #260=#A(t (7) (asdf::output-translations fmakunbound (notinline asdf::output-translations) proclaim asdf::*output-translations* #Y(asdf::output-translations nil nil (26 11 4 4 73 29) #260# #1# 152926) si::fset)) #1# 152926) #Y(si::bytecodes nil nil (1 0 16 1 15 0 1 20 12 19 2 21 1 0 73 29) #261=#A(t (22) (#262=(setf asdf::output-translations) fmakunbound asdf::new-value copy-list > :key asdf::x #:g1172 #263=(eql t) typep pathname pathname-directory directory listp length (#263# pathname) si::etypecase-error #Y(nil nil nil (24 45 6 26 10 0 4 45 7 13 0 15 8 19 2 9 39 6 8 -1 73 38 44 13 0 15 10 19 2 9 39 29 10 1 4 12 19 1 11 45 12 10 0 16 13 39 7 10 0 16 14 38 4 8 0 73 43 1 38 7 13 0 1 15 17 16 43 1 29) #261# #1# 152989) stable-sort asdf::*output-translations* #Y(#262# nil nil (24 45 2 26 10 0 16 3 12 33 4 12 14 5 34 17 12 19 4 18 6 1 52 19 10 0 73 29) #261# #1# 152989) si::fset)) #1# 152989) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #264=#A(t (8) (asdf::output-translations-initialized-p fmakunbound (notinline asdf::output-translations-initialized-p) proclaim asdf::*output-translations* t #Y(asdf::output-translations-initialized-p nil nil (26 11 4 73 39 4 11 5 73 29) #264# #1# 153491) si::fset)) #1# 153491) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #265=#A(t (10) (asdf::clear-output-translations fmakunbound (notinline asdf::clear-output-translations) proclaim asdf::*output-translations* #Y(asdf::clear-output-translations nil nil (26 75 52 4 0 29) #265# #1# 153570) si::fset function "Undoes any initialization of the output translations.
You might want to call that before you dump an image that would be resumed
with a different configuration, so the configuration would be re-read then." si::set-documentation)) #1# 153570) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t &key (:directory boolean) (:wilden boolean)) (values (or null pathname) &optional)) asdf::resolve-location) proclaim)) #1# 153864) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 43 12 19 2 44 1 0 73 29) #266=#A(t (45) (asdf::resolve-relative-location-component fmakunbound (notinline asdf::resolve-relative-location-component) proclaim asdf::x (nil :wilden :directory) directory asdf::wilden #:g1176 pathname typep string :type :directory asdf::coerce-pathname cons :wilden t car asdf::merge-pathnames* #267=(eql :default-directory) asdf::default-directory asdf::relativize-pathname-directory #268=(eql :*/) asdf::*wild-directory* #269=(eql :**/) asdf::*wild-inferiors* #270=(eql :*.*.*) asdf::*wild-file* #271=(eql :implementation) asdf::implementation-identifier #272=(eql :implementation-type) asdf::implementation-type string-downcase #273=(eql :hostname) asdf::hostname (pathname string cons #267# #268# #269# #270# #271# #272# #273#) si::etypecase-error asdf::r asdf::absolute-pathname-p "~@<pathname ~S is not relative~@:>" error pathnamep #Y(asdf::resolve-relative-location-component nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 45 8 13 0 15 9 19 2 10 39 5 10 3 38 234 13 0 15 11 19 2 10 39 19 13 3 14 12 10 2 73 39 4 11 13 73 12 19 3 14 38 207 13 0 15 15 19 2 10 39 65 10 3 5 76 39 18 10 3 4 12 14 13 13 2 14 16 13 1 19 5 0 38 40 10 3 4 12 14 13 14 17 14 16 77 19 5 0 45 18 10 4 5 12 14 13 13 3 14 16 13 2 19 5 0 12 13 0 19 2 19 43 1 38 134 13 0 15 20 19 2 10 39 10 19 0 21 12 19 1 22 38 116 13 0 15 23 19 2 10 39 5 11 24 38 103 13 0 15 25 19 2 10 39 5 11 26 38 90 13 0 15 27 19 2 10 39 5 11 28 38 77 13 0 15 29 19 2 10 39 14 19 0 30 12 14 12 14 13 19 3 14 38 55 13 0 15 31 19 2 10 39 18 19 0 32 12 19 1 33 12 14 12 14 13 19 3 14 38 29 13 0 15 34 19 2 10 39 14 19 0 35 12 14 12 14 13 19 3 14 38 7 13 0 1 36 17 37 43 1 45 38 13 0 19 1 39 39 8 15 40 13 3 19 2 41 10 3 16 42 40 4 10 1 76 39 6 10 0 73 38 6 13 0 19 1 7 43 1 29) #266# #1# 154039) si::fset)) #1# 154039) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*here-directory* si::*make-special boundp variable "This special variable is bound to the currect directory during calls to
PROCESS-SOURCE-REGISTRY in order that we be able to interpret the :here
directive." si::set-documentation)) #1# 155459) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 44 12 19 2 45 1 0 73 29) #274=#A(t (46) (asdf::resolve-absolute-location-component fmakunbound (notinline asdf::resolve-absolute-location-component) proclaim asdf::x (nil :wilden :directory) directory asdf::wilden #:g1177 pathname typep string parse-namestring asdf::p asdf::ensure-directory-pathname cons :directory :wilden asdf::resolve-relative-location-component t asdf::merge-pathnames* #275=(eql :root) (:relative) make-pathname #276=(eql :home) asdf::user-homedir #277=(eql :here) asdf::*here-directory* :default-directory asdf::resolve-location #278=(eql :user-cache) asdf::*user-cache* #279=(eql :system-cache) "Using the :system-cache is deprecated. ~%~
Please remove it from your ASDF configuration" error #280=(eql :default-directory) asdf::default-directory (pathname string cons #275# #276# #277# #278# #279# #280#) si::etypecase-error asdf::r pathnamep asdf::s asdf::absolute-pathname-p "~@<Invalid designator for an absolute pathname: ~3i~_~S~@:>" #Y(asdf::resolve-absolute-location-component nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 57 0 60 309 10 3 45 8 13 0 15 9 19 2 10 39 5 10 4 38 245 13 0 15 11 19 2 10 39 25 13 4 19 1 12 45 13 10 4 39 8 13 0 19 1 14 38 3 10 0 43 1 38 212 13 0 15 15 19 2 10 39 62 10 4 5 76 39 18 10 4 4 12 14 16 13 3 14 17 13 2 19 5 0 38 35 10 4 5 12 14 16 13 3 14 17 13 2 19 5 18 12 10 4 4 12 14 16 14 19 14 17 77 19 5 0 12 19 2 20 36 1 38 142 13 0 15 21 19 2 10 39 30 14 16 15 22 19 2 23 45 13 10 3 39 8 13 0 19 1 7 38 4 10 0 73 43 1 36 1 38 104 13 0 15 24 19 2 10 39 6 19 0 25 38 90 13 0 15 26 19 2 10 39 22 11 27 73 40 4 11 28 73 12 14 16 14 19 14 17 77 19 5 29 38 60 13 0 15 30 19 2 10 39 15 14 31 14 16 14 19 14 17 77 19 5 29 38 37 13 0 15 32 19 2 10 39 8 15 33 19 1 34 38 21 13 0 15 35 19 2 10 39 6 19 0 36 38 7 13 0 1 37 17 38 43 1 45 39 10 2 39 6 10 4 16 40 76 39 8 13 0 19 1 7 38 3 10 0 45 41 13 0 19 1 42 76 39 8 15 43 13 5 19 2 34 10 0 73 43 2 63 29) #274# #1# 155649) si::fset)) #1# 155649) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 23 12 19 2 24 1 0 73 29) #281=#A(t (25) (asdf::resolve-location fmakunbound (notinline asdf::resolve-location) proclaim asdf::x (nil :wilden :directory) directory asdf::wilden atom :directory :wilden asdf::resolve-absolute-location-component t asdf::path asdf::morep asdf::component #:g1180 asdf::dir asdf::wild 0 #22# asdf::resolve-relative-location-component asdf::merge-pathnames* #Y(asdf::resolve-location nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 16 8 39 16 13 2 14 9 13 1 14 10 13 0 19 5 11 38 161 58 60 158 10 3 4 12 14 9 10 2 40 4 10 3 5 73 39 4 11 12 73 12 14 10 10 1 73 39 6 10 3 5 76 73 12 19 5 11 45 13 10 4 5 12 77 77 46 14 46 15 46 16 75 45 17 75 45 18 57 19 61 2 2 80 10 3 16 8 39 4 35 0 1 10 3 45 20 10 0 4 51 5 10 0 5 51 0 10 0 51 6 43 1 10 3 5 51 3 10 5 40 3 10 9 39 3 11 12 51 2 10 8 39 4 10 5 76 51 1 13 4 14 9 13 2 14 10 13 1 19 5 21 12 13 6 19 2 22 51 6 35 0 0 10 6 73 36 7 62 73 43 1 43 1 43 3 43 1 63 29) #281# #1# 157729) si::fset)) #1# 157729) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 1 0 73 29) #282=#A(t (16) (asdf::location-designator-p fmakunbound (notinline asdf::location-designator-p) proclaim asdf::x asdf::c (or string pathname (member :root :home :here :user-cache :system-cache :default-directory)) typep #Y(asdf::absolute-component-p nil nil (24 45 5 26 13 0 15 6 19 2 7 29) #282# #1# 158448) (or string pathname (member :default-directory :*/ :**/ :*.*.* :implementation :implementation-type)) #Y(asdf::relative-component-p nil nil (24 45 5 26 13 0 15 9 19 2 7 29) #282# #1# 158448) boolean consp every #Y(asdf::location-designator-p nil nil (24 45 4 26 30 2 8 10 13 2 15 11 19 2 7 73 40 38 13 2 32 1 18 1 73 40 29 10 2 16 12 73 39 22 10 2 4 12 32 1 18 1 73 39 11 32 0 12 10 2 5 12 19 2 13 43 2 29) #282# #1# 158448) si::fset)) #1# 158448) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 14 12 19 2 15 1 0 73 29) #283=#A(t (16) (asdf::location-function-p fmakunbound (notinline asdf::location-function-p) proclaim asdf::x asdf::length=n-p :function eq cadr symbolp consp caadr lambda cadadr #Y(asdf::location-function-p nil nil (24 45 4 26 13 0 9 2 19 2 5 73 39 52 10 0 4 12 11 6 17 7 73 39 41 10 0 16 8 16 9 73 40 32 10 0 16 8 16 10 73 39 23 10 0 16 11 12 1 12 17 7 73 39 11 10 0 16 13 12 9 2 19 2 5 29) #283# #1# 159023) si::fset)) #1# 159023) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 16 12 19 2 17 1 0 73 29) #284=#A(t (18) (asdf::validate-output-translations-directive fmakunbound (notinline asdf::validate-output-translations-directive) proclaim asdf::directive (:enable-user-cache :disable-cache nil) member consp asdf::length=n-p :include eq second (or string pathname null) typep asdf::location-designator-p asdf::location-function-p #Y(asdf::validate-output-translations-directive nil nil (24 45 4 26 13 0 15 5 19 2 6 73 40 86 10 0 16 7 73 39 79 13 0 9 2 19 2 8 39 50 10 0 4 12 11 9 17 10 39 11 10 0 16 11 12 15 12 19 2 13 40 28 10 0 4 12 19 1 14 39 19 10 0 16 11 12 19 1 14 40 9 10 0 16 11 12 19 1 15 73 40 18 13 0 9 1 19 2 8 73 39 8 10 0 4 12 19 1 14 29) #284# #1# 159241) si::fset)) #1# 159241) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #285=#A(t (15) (asdf::validate-output-translations-form fmakunbound (notinline asdf::validate-output-translations-form) proclaim asdf::form (nil :location) asdf::location :output-translations asdf::validate-output-translations-directive :location :invalid-form-reporter asdf::invalid-output-translation asdf::validate-configuration-form #Y(asdf::validate-output-translations-form nil nil (24 45 4 28 5 22 40 2 77 46 6 13 1 14 7 15 8 14 9 13 0 14 10 15 11 19 7 12 29) #285# #1# 159923) si::fset)) #1# 159923) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #286=#A(t (11) (asdf::validate-output-translations-file fmakunbound (notinline asdf::validate-output-translations-file) proclaim asdf::file asdf::validate-output-translations-form :description "output translations" asdf::validate-configuration-file #Y(asdf::validate-output-translations-file nil nil (24 45 4 26 13 0 15 5 14 6 15 7 19 4 8 29) #286# #1# 160168) si::fset)) #1# 160168) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #287=#A(t (12) (asdf::validate-output-translations-directory fmakunbound (notinline asdf::validate-output-translations-directory) proclaim directory :output-translations asdf::validate-output-translations-directive :invalid-form-reporter asdf::invalid-output-translation asdf::validate-configuration-directory #Y(asdf::validate-output-translations-directory nil nil (24 45 4 26 13 0 14 5 15 6 14 7 15 8 19 5 9 29) #287# #1# 160329) si::fset)) #1# 160329) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 45 12 19 2 46 1 0 73 29) #288=#A(t (47) (asdf::parse-output-translations-string fmakunbound (notinline asdf::parse-output-translations-string) proclaim string (nil :location) asdf::location "" equal (:output-translations :inherit-configuration) stringp "~@<Environment string isn't: ~3i~_~S~@:>" error char #\" eql read-from-string :location #\( asdf::validate-output-translations-form asdf::inherit asdf::directives asdf::start length asdf::end asdf::source asdf::inter-directory-separator asdf::separator asdf::i 0 :start position subseq asdf::s "" "" "~@<Only one inherited configuration allowed: ~3i~_~S~@:>" t :inherit-configuration 1+ > "~@<Uneven number of components in source to destination mapping: ~3i~_~S~@:>" :ignore-inherited-configuration :output-translations nreverse #Y(asdf::parse-output-translations-string nil nil (24 45 4 28 5 22 40 2 77 46 6 10 1 76 40 7 13 1 1 7 17 8 39 6 1 9 73 38 276 10 1 16 10 76 39 10 15 11 13 1 19 2 12 38 260 13 1 8 0 17 13 12 1 14 17 15 39 16 13 1 19 1 16 12 14 17 13 0 19 3 0 38 232 13 1 8 0 17 13 12 1 18 17 15 39 16 13 1 19 1 16 12 14 17 13 0 19 3 19 38 204 58 60 201 75 45 20 75 45 21 8 0 45 22 10 5 16 23 45 24 75 45 25 19 0 26 45 27 75 45 28 57 29 61 2 2 151 13 2 13 10 14 30 13 5 19 4 31 40 3 10 4 51 1 13 10 13 5 13 1 19 3 32 45 33 10 4 39 29 13 4 15 34 10 0 17 8 39 4 75 38 3 10 0 6 2 12 10 7 3 51 7 75 51 4 38 37 15 35 10 0 17 8 39 25 10 8 39 8 15 36 13 11 19 2 12 11 37 51 8 14 38 10 7 3 51 7 38 5 10 0 51 4 10 2 16 39 51 6 13 6 13 5 19 2 40 39 35 10 4 39 8 15 41 13 11 19 2 12 10 8 76 39 8 14 42 10 7 3 51 7 14 43 10 7 16 44 7 2 73 36 9 43 1 35 0 0 62 73 43 1 43 1 43 1 43 1 43 1 43 1 43 1 63 29) #288# #1# 160555) si::fset)) #1# 160555) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::*default-output-translations* si::*make-special (asdf::environment-output-translations asdf::user-output-translations-pathname asdf::user-output-translations-directory-pathname asdf::system-output-translations-pathname asdf::system-output-translations-directory-pathname))) #1# 162177) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #289=#A(t (10) (asdf::wrapping-output-translations fmakunbound (notinline asdf::wrapping-output-translations) proclaim :output-translations "SYS:**;*.*" translate-logical-pathname (:inherit-configuration :enable-user-cache) #Y(asdf::wrapping-output-translations nil nil (26 14 4 15 5 19 1 6 12 75 6 2 12 1 7 7 3 73 29) #289# #1# 162436) si::fset)) #1# 162436) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*output-translations-file* si::*make-special "asdf-output-translations.conf" asdf::coerce-pathname)) #1# 163480) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*output-translations-directory* si::*make-special "asdf-output-translations.conf.d/" asdf::coerce-pathname)) #1# 163573) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #290=#A(t (12) (asdf::user-output-translations-pathname fmakunbound (notinline asdf::user-output-translations-pathname) proclaim (nil :direction) :input asdf::direction asdf::*output-translations-file* :direction asdf::in-user-configuration-directory #Y(asdf::user-output-translations-pathname nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #290# #1# 163673) si::fset)) #1# 163673) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #291=#A(t (12) (asdf::system-output-translations-pathname fmakunbound (notinline asdf::system-output-translations-pathname) proclaim (nil :direction) :input asdf::direction asdf::*output-translations-file* :direction asdf::in-system-configuration-directory #Y(asdf::system-output-translations-pathname nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #291# #1# 163827) si::fset)) #1# 163827) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #292=#A(t (12) (asdf::user-output-translations-directory-pathname fmakunbound (notinline asdf::user-output-translations-directory-pathname) proclaim (nil :direction) :input asdf::direction asdf::*output-translations-directory* :direction asdf::in-user-configuration-directory #Y(asdf::user-output-translations-directory-pathname nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #292# #1# 163984) si::fset)) #1# 163984) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #293=#A(t (12) (asdf::system-output-translations-directory-pathname fmakunbound (notinline asdf::system-output-translations-directory-pathname) proclaim (nil :direction) :input asdf::direction asdf::*output-translations-directory* :direction asdf::in-system-configuration-directory #Y(asdf::system-output-translations-directory-pathname nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #293# #1# 164152) si::fset)) #1# 164152) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #294=#A(t (8) (asdf::environment-output-translations fmakunbound (notinline asdf::environment-output-translations) proclaim "ASDF_OUTPUT_TRANSLATIONS" asdf::getenv #Y(asdf::environment-output-translations nil nil (26 15 4 19 1 5 29) #294# #1# 164324) si::fset)) #1# 164324) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::process-output-translations fmakunbound (notinline asdf::process-output-translations) proclaim :delete-methods t :lambda-list (asdf::spec &key asdf::inherit asdf::collect) ensure-generic-function)) #1# 164406) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t &key (:collect (or symbol function))) t) asdf::inherit-output-translations) proclaim)) #1# 164477) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t &key (:collect (or symbol function)) (:inherit list)) t) asdf::process-output-translations-directive) proclaim)) #1# 164593) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #295=#A(t (13) (asdf::process-output-translations (symbol) (asdf::x &key (asdf::inherit asdf::*default-output-translations*) asdf::collect) asdf::x (t :collect :inherit) asdf::*default-output-translations* asdf::inherit asdf::collect :inherit :collect #Y(asdf::process-output-translations nil nil (24 45 3 28 4 22 40 3 14 5 46 6 22 40 2 77 46 7 13 2 20 0 23 12 14 8 13 1 14 9 13 0 19 5 0 29) #295# #1# 164735) t clos::install-method)) #1# 164735) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #296=#A(t (17) (asdf::process-output-translations (pathname) (pathname &key asdf::inherit asdf::collect) pathname (t :collect :inherit) asdf::inherit asdf::collect asdf::directory-pathname-p asdf::validate-output-translations-directory :inherit :collect asdf::probe-file* asdf::validate-output-translations-file asdf::inherit-output-translations #Y(asdf::process-output-translations nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 39 20 13 2 19 1 8 12 14 9 13 1 14 10 13 0 19 5 0 38 36 13 2 19 1 11 39 20 13 2 19 1 12 12 14 9 13 1 14 10 13 0 19 5 0 38 10 13 1 14 10 13 0 19 3 13 29) #296# #1# 165000) t clos::install-method)) #1# 165000) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #297=#A(t (13) (asdf::process-output-translations (string) (string &key asdf::inherit asdf::collect) string (t :collect :inherit) asdf::inherit asdf::collect asdf::parse-output-translations-string :inherit :collect #Y(asdf::process-output-translations nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 12 14 8 13 1 14 9 13 0 19 5 0 29) #297# #1# 165528) t clos::install-method)) #1# 165528) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #298=#A(t (12) (asdf::process-output-translations (null) (asdf::x &key asdf::inherit asdf::collect) asdf::x (t :collect :inherit) asdf::inherit asdf::collect :collect asdf::inherit-output-translations #Y(asdf::process-output-translations nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 1 14 7 13 0 19 3 8 29) #298# #1# 165746) t clos::install-method)) #1# 165746) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #299=#A(t (16) (asdf::process-output-translations (cons) (asdf::form &key asdf::inherit asdf::collect) asdf::form (t :collect :inherit) asdf::inherit asdf::collect asdf::validate-output-translations-form si::%dolist-var asdf::directive :inherit :collect asdf::process-output-translations-directive #Y(asdf::process-output-translations nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 5 45 8 75 45 9 38 24 10 1 4 51 0 13 0 14 10 13 3 14 11 13 2 19 5 12 10 1 5 51 1 10 1 40 -26 75 73 43 2 29) #299# #1# 165901) t clos::install-method)) #1# 165901) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #300=#A(t (12) (asdf::inherit-output-translations fmakunbound (notinline asdf::inherit-output-translations) proclaim asdf::inherit (nil :collect) asdf::collect :collect :inherit asdf::process-output-translations #Y(asdf::inherit-output-translations nil nil (24 45 4 28 5 22 40 2 77 46 6 10 1 73 39 18 10 1 4 12 14 7 13 0 14 8 10 1 5 12 19 5 9 29) #300# #1# 166134) si::fset)) #1# 166134) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 47 12 19 2 48 1 0 73 29) #301=#A(t (49) (asdf::process-output-translations-directive fmakunbound (notinline asdf::process-output-translations-directive) proclaim asdf::directive (nil :collect :inherit) asdf::inherit asdf::collect atom #:g1197 :enable-user-cache (t :user-cache) :collect :disable-cache (t t) :inherit-configuration asdf::inherit-output-translations :ignore-inherited-configuration :ignore-invalid-entries nil (:enable-user-cache :disable-cache :inherit-configuration nil :ignore-invalid-entries :ignore-inherited-configuration) si::ecase-error second asdf::dst asdf::src :include eq pathname :inherit asdf::process-output-translations t eql :directory :wilden asdf::resolve-location asdf::loc asdf::absolute-pathname-p asdf::truenamize asdf::trusrc asdf::location-function-p symbolp fdefinition eval asdf::trudst asdf::*wild-file* asdf::merge-pathnames* asdf::wilddst #Y(asdf::process-output-translations-directive nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 16 8 39 72 10 2 45 9 10 0 42 10 12 15 11 14 12 13 1 19 3 0 38 48 42 13 12 15 14 14 12 13 1 19 3 0 38 34 42 15 12 13 2 14 12 13 1 19 3 16 38 20 41 17 7 41 18 4 42 19 5 75 73 38 7 13 0 1 20 17 21 43 1 38 217 10 2 4 12 10 2 16 22 12 46 23 46 24 13 0 11 25 17 26 39 23 10 1 73 39 16 10 1 16 27 12 14 28 77 14 12 13 2 19 5 29 38 172 10 0 73 39 167 13 0 11 30 17 31 40 34 13 0 14 32 14 30 14 33 14 30 19 5 34 45 35 13 0 19 1 36 39 8 13 0 19 1 37 38 3 10 0 43 1 45 38 13 2 19 1 39 39 35 13 3 13 0 10 2 16 22 16 40 39 9 10 2 16 22 16 41 38 7 10 2 16 22 16 42 6 2 12 20 1 23 38 81 13 2 11 30 17 26 39 15 13 3 13 0 11 30 6 2 12 20 1 23 38 59 10 2 39 16 13 2 14 32 14 30 14 33 14 30 19 5 34 38 3 10 0 45 43 14 44 13 0 19 2 45 45 46 13 5 13 0 11 30 6 2 12 20 1 23 13 5 13 2 10 1 6 2 12 20 1 23 43 2 43 1 43 2 29) #301# #1# 166303) si::fset)) #1# 166303) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #302=#A(t (23) (asdf::compute-output-translations fmakunbound (notinline asdf::compute-output-translations) proclaim asdf::parameter #:c1201 asdf::x #Y(asdf::c nil nil (24 45 6 26 13 0 10 1 3 51 1 0 29) #302# #1# 168101) asdf::wrapping-output-translations asdf::*default-output-translations* :collect asdf::inherit-output-translations reverse :test equal :from-end t remove-duplicates #Y(asdf::compute-output-translations nil nil (25 40 2 77 46 4 26 75 45 5 30 1 7 15 8 13 2 11 9 7 3 12 14 10 32 0 12 19 3 11 10 1 16 12 12 43 1 43 1 14 13 15 14 14 15 14 16 19 5 17 29) #302# #1# 168101) si::fset function "read the configuration, return it" si::set-documentation)) #1# 168101) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*output-translations-parameter* si::*make-special boundp)) #1# 168404) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 1 0 73 29) #303=#A(t (14) (asdf::initialize-output-translations fmakunbound (notinline asdf::initialize-output-translations) proclaim asdf::*output-translations-parameter* asdf::parameter asdf::compute-output-translations #:g1207 (setf asdf::output-translations) #Y(asdf::initialize-output-translations nil nil (25 40 3 14 4 46 5 26 10 0 52 4 13 0 19 1 6 45 7 13 0 33 8 18 1 43 1 29) #303# #1# 168450) si::fset function "read the configuration, initialize the internal configuration variable,
return the configuration" si::set-documentation)) #1# 168450) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 15 0 15 8 15 9 19 3 10 1 0 73 29) #304=#A(t (11) (asdf::disable-output-translations fmakunbound (notinline asdf::disable-output-translations) proclaim (:output-translations :disable-cache :ignore-inherited-configuration) asdf::initialize-output-translations #Y(asdf::disable-output-translations nil nil (26 15 4 19 1 5 29) #304# #1# 168769) si::fset function "Initialize output translations in a way that maps every file to itself,
effectively disabling the output translation facility." si::set-documentation)) #1# 168769) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #305=#A(t (9) (asdf::ensure-output-translations fmakunbound (notinline asdf::ensure-output-translations) proclaim asdf::output-translations-initialized-p asdf::output-translations asdf::initialize-output-translations #Y(asdf::ensure-output-translations nil nil (26 19 0 4 39 6 19 0 5 38 4 19 0 6 29) #305# #1# 169050) si::fset)) #1# 169050) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 19 12 19 2 20 1 0 73 29) #306=#A(t (21) (asdf::translate-pathname* fmakunbound (notinline asdf::translate-pathname*) proclaim asdf::path asdf::absolute-source asdf::destination asdf::root asdf::source functionp t eq pathnamep "Invalid destination" error asdf::absolute-pathname-p asdf::merge-pathnames* translate-pathname asdf::directorize-pathname-host-device #Y(asdf::translate-pathname* nil nil (24 45 4 24 45 5 24 45 6 25 40 2 77 46 7 25 40 2 77 46 8 26 10 2 16 9 39 12 13 2 13 4 13 3 20 2 23 38 81 13 2 11 10 17 11 39 6 10 4 73 38 68 10 2 16 12 76 39 8 15 13 19 1 14 38 54 13 2 19 1 15 76 39 18 13 4 13 3 13 2 13 1 19 2 16 12 19 3 17 38 29 10 1 39 16 13 4 19 1 18 12 13 3 13 2 19 3 17 38 10 13 4 13 3 13 2 19 3 17 29) #306# #1# 169434) si::fset)) #1# 169434) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 31 12 19 2 32 1 0 73 29) #307=#A(t (33) (asdf::apply-output-translations fmakunbound (notinline asdf::apply-output-translations) proclaim asdf::path #:g1210 logical-pathname typep #308=(or pathname string) asdf::ensure-output-translations asdf::truenamize asdf::p asdf::*output-translations* #:loop-list1211 asdf::destination asdf::source asdf::root asdf::absolute-source 0 #22# t eq pathnamep asdf::absolute-pathname-p asdf::pathname-root asdf::wilden asdf::merge-pathnames* pathname-match-p asdf::translate-pathname* (logical-pathname #308#) si::etypecase-error #Y(asdf::apply-output-translations nil nil (24 45 4 26 10 0 45 5 13 0 15 6 19 2 7 39 6 10 1 73 38 201 13 0 15 8 19 2 7 39 186 19 0 9 58 60 178 13 2 19 1 10 45 11 77 77 11 12 4 12 46 13 46 14 46 15 75 45 16 75 45 17 57 18 61 2 2 131 10 5 2 39 4 35 0 1 10 5 4 45 19 10 0 4 51 4 10 0 5 51 0 10 0 4 51 5 43 1 10 5 5 51 5 13 3 11 20 17 21 40 13 10 3 16 22 39 7 13 3 19 1 23 76 39 6 13 6 19 1 24 51 2 13 3 11 20 17 21 39 8 13 2 19 1 25 38 16 10 2 39 10 13 3 13 2 19 2 26 38 3 10 3 51 1 13 3 11 20 17 21 40 7 13 6 10 1 17 27 39 16 13 6 13 1 13 4 13 2 13 3 19 5 28 36 7 35 0 0 10 6 73 36 7 62 73 43 1 43 1 43 3 43 1 63 38 7 13 0 1 29 17 30 43 1 29) #307# #1# 170043) si::fset)) #1# 170043) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 12 12 14 11 14 13 15 14 19 8 15 29) #309=#A(t (16) (asdf::output-files (:around) (t t) (asdf::operation asdf::component) asdf::operation asdf::component call-next-method asdf::fixedp asdf::files asdf::apply-output-translations mapcar t #Y(asdf::output-files nil nil (24 45 4 24 45 5 26 10 1 10 0 19 0 6 47 1 7 45 8 10 1 39 6 10 0 73 38 9 33 9 12 13 0 19 2 10 12 43 2 14 11 72 2 29) #309# #1# 170944) :documentation "Translate output files, unless asked not to" clos::install-method)) #1# 170944) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 22 12 19 2 23 1 0 73 29) #310=#A(t (24) (asdf::compile-file-pathname* fmakunbound (notinline asdf::compile-file-pathname*) proclaim asdf::input-file asdf::keys (t :output-file) asdf::output-file asdf::absolute-pathname-p compile-file-pathname "x.lisp" apply pathname-type type :type :defaults asdf::merge-pathnames* make-pathname asdf::defaults :output-file asdf::remove-keyword asdf::apply-output-translations #Y(asdf::compile-file-pathname* nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 13 0 19 1 8 39 44 15 9 15 10 13 1 19 3 11 12 19 1 12 45 13 14 14 13 0 14 15 13 3 19 1 16 12 19 4 17 45 18 13 2 13 0 19 2 16 43 2 38 29 15 9 13 2 10 0 39 6 10 1 73 38 8 14 19 13 1 19 2 20 12 19 3 11 12 19 1 21 29) #310# #1# 171283) si::fset)) #1# 171283) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #311=#A(t (13) (asdf::tmpize-pathname fmakunbound (notinline asdf::tmpize-pathname) proclaim asdf::x :name "ASDF-TMP-" pathname-name asdf::strcat :defaults make-pathname #Y(asdf::tmpize-pathname nil nil (24 45 4 26 14 5 15 6 13 0 19 1 7 12 19 2 8 12 14 9 13 0 19 4 10 29) #311# #1# 171830) si::fset)) #1# 171830) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #312=#A(t (9) (asdf::delete-file-if-exists fmakunbound (notinline asdf::delete-file-if-exists) proclaim asdf::x asdf::probe-file* delete-file #Y(asdf::delete-file-if-exists nil nil (24 45 4 26 10 0 39 6 13 0 19 1 5 73 39 5 10 0 16 6 29) #312# #1# 171941) si::fset)) #1# 171941) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 35 12 19 2 36 1 0 73 29) #313=#A(t (37) (asdf::compile-file* fmakunbound (notinline asdf::compile-file*) proclaim asdf::input-file asdf::keys (t :output-file :compile-check) asdf::compile-check asdf::output-file :compile-check asdf::remove-keyword asdf::keywords asdf::compile-file-pathname* :output-file apply asdf::tmpize-pathname asdf::tmp-file :error asdf::status compile-file asdf::failure-p asdf::warnings-p asdf::output-truename asdf::*compile-file-failure-behaviour* asdf::*compile-file-warnings-behaviour* :success #:g1222 :warn :ignore t nil (:ignore :warn :success nil :error) si::ecase-error asdf::delete-file-if-exists rename-file #Y(asdf::compile-file* nil nil (24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 14 9 13 2 19 2 10 45 11 15 12 13 4 14 13 13 1 13 0 19 5 14 45 8 13 0 19 1 15 45 16 11 17 45 18 15 19 13 7 14 13 13 1 13 3 19 5 14 47 2 20 47 1 21 45 22 10 2 39 7 11 23 51 3 38 15 10 1 39 7 11 24 51 3 38 5 11 25 51 3 10 3 45 26 10 0 41 25 7 41 27 4 42 28 5 11 29 38 16 41 17 4 42 30 4 75 38 7 13 0 1 31 17 32 43 1 39 19 10 8 76 40 14 13 8 13 10 14 13 13 4 13 6 19 5 14 39 23 13 5 19 1 33 10 0 39 12 13 0 13 5 19 2 34 10 5 51 0 38 13 13 0 19 1 33 75 51 0 11 29 51 2 13 0 13 1 13 2 72 3 43 3 43 4 29) #313# #1# 172030) si::fset)) #1# 172030) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 13 12 14 14 19 6 15 29) #314=#A(t (16) (asdf::operate (:before) (t t) (asdf::operation-class asdf::system &rest asdf::args &key &allow-other-keys) asdf::operation-class asdf::system asdf::args (t) #:output-files-for-system-and-operation :asdf asdf::find-symbol* "ASDF 2 is not compatible with ASDF-BINARY-LOCATIONS, which you are using.
ASDF 2 now achieves the same purpose with its builtin ASDF-OUTPUT-TRANSLATIONS,
which should be easier to configure. Please stop using ASDF-BINARY-LOCATIONS,
and instead use ASDF-OUTPUT-TRANSLATIONS. See the ASDF manual for details.
In case you insist on preserving your previous A-B-L configuration, but
do not know how to achieve the same effect with A-O-T, you may use function
ASDF:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY as documented in the manual;
call that function where you would otherwise have loaded and configured A-B-L." error #Y(asdf::operate nil nil (24 45 4 24 45 5 27 45 6 28 7 15 8 14 9 19 2 10 73 39 6 15 11 19 1 12 29) #314# #1# 173312) t clos::install-method)) #1# 173312) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 34 12 19 2 35 1 0 73 29) #315=#A(t (36) (asdf::enable-asdf-binary-locations-compatibility fmakunbound (notinline asdf::enable-asdf-binary-locations-compatibility) proclaim (nil :source-to-target-mappings :map-all-source-files :include-per-user-information :default-toplevel-directory :centralize-lisp-binaries) asdf::centralize-lisp-binaries asdf::user-homedir ".fasls/" asdf::subpathname asdf::default-toplevel-directory asdf::include-per-user-information t asdf::map-all-source-files asdf::source-to-target-mappings "asdf:enable-asdf-binary-locations-compatibility doesn't support :map-all-source-files nil on CLISP, ECL and MKCL" error "foo.lisp" compile-file-pathname pathname-type asdf::fasl-type asdf::*wild-file* :type :defaults make-pathname asdf::mapped-files pathname-directory :implementation asdf::*wild-inferiors* append :root asdf::destination-directory :output-translations ((t t) :ignore-inherited-configuration) asdf::initialize-output-translations #Y(asdf::enable-asdf-binary-locations-compatibility nil nil (28 4 22 40 2 77 46 5 22 40 11 19 0 6 12 15 7 19 2 8 12 46 9 22 40 2 77 46 10 22 40 5 11 11 73 12 46 12 22 40 2 77 46 13 10 1 76 39 6 15 14 19 1 15 15 16 19 1 17 12 19 1 18 45 19 10 2 39 5 11 20 38 12 14 21 13 0 14 22 14 20 19 4 23 45 24 10 6 39 32 13 5 10 4 73 39 10 19 0 6 12 19 1 25 5 73 12 14 26 11 27 6 2 12 19 2 28 7 2 38 9 14 29 14 27 11 26 6 3 45 30 14 31 13 3 14 29 14 27 10 1 6 3 12 13 0 10 1 6 1 12 19 2 28 6 2 12 1 32 7 2 12 19 2 28 7 2 12 19 1 33 43 3 29) #315# #1# 174793) si::fset)) #1# 174793) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*default-source-registry-exclusions* si::*make-special boundp (".bzr" ".cdv" ".git" ".hg" ".pc" ".svn" "CVS" "RCS" "SCCS" "_darcs" "_sgbak" "autom4te.cache" "cover_db" "_build" "debian"))) #1# 176154) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-exclusions* si::*make-special boundp asdf::*default-source-registry-exclusions*)) #1# 176642) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (asdf::*source-registry* si::*make-special boundp variable "Either NIL (for uninitialized), or an equal hash-table, mapping
system names to pathnames of .asd files" si::set-documentation)) #1# 176782) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #316=#A(t (9) (asdf::source-registry-initialized-p fmakunbound (notinline asdf::source-registry-initialized-p) proclaim asdf::*source-registry* hash-table typep #Y(asdf::source-registry-initialized-p nil nil (26 14 4 15 5 19 2 6 29) #316# #1# 176922) si::fset)) #1# 176922) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #317=#A(t (10) (asdf::clear-source-registry fmakunbound (notinline asdf::clear-source-registry) proclaim asdf::*source-registry* #Y(asdf::clear-source-registry nil nil (26 75 52 4 0 29) #317# #1# 177005) si::fset function "Undoes any initialization of the source registry.
You might want to call that before you dump an image that would be resumed
with a different configuration, so the configuration would be re-read then." si::set-documentation)) #1# 177005) #Y(si::bytecodes nil nil (1 0 16 1 14 2 77 14 3 14 4 14 5 15 6 14 7 14 8 19 8 9 52 0 1 0 73 29) #A(t (10) (asdf::*wild-asd* si::*make-special :directory :name asdf::*wild* :type "asd" :version :newest make-pathname)) #1# 177287) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 29 12 19 2 30 1 0 73 29) #318=#A(t (31) (asdf::filter-logical-directory-results fmakunbound (notinline asdf::filter-logical-directory-results) proclaim directory asdf::entries asdf::merger logical-pathname typep #:loop-list1237 asdf::f asdf::p #:loop-list-head1238 #:loop-list-tail1239 0 #:g1240 #:g1241 error si::temp #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #318# #1# 177389) si::*handler-clusters* condition asdf::u #:g1243 #:g1244 #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #318# #1# 177389) truename equal rplacd #Y(asdf::filter-logical-directory-results nil nil (24 45 4 24 45 5 24 45 6 26 13 2 15 7 19 2 8 39 219 58 60 214 77 13 2 46 9 46 10 75 45 11 75 6 1 45 12 10 0 45 13 57 14 61 2 2 174 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 4 15 7 19 2 8 39 3 10 4 40 124 57 15 60 50 75 45 16 57 14 61 1 25 15 17 34 19 3 6 1 12 11 20 3 48 20 13 10 13 7 20 1 23 36 2 44 1 10 1 45 21 77 13 0 72 2 43 1 36 2 62 43 1 63 45 22 10 0 39 63 57 23 60 48 75 45 24 57 14 61 1 22 15 17 34 25 3 6 1 12 11 20 3 48 20 10 3 16 26 36 2 44 1 10 1 45 21 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 10 5 16 26 17 27 39 3 10 0 43 1 51 3 10 3 39 11 13 1 10 3 6 1 51 1 17 28 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 2 63 38 4 10 1 73 29) #318# #1# 177389) si::fset)) #1# 177389) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 44 12 19 2 45 1 0 73 29) #319=#A(t (46) (asdf::directory-files fmakunbound (notinline asdf::directory-files) proclaim directory asdf::*wild-file* asdf::pattern pathname asdf::dir logical-pathname typep wild-pathname-p "Invalid wild pattern in logical directory ~S" error pathname-directory (nil (:relative)) :test equal member "Invalid file pattern ~S for logical directory ~S" pathname-host asdf::make-pathname-logical #:g1251 #:g1252 0 si::temp #Y(nil nil nil (24 45 25 26 10 0 51 2 35 1 0 29) #319# #1# 178401) si::*handler-clusters* asdf::merge-pathnames* asdf::directory* condition asdf::entries asdf::f :defaults :name pathname-name asdf::make-pathname-component-logical :type pathname-type :version pathname-version make-pathname #Y(nil nil nil (24 45 32 26 14 33 13 2 14 34 13 0 19 1 35 12 19 1 36 12 14 37 13 0 19 1 38 12 19 1 36 12 14 39 10 0 16 40 12 19 1 36 12 19 8 41 29) #319# #1# 178401) asdf::filter-logical-directory-results #Y(asdf::directory-files nil nil (24 45 4 25 40 3 14 5 46 6 26 10 1 16 7 45 8 13 0 15 9 19 2 10 39 55 13 0 19 1 11 39 8 15 12 13 2 19 2 13 13 1 19 1 14 12 15 15 14 16 15 17 19 4 18 76 39 10 15 19 13 1 13 2 19 3 13 13 1 13 0 19 1 20 12 19 2 21 51 1 57 22 60 54 75 45 23 57 24 61 1 29 15 13 34 26 3 6 1 12 11 27 3 48 27 13 4 13 3 19 2 28 12 19 1 29 36 2 44 1 10 1 45 30 77 13 0 72 2 43 1 36 2 62 43 1 63 45 31 13 3 13 0 34 42 12 19 3 43 43 1 43 1 29) #319# #1# 178401) si::fset)) #1# 178401) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #320=#A(t (9) (asdf::directory-asd-files fmakunbound (notinline asdf::directory-asd-files) proclaim directory asdf::*wild-asd* asdf::directory-files #Y(asdf::directory-asd-files nil nil (24 45 4 26 13 0 14 5 19 2 6 29) #320# #1# 179577) si::fset)) #1# 179577) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 37 12 19 2 38 1 0 73 29) #321=#A(t (39) (asdf::subdirectories fmakunbound (notinline asdf::subdirectories) proclaim directory asdf::ensure-directory-pathname asdf::*wild-directory* asdf::merge-pathnames* asdf::wild #:g1257 #:g1258 0 error si::temp #Y(nil nil nil (24 45 13 26 10 0 51 2 35 1 0 29) #321# #1# 179660) si::*handler-clusters* asdf::directory* condition asdf::dirs pathname-directory asdf::normalize-pathname-directory-component (:absolute) asdf::prefix asdf::d asdf::dir consp :defaults :name :type :version :directory last asdf::make-pathname-component-logical append make-pathname #Y(nil nil nil (24 45 23 26 13 0 19 1 19 12 19 1 20 45 24 10 0 16 25 73 39 43 10 0 5 16 25 73 39 35 14 26 13 5 14 27 77 14 28 77 14 29 77 14 30 13 2 13 0 19 1 31 12 19 1 32 12 19 2 33 12 19 10 34 43 1 29) #321# #1# 179660) asdf::filter-logical-directory-results #Y(asdf::subdirectories nil nil (24 45 4 26 13 0 19 1 5 45 4 14 6 13 0 19 2 7 45 8 57 9 60 48 75 45 10 57 11 61 1 23 15 12 34 14 3 6 1 12 11 15 3 48 15 13 3 19 1 16 36 2 44 1 10 1 45 17 77 13 0 72 2 43 1 36 2 62 43 1 63 45 18 13 2 13 0 13 2 19 1 19 12 19 1 20 40 3 1 21 45 22 34 35 12 43 1 19 3 36 43 3 29) #321# #1# 179660) si::fset)) #1# 179660) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 8 12 19 2 9 1 0 73 29) #322=#A(t (10) (asdf::collect-asds-in-directory fmakunbound (notinline asdf::collect-asds-in-directory) proclaim directory asdf::collect asdf::directory-asd-files map #Y(asdf::collect-asds-in-directory nil nil (24 45 4 24 45 5 26 77 13 0 13 1 19 1 6 12 19 3 7 29) #322# #1# 181649) si::fset)) #1# 181649) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #323=#A(t (13) (asdf::collect-sub*directories fmakunbound (notinline asdf::collect-sub*directories) proclaim directory asdf::collectp asdf::recursep asdf::collector asdf::subdirectories si::%dolist-var asdf::subdir #Y(asdf::collect-sub*directories nil nil (24 45 4 24 45 5 24 45 6 24 45 7 26 13 2 13 3 20 1 23 39 8 13 0 13 3 20 1 23 13 3 19 1 8 45 9 75 45 10 38 31 10 1 4 51 0 13 3 13 0 20 1 23 39 12 13 0 13 4 13 3 13 2 19 4 0 10 1 5 51 1 10 1 40 -33 75 73 43 2 29) #323# #1# 181756) si::fset)) #1# 181756) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 22 12 19 2 23 1 0 73 29) #324=#A(t (24) (asdf::collect-sub*directories-asd-files fmakunbound (notinline asdf::collect-sub*directories-asd-files) proclaim directory (nil :collect :exclude) asdf::*default-source-registry-exclusions* asdf::exclude asdf::collect t constantly asdf::x pathname-directory last :test equal member #Y(nil nil nil (24 45 11 26 13 0 19 1 12 12 19 1 13 4 12 13 2 14 14 33 15 12 19 4 16 76 73 29) #324# #1# 182053) asdf::dir asdf::collect-asds-in-directory #Y(nil nil nil (24 45 18 26 13 0 13 1 19 2 19 29) #324# #1# 182053) asdf::collect-sub*directories #Y(asdf::collect-sub*directories-asd-files nil nil (24 45 4 28 5 22 40 3 14 6 46 7 22 40 2 77 46 8 13 2 11 9 16 10 12 34 17 12 34 20 12 19 4 21 29) #324# #1# 182053) si::fset)) #1# 182053) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 19 12 19 2 20 1 0 73 29) #325=#A(t (21) (asdf::validate-source-registry-directive fmakunbound (notinline asdf::validate-source-registry-directive) proclaim asdf::directive (:default-registry) member consp rest :include :directory :tree asdf::length=n-p asdf::location-designator-p :exclude :also-exclude stringp every :default-registry #Y(asdf::validate-source-registry-directive nil nil (24 45 4 26 13 0 15 5 19 2 6 73 40 73 10 0 16 7 73 39 66 10 0 5 45 8 10 1 4 41 9 7 41 10 4 42 11 20 13 0 9 1 19 2 12 73 39 8 10 0 4 12 19 1 13 38 28 41 14 4 42 15 11 33 16 12 13 0 19 2 17 38 12 42 18 7 10 0 76 73 38 3 75 73 43 1 29) #325# #1# 182393) si::fset)) #1# 182393) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #326=#A(t (15) (asdf::validate-source-registry-form fmakunbound (notinline asdf::validate-source-registry-form) proclaim asdf::form (nil :location) asdf::location :source-registry asdf::validate-source-registry-directive :location :invalid-form-reporter asdf::invalid-source-registry asdf::validate-configuration-form #Y(asdf::validate-source-registry-form nil nil (24 45 4 28 5 22 40 2 77 46 6 13 1 14 7 15 8 14 9 13 0 14 10 15 11 19 7 12 29) #326# #1# 182899) si::fset)) #1# 182899) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #327=#A(t (11) (asdf::validate-source-registry-file fmakunbound (notinline asdf::validate-source-registry-file) proclaim asdf::file asdf::validate-source-registry-form :description "a source registry" asdf::validate-configuration-file #Y(asdf::validate-source-registry-file nil nil (24 45 4 26 13 0 15 5 14 6 15 7 19 4 8 29) #327# #1# 183123) si::fset)) #1# 183123) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #328=#A(t (12) (asdf::validate-source-registry-directory fmakunbound (notinline asdf::validate-source-registry-directory) proclaim directory :source-registry asdf::validate-source-registry-directive :invalid-form-reporter asdf::invalid-source-registry asdf::validate-configuration-directory #Y(asdf::validate-source-registry-directory nil nil (24 45 4 26 13 0 14 5 15 6 14 7 15 8 19 5 9 29) #328# #1# 183274) si::fset)) #1# 183274) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 49 12 19 2 50 1 0 73 29) #329=#A(t (51) (asdf::parse-source-registry-string fmakunbound (notinline asdf::parse-source-registry-string) proclaim string (nil :location) asdf::location "" equal (:source-registry :inherit-configuration) stringp "~@<Environment string isn't: ~3i~_~S~@:>" error char "\"(" find read-from-string :location asdf::validate-source-registry-form asdf::inherit asdf::directives asdf::start length asdf::end asdf::inter-directory-separator asdf::separator asdf::pos 0 :start position subseq asdf::s asdf::dir asdf::absolute-pathname-p "~@<source-registry string must specify absolute pathnames: ~3i~_~S~@:>" #Y(asdf::check nil nil (24 45 32 26 13 0 19 1 33 76 39 8 15 34 13 11 19 2 12 10 0 73 29) #329# #1# 183485) "" "~@<Only one inherited configuration allowed: ~3i~_~S~@:>" t :inherit-configuration "//" asdf::string-suffix-p :tree - :directory 1+ (:ignore-inherited-configuration) :source-registry nreverse #Y(asdf::parse-source-registry-string nil nil (24 45 4 28 5 22 40 2 77 46 6 10 1 76 40 7 13 1 1 7 17 8 39 6 1 9 73 38 262 10 1 16 10 76 39 10 15 11 13 1 19 2 12 38 246 13 1 8 0 17 13 12 15 14 19 2 15 39 16 13 1 19 1 16 12 14 17 13 0 19 3 18 38 217 58 60 214 75 45 19 75 45 20 8 0 45 21 10 5 16 22 45 23 19 0 24 45 25 75 45 26 57 27 61 2 2 169 13 2 13 9 14 28 13 4 19 4 29 51 1 13 9 13 4 10 1 73 40 4 10 3 73 12 19 3 30 45 31 30 1 35 15 36 10 1 17 8 39 25 10 8 39 8 15 37 13 11 19 2 12 11 38 51 8 15 39 10 7 3 51 7 38 61 13 1 15 40 19 2 41 39 36 14 42 13 1 9 0 10 1 16 22 12 9 2 19 2 43 12 19 3 30 12 32 0 18 1 6 2 12 10 7 3 51 7 38 17 14 44 13 1 32 0 18 1 6 2 12 10 7 3 51 7 43 1 10 2 39 9 10 2 16 45 51 5 38 24 10 7 76 39 8 15 46 10 6 3 51 6 14 47 10 6 16 48 7 2 73 36 8 43 1 35 0 0 62 73 43 1 43 1 43 1 43 1 43 1 43 1 63 29) #329# #1# 183485) si::fset)) #1# 183485) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 13 12 19 2 14 1 0 73 29) #330=#A(t (15) (asdf::register-asd-directory fmakunbound (notinline asdf::register-asd-directory) proclaim directory (nil :collect :exclude :recurse) asdf::recurse asdf::exclude asdf::collect asdf::collect-asds-in-directory :exclude :collect asdf::collect-sub*directories-asd-files #Y(asdf::register-asd-directory nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 76 39 10 13 3 13 0 19 2 9 38 14 13 3 14 10 13 1 14 11 13 0 19 5 12 29) #330# #1# 185179) si::fset)) #1# 185179) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::*default-source-registries* si::*make-special (asdf::environment-source-registry asdf::user-source-registry asdf::user-source-registry-directory asdf::system-source-registry asdf::system-source-registry-directory asdf::default-source-registry))) #1# 185419) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-file* si::*make-special "source-registry.conf" asdf::coerce-pathname)) #1# 185648) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-directory* si::*make-special "source-registry.conf.d/" asdf::coerce-pathname)) #1# 185728) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #331=#A(t (11) (asdf::wrapping-source-registry fmakunbound (notinline asdf::wrapping-source-registry) proclaim :source-registry :tree "SYS:" translate-logical-pathname :inherit-configuration #Y(asdf::wrapping-source-registry nil nil (26 14 4 14 5 15 6 19 1 7 6 2 12 11 8 6 3 73 29) #331# #1# 185815) si::fset)) #1# 185815) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 32 12 19 2 33 1 0 73 29) #332=#A(t (34) (asdf::default-source-registry fmakunbound (notinline asdf::default-source-registry) proclaim :source-registry :directory asdf::default-directory asdf::os-unix-p "XDG_DATA_HOME" asdf::getenv-absolute-directory asdf::user-homedir ".local/share/" asdf::subpathname "XDG_DATA_DIRS" asdf::getenv-absolute-directories ("/usr/local/share" "/usr/share") asdf::os-windows-p asdf::get-folder-path (:local-appdata :appdata :common-appdata) mapcar append #:loop-list1275 asdf::dir #:loop-list-head1276 #:loop-list-tail1277 0 "common-lisp/systems/" asdf::subpathname* rplacd :tree "common-lisp/source/" (:inherit-configuration) #Y(asdf::default-source-registry nil nil (26 14 4 14 5 19 0 6 6 2 12 58 60 148 77 19 0 7 73 39 31 15 8 19 1 9 73 40 10 19 0 10 12 15 11 19 2 12 12 15 13 19 1 14 40 3 1 15 7 2 73 12 19 0 16 73 39 8 15 17 15 18 19 2 19 12 19 2 20 12 46 21 46 22 75 6 1 45 23 10 0 45 24 57 25 61 2 2 60 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 14 5 13 3 15 26 19 2 27 6 2 6 1 51 1 17 28 13 1 14 29 13 3 15 30 19 2 27 6 2 6 1 51 1 17 28 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 31 19 2 20 7 3 73 29) #332# #1# 186167) si::fset)) #1# 186167) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #333=#A(t (12) (asdf::user-source-registry fmakunbound (notinline asdf::user-source-registry) proclaim (nil :direction) :input asdf::direction asdf::*source-registry-file* :direction asdf::in-user-configuration-directory #Y(asdf::user-source-registry nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #333# #1# 186937) si::fset)) #1# 186937) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #334=#A(t (12) (asdf::system-source-registry fmakunbound (notinline asdf::system-source-registry) proclaim (nil :direction) :input asdf::direction asdf::*source-registry-file* :direction asdf::in-system-configuration-directory #Y(asdf::system-source-registry nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #334# #1# 187073) si::fset)) #1# 187073) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #335=#A(t (12) (asdf::user-source-registry-directory fmakunbound (notinline asdf::user-source-registry-directory) proclaim (nil :direction) :input asdf::direction asdf::*source-registry-directory* :direction asdf::in-user-configuration-directory #Y(asdf::user-source-registry-directory nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #335# #1# 187213) si::fset)) #1# 187213) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #336=#A(t (12) (asdf::system-source-registry-directory fmakunbound (notinline asdf::system-source-registry-directory) proclaim (nil :direction) :input asdf::direction asdf::*source-registry-directory* :direction asdf::in-system-configuration-directory #Y(asdf::system-source-registry-directory nil nil (28 4 22 40 3 14 5 46 6 14 7 14 8 13 0 19 3 9 29) #336# #1# 187364) si::fset)) #1# 187364) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #337=#A(t (8) (asdf::environment-source-registry fmakunbound (notinline asdf::environment-source-registry) proclaim "CL_SOURCE_REGISTRY" asdf::getenv #Y(asdf::environment-source-registry nil nil (26 15 4 19 1 5 29) #337# #1# 187519) si::fset)) #1# 187519) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 14 4 14 5 14 6 15 7 19 5 8 29) #A(t (9) (asdf::process-source-registry fmakunbound (notinline asdf::process-source-registry) proclaim :delete-methods t :lambda-list (asdf::spec &key asdf::inherit asdf::register) ensure-generic-function)) #1# 187591) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t &key (:register (or symbol function))) t) asdf::inherit-source-registry) proclaim)) #1# 187659) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t &key (:register (or symbol function)) (:inherit list)) t) asdf::process-source-registry-directive) proclaim)) #1# 187772) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #338=#A(t (12) (asdf::process-source-registry (symbol) (asdf::x &key asdf::inherit asdf::register) asdf::x (t :register :inherit) asdf::inherit asdf::register :inherit :register #Y(asdf::process-source-registry nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 20 0 23 12 14 7 13 1 14 8 13 0 19 5 0 29) #338# #1# 187911) t clos::install-method)) #1# 187911) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #339=#A(t (20) (asdf::process-source-registry (pathname) (pathname &key asdf::inherit asdf::register) pathname (t :register :inherit) asdf::inherit asdf::register asdf::directory-pathname-p asdf::truenamize asdf::*here-directory* asdf::validate-source-registry-directory :inherit :register asdf::probe-file* asdf::pathname-directory-pathname asdf::validate-source-registry-file asdf::inherit-source-registry #Y(asdf::process-source-registry nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 39 29 13 2 19 1 8 48 9 13 2 19 1 10 12 14 11 13 1 14 12 13 0 19 5 0 44 1 38 45 13 2 19 1 13 39 29 13 2 19 1 14 48 9 13 2 19 1 15 12 14 11 13 1 14 12 13 0 19 5 0 44 1 38 10 13 1 14 12 13 0 19 3 16 29) #339# #1# 188059) t clos::install-method)) #1# 188059) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #340=#A(t (13) (asdf::process-source-registry (string) (string &key asdf::inherit asdf::register) string (t :register :inherit) asdf::inherit asdf::register asdf::parse-source-registry-string :inherit :register #Y(asdf::process-source-registry nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 12 14 8 13 1 14 9 13 0 19 5 0 29) #340# #1# 188695) t clos::install-method)) #1# 188695) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #341=#A(t (12) (asdf::process-source-registry (null) (asdf::x &key asdf::inherit asdf::register) asdf::x (t :register :inherit) asdf::inherit asdf::register :register asdf::inherit-source-registry #Y(asdf::process-source-registry nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 1 14 7 13 0 19 3 8 29) #341# #1# 188900) t clos::install-method)) #1# 188900) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 15 12 14 16 19 6 17 29) #342=#A(t (18) (asdf::process-source-registry (cons) (asdf::form &key asdf::inherit asdf::register) asdf::form (t :register :inherit) asdf::inherit asdf::register asdf::*default-source-registry-exclusions* asdf::*source-registry-exclusions* asdf::validate-source-registry-form si::%dolist-var asdf::directive :inherit :register asdf::process-source-registry-directive #Y(asdf::process-source-registry nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 11 7 48 8 13 2 19 1 9 5 45 10 75 45 11 38 24 10 1 4 51 0 13 0 14 12 13 3 14 13 13 2 19 5 14 10 1 5 51 1 10 1 40 -26 75 73 43 2 44 1 29) #342# #1# 189050) t clos::install-method)) #1# 189050) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 10 12 19 2 11 1 0 73 29) #343=#A(t (12) (asdf::inherit-source-registry fmakunbound (notinline asdf::inherit-source-registry) proclaim asdf::inherit (nil :register) asdf::register :register :inherit asdf::process-source-registry #Y(asdf::inherit-source-registry nil nil (24 45 4 28 5 22 40 2 77 46 6 10 1 73 39 18 10 1 4 12 14 7 13 0 14 8 10 1 5 12 19 5 9 29) #343# #1# 189356) si::fset)) #1# 189356) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 44 12 19 2 45 1 0 73 29) #344=#A(t (46) (asdf::process-source-registry-directive fmakunbound (notinline asdf::process-source-registry-directive) proclaim asdf::directive (nil :register :inherit) asdf::inherit asdf::register consp #:g1290 #:g1291 si::dm-too-few-arguments asdf::kw rest #:g1292 :include #:g1293 #:g1294 pathname si::dm-too-many-arguments asdf::resolve-location :inherit :register asdf::process-source-registry :directory #:g1295 #:g1296 t :tree #:g1297 #:g1298 :recurse :exclude asdf::*source-registry-exclusions* :also-exclude #:g1301 append :default-registry (asdf::default-source-registry) asdf::inherit-source-registry :inherit-configuration :ignore-inherited-configuration (:include :directory :tree :exclude :also-exclude :default-registry :inherit-configuration :ignore-inherited-configuration) si::ecase-error #Y(asdf::process-source-registry-directive nil nil (24 45 4 28 5 22 40 2 77 46 6 22 40 2 77 46 7 10 2 16 8 39 5 10 2 38 5 10 2 6 1 45 9 10 0 45 10 10 0 76 39 6 13 1 19 1 11 10 0 4 12 10 0 5 51 0 22 45 12 10 1 45 13 10 1 45 14 10 0 42 15 60 10 1 45 16 10 0 45 17 10 0 76 39 6 13 1 19 1 11 10 0 4 12 10 0 5 51 0 22 45 18 10 1 39 6 13 2 19 1 19 13 0 19 1 20 12 14 21 77 14 22 13 8 19 5 23 43 3 38 207 42 24 63 10 1 45 25 10 0 45 26 10 0 76 39 6 13 1 19 1 11 10 0 4 12 10 0 5 51 0 22 45 18 10 1 39 6 13 2 19 1 19 10 0 39 16 13 8 13 0 14 24 14 27 19 3 20 12 20 1 23 43 3 38 142 42 28 71 10 1 45 29 10 0 45 30 10 0 76 39 6 13 1 19 1 11 10 0 4 12 10 0 5 51 0 22 45 18 10 1 39 6 13 2 19 1 19 10 0 39 24 13 8 13 0 14 24 14 27 19 3 20 12 14 31 14 27 14 32 14 33 20 5 23 43 3 38 69 42 32 7 10 1 52 33 38 60 42 34 18 10 1 45 35 14 33 13 0 19 2 36 52 33 43 1 38 40 42 37 12 15 38 14 22 13 5 19 3 39 38 26 42 40 12 13 6 14 22 13 5 19 3 39 38 12 42 41 3 38 7 13 0 1 42 17 43 43 1 43 4 75 73 29) #344# #1# 189520) si::fset)) #1# 189520) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 27 12 19 2 28 1 0 73 29) #345=#A(t (29) (asdf::flatten-source-registry fmakunbound (notinline asdf::flatten-source-registry) proclaim asdf::parameter #:collect1305 asdf::x #Y(asdf::collect nil nil (24 45 6 26 13 0 10 1 3 51 1 0 29) #345# #1# 190647) asdf::default-directory *default-pathname-defaults* asdf::wrapping-source-registry asdf::*default-source-registries* :register directory (nil :exclude :recurse) asdf::recurse asdf::exclude :recurse :exclude #Y(nil nil nil (24 45 13 28 14 22 40 2 77 46 15 22 40 2 77 46 16 13 2 14 17 13 1 14 18 10 0 6 5 12 32 3 18 1 29) #345# #1# 190647) asdf::inherit-source-registry reverse :test equal :from-end t remove-duplicates #Y(asdf::flatten-source-registry nil nil (25 40 2 77 46 4 26 75 45 5 30 1 7 19 0 8 48 9 15 10 13 2 11 11 7 3 12 14 12 34 19 12 19 3 20 44 1 10 1 16 21 12 43 1 43 1 14 22 15 23 14 24 14 25 19 5 26 29) #345# #1# 190647) si::fset)) #1# 190647) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 43 12 19 2 44 1 0 73 29) #346=#A(t (45) (asdf::compute-source-registry fmakunbound (notinline asdf::compute-source-registry) proclaim asdf::parameter asdf::*source-registry* asdf::registry asdf::flatten-source-registry si::%dolist-var asdf::entry #:g1338 #:g1339 si::dm-too-few-arguments directory :recurse si::search-keyword #:g1340 si::missing-keyword eq asdf::recurse :exclude #:g1341 asdf::exclude (:exclude :recurse) si::check-keyword :test equal make-hash-table asdf::h :collect asdf::asd pathname-name asdf::name logical-pathname typep string-downcase gethash asdf::*asdf-verbose* "~@<In source-registry entry ~A~@[/~*~] ~
                                found several entries for ~A - picking ~S over ~S~:>" warn si::hash-set #Y(nil nil nil (24 45 30 26 13 0 19 1 31 45 32 13 1 15 33 19 2 34 39 8 13 0 19 1 35 38 3 10 0 45 32 13 0 13 13 19 2 36 39 5 75 73 38 56 13 0 13 3 19 2 36 39 29 11 37 73 39 22 15 38 13 8 13 6 13 0 13 0 13 3 19 2 36 12 13 2 19 6 39 38 19 13 0 13 13 13 2 19 3 40 13 0 13 3 13 2 19 3 40 43 2 29) #346# #1# 191123) asdf::register-asd-directory #Y(asdf::compute-source-registry nil nil (25 40 2 77 46 4 25 40 3 14 5 46 6 26 13 1 19 1 7 45 8 75 45 9 38 129 10 1 4 51 0 10 0 45 10 10 0 45 11 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 13 13 1 15 14 19 2 15 45 16 13 0 1 17 17 18 39 4 75 38 3 10 0 45 19 13 3 15 20 19 2 15 45 21 13 0 1 17 17 18 39 4 75 38 3 10 0 45 22 13 5 15 23 19 2 24 14 25 15 26 19 2 27 45 28 13 5 14 14 13 3 14 20 13 1 14 29 34 41 12 19 7 42 10 0 43 1 43 7 10 1 5 51 1 10 1 40 -131 43 2 0 29) #346# #1# 191123) si::fset)) #1# 191123) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*source-registry-parameter* si::*make-special boundp)) #1# 192744) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 11 12 19 2 12 1 0 73 29) #347=#A(t (13) (asdf::initialize-source-registry fmakunbound (notinline asdf::initialize-source-registry) proclaim asdf::*source-registry-parameter* asdf::parameter :test equal make-hash-table asdf::*source-registry* asdf::compute-source-registry #Y(asdf::initialize-source-registry nil nil (25 40 3 14 4 46 5 26 10 0 52 4 14 6 15 7 19 2 8 52 9 13 0 19 1 10 29) #347# #1# 192786) si::fset)) #1# 192786) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 7 12 19 2 8 1 0 73 29) #348=#A(t (9) (asdf::ensure-source-registry fmakunbound (notinline asdf::ensure-source-registry) proclaim asdf::parameter asdf::source-registry-initialized-p asdf::initialize-source-registry #Y(asdf::ensure-source-registry nil nil (25 40 2 77 46 4 26 19 0 5 76 39 6 13 0 19 1 6 0 29) #348# #1# 193018) si::fset)) #1# 193018) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 9 12 19 2 10 1 0 73 29) #349=#A(t (11) (asdf::sysdef-source-registry-search fmakunbound (notinline asdf::sysdef-source-registry-search) proclaim asdf::system asdf::ensure-source-registry asdf::coerce-name asdf::*source-registry* gethash #Y(asdf::sysdef-source-registry-search nil nil (24 45 4 26 19 0 5 13 0 19 1 6 12 14 7 19 2 8 12 72 1 29) #349# #1# 193707) si::fset)) #1# 193707) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 6 12 19 2 7 1 0 73 29) #350=#A(t (8) (asdf::clear-configuration fmakunbound (notinline asdf::clear-configuration) proclaim asdf::clear-source-registry asdf::clear-output-translations #Y(asdf::clear-configuration nil nil (26 19 0 4 19 0 5 29) #350# #1# 193843) si::fset)) #1# 193843) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 58 60 75 77 14 10 46 11 46 12 75 6 1 45 13 10 0 45 14 57 15 61 2 2 41 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 1 16 17 17 76 39 11 13 1 34 21 6 1 51 1 17 22 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 52 10 1 23 52 24 15 23 1 41 12 19 2 9 1 23 73 29) #351=#A(t (42) (asdf::register-pre-built-system asdf::name asdf::system :name asdf::coerce-name :source-file make-instance asdf::register-system #Y(asdf::register-pre-built-system nil nil (24 45 1 26 15 2 14 3 13 0 19 1 4 12 14 5 77 19 5 6 12 19 1 7 29) #351# #1# 193932) si::fset ext::*module-provider-functions* #:loop-list1353 asdf::f #:loop-list-head1354 #:loop-list-tail1355 0 asdf::module-provide-asdf eq list asdf::l values-list #Y(nil nil nil (24 45 1 26 15 18 13 4 13 0 20 1 23 69 21 23 45 19 10 0 4 39 10 13 1 19 1 4 12 19 1 0 10 0 16 20 43 1 29) #351# #1# 193932) rplacd asdf::compile-file-keeping-object asdf::*compile-op-compile-file-function* asdf::input-file asdf::keys (t) asdf::use-ecl-byte-compiler-p asdf::compile-file* apply :system-p t asdf::flags2 asdf::flags1 asdf::object-file :type :fasl compile-file-pathname :lisp-files c::build-fasl #Y(asdf::compile-file-keeping-object nil nil (24 45 25 27 45 26 28 27 19 0 28 39 12 15 29 13 1 13 0 19 3 30 38 62 15 29 13 1 14 31 14 32 13 0 19 5 30 47 2 33 47 1 34 45 35 10 0 73 39 27 13 0 14 36 14 37 19 3 38 12 14 39 10 0 6 1 12 19 3 40 73 39 4 10 0 73 12 13 1 13 2 72 3 43 3 29) #351# #1# 193932))) #1# 193932) #Y(si::bytecodes nil nil (1 0 16 1 1 2 16 3 15 0 1 24 12 19 2 25 1 0 73 29) #352=#A(t (26) (asdf::module-provide-asdf fmakunbound (notinline asdf::module-provide-asdf) proclaim asdf::name style-warning muffle-warning asdf::missing-component constantly error asdf::e *error-output* "~@<ASDF could not load ~(~A~) because ~A.~@:>~%" format #Y(nil nil nil (24 45 10 26 14 11 15 12 13 1 13 0 19 4 13 29) #352# #1# 196121) si::*handler-clusters* make-broadcast-stream string-downcase asdf::find-system asdf::system asdf::*verbose-out* :verbose asdf::require-system t #Y(asdf::module-provide-asdf nil nil (24 45 4 26 15 5 33 6 3 12 15 7 75 16 8 3 12 15 9 34 14 3 6 3 12 11 15 3 48 15 19 0 16 12 13 0 19 1 17 12 77 19 2 18 12 46 19 49 20 10 0 73 39 12 13 0 14 21 77 19 3 22 11 23 73 43 1 44 1 44 1 29) #352# #1# 196121) si::fset)) #1# 196121) #Y(si::bytecodes nil nil (11 0 45 1 10 0 73 39 5 1 2 16 3 43 1 29) #A(t (4) (t asdf::x (pushnew 'asdf::module-provide-asdf ext::*module-provider-functions*) eval)) #1# 196789) #Y(si::bytecodes nil nil (11 0 73 39 8 19 0 1 75 52 0 73 29) #A(t (2) (asdf::*ignored-configuration-form* asdf::clear-configuration)) #1# 197264) #Y(si::bytecodes nil nil (11 0 73 39 10 15 1 19 0 2 12 19 2 3 29) #A(t (4) (*load-verbose* ";; ASDF, version ~a~%" asdf::asdf-version asdf::asdf-message)) #1# 197694) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 73 29) #A(t (3) (:asdf *features* adjoin)) #1# 197855) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 73 29) #A(t (3) (:asdf2 *features* adjoin)) #1# 198638) #Y(si::bytecodes nil nil (11 0 16 1 29) #A(t (2) (:asdf provide)) #1# 198666))
